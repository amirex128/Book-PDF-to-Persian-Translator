418
CHAPTER 12
Deploying microservices
HANDLING EVENTS GENERATED BY AWS SERVICES
The second way to invoke a lambda function is to configure your lambda function to
handle events generated by an AWS service. Examples of events that can trigger a
lambda function include the following:
An object is created in an S3 bucket.
An item is created, updated, or deleted in a DynamoDB table.
A message is available to read from a Kinesis stream.
An email is received via the Simple email service.
Because of this integration with other AWS services, AWS Lambda is useful for a wide
range of tasks. 
DEFINING SCHEDULED LAMBDA FUNCTIONS
Another way to invoke a lambda function is to use a Linux cron-like schedule. You can
configure your lambda function to be invoked periodically—for example, every minute,
3 hours, or 7 days. Alternatively, you can use a cron expression to specify when AWS
should invoke your lambda. cron expressions give you tremendous flexibility. For exam-
ple, you can configure a lambda to be invoked at 2:15 p.m. Monday through Friday. 
INVOKING A LAMBDA FUNCTION USING A WEB SERVICE REQUEST
The fourth way to invoke a lambda function is for your application to invoke it using a
web service request. The web service request specifies the name of the lambda function
and the input event data. Your application can invoke a lambda function synchronously
or asynchronously. If your application invokes the lambda function synchronously, the
web service’s HTTP response contains the response of the lambda function. Other-
wise, if it invokes the lambda function asynchronously, the web service response indi-
cates whether the execution of the lambda was successfully initiated. 
12.5.4 Benefits of using lambda functions
Deploying services using lambda functions has several benefits:
Integrated with many AWS services—It’s remarkably straightforward to write lamb-
das that consume events generated by AWS services, such as DynamoDB and
Kinesis, and handle HTTP requests via the AWS API Gateway.
Eliminates many system administration tasks—You’re no longer responsible for low-
level system administration. There are no operating systems or runtimes to
patch. As a result, you can focus on developing your application.
Elasticity—AWS Lambda runs as many instances of your application as are needed
to handle the load. You don’t have the challenge of predicting needed capacity or
run the risk of underprovisioning or overprovisioning VMs or containers.
Usage-based pricing—Unlike a typical IaaS cloud, which charges by the minute or
hour for a VM or container even when it’s idle, AWS Lambda only charges you
for the resources that are consumed while processing each request. 
 
