20
CHAPTER 1
Escaping monolithic hell
book The Righteous Mind: Why Good People Are Divided by Politics and Religion (Vintage,
2013), uses the metaphor of an elephant and its rider to describe how the human mind
works. The elephant represents the emotion part of the human brain. It makes most of
the decisions. The rider represents the rational part of the brain. It can sometimes influ-
ence the elephant, but it mostly provides justifications for the elephant’s decisions.
 We—the software development community—need to overcome our emotional
nature and find a better way of discussing and applying technology. A great way to dis-
cuss and describe technology is to use the pattern format, because it’s objective. When
describing a technology in the pattern format, you must, for example, describe the
drawbacks. Let’s take a look at the pattern format. 
1.6.2
Patterns and pattern languages
A pattern is a reusable solution to a problem that occurs in a particular context. It’s an
idea that has its origins in real-world architecture and that has proven to be useful in
software architecture and design. The concept of a pattern was created by Christo-
pher Alexander, a real-world architect. He also created the concept of a pattern lan-
guage, a collection of related patterns that solve problems within a particular domain.
His book A Pattern Language: Towns, Buildings, Construction (Oxford University Press,
1977) describes a pattern language for architecture that consists of 253 patterns. The
patterns range from solutions to high-level problems, such as where to locate a city
(“Access to water”), to low-level problems, such as how to design a room (“Light on
two sides of every room”). Each of these patterns solves a problem by arranging physi-
cal objects that range in scope from cities to windows.
 Christopher Alexander’s writings inspired the software community to adopt the
concept of patterns and pattern languages. The book Design Patterns: Elements of Reus-
able Object-Oriented Software (Addison-Wesley Professional, 1994), by Erich Gamma,
Richard Helm, Ralph Johnson, and John Vlissides is a collection of object-oriented
design patterns. The book popularized patterns among software developers. Since the
mid-1990s, software developers have documented numerous software patterns. A soft-
ware pattern solves a software architecture or design problem by defining a set of col-
laborating software elements.
 Let’s imagine, for example, that you’re building a banking application that must
support a variety of overdraft policies. Each policy defines limits on the balance of an
account and the fees charged for an overdrawn account. You can solve this problem
using the Strategy pattern, which is a well-known pattern from the classic Design Pat-
terns book. The solution defined by the Strategy pattern consists of three parts:
A strategy interface called Overdraft that encapsulates the overdraft algorithm
One or more concrete strategy classes, one for each particular context
The Account class that uses the algorithm
The Strategy pattern is an object-oriented design pattern, so the elements of the solution
are classes. Later in this section, I describe high-level design patterns, where the solu-
tion consists of collaborating services.
 
