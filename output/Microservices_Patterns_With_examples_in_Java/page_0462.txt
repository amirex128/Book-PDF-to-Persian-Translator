432
CHAPTER 13
Refactoring to microservices
order to reach the sunlight above the forest canopy. Often the tree dies, because
either it’s killed by the vine or it dies of old age, leaving a tree-shaped vine.
The refactoring process typically takes months, or years. For example, according to
Steve Yegge (https://plus.google.com/+RipRowan/posts/eVeouesvaVX) it took Ama-
zon.com a couple of years to refactor its monolith. In the case of a very large system,
you may never complete the process. You could, for example, get to a point where you
have tasks that are more important than breaking up the monolith, such as imple-
menting revenue-generating features. If the monolith isn’t an obstacle to ongoing
development, you may as well leave it alone. 
DEMONSTRATE VALUE EARLY AND OFTEN
An important benefit of incrementally refactoring to a microservice architecture is
that you get an immediate return on your investment. That’s very different than a big
bang rewrite, which doesn’t deliver any benefit until it’s complete. When incremen-
tally refactoring the monolith, you can develop each new service using a new technology
stack and a modern, high-velocity, DevOps-style development and delivery process. As a
result, your team’s delivery velocity steadily increases over time.
 What’s more, you can migrate the high-value areas of your application to microser-
vices first. For instance, imagine you’re working on the FTGO application. The business
might, for example, decide that the delivery scheduling algorithm is a key competitive
advantage. It’s likely that delivery management will be an area of constant, ongoing
development. By extracting delivery management into a standalone service, the delivery
management team will be able to work independently of the rest of the FTGO develop-
ers and significantly increase their development velocity. They’ll be able to frequently
deploy new versions of the algorithm and evaluate their effectiveness.
 Another benefit of being able to deliver value earlier is that it helps maintain the
business’s support for the migration effort. Their ongoing support is essential, because
the refactoring effort will mean that less time is spent on developing features. Some
organizations have difficulty eliminating technical debt because past attempts were
too ambitious and didn’t provide much benefit. As a result, the business becomes
reluctant to invest in further cleanup efforts. The incremental nature of refactoring to
microservices means that the development team is able to demonstrate value early
and often. 
MINIMIZE CHANGES TO THE MONOLITH
A recurring theme in this chapter is that you should avoid making widespread
changes to the monolith when migrating to a microservice architecture. It’s inevitable
Pattern: Strangler application
Modernize an application by incrementally developing a new (strangler) application
around the legacy application. See http://microservices.io/patterns/refactoring/
strangler-application.html.
 
