PREFACE
xviii
 Clearly, the application had quickly outgrown its monolith architecture, but what was
the alternative? The answer had been out in the software community for some time at
companies such as eBay and Amazon. Amazon had, for example, started to migrate away
from the monolith around 2002 (https://plus.google.com/110981030061712822816/
posts/AaygmbzVeRq). The new architecture replaced the monolith with a collection
of loosely coupled services. Services are owned by what Amazon calls two-pizza teams—
teams small enough to be fed by two pizzas.
 Amazon had adopted this architecture to accelerate the rate of software develop-
ment so that the company could innovate faster and compete more effectively. The
results are impressive: Amazon reportedly deploys changes into production every 11.6
seconds!
 In early 2010, after I’d moved on to other projects, the future of software architec-
ture finally caught up with me. That’s when I read the book The Art of Scalability:
Scalable Web Architecture, Processes, and Organizations for the Modern Enterprise (Addison-
Wesley Professional, 2009) by Michael T. Fisher and Martin L. Abbott. A key idea in
that book is the scale cube, which, as described in chapter 2, is a three-dimensional
model for scaling an application. The Y-axis scaling defined by the scale cube func-
tionally decomposes an application into services. In hindsight, this was quite obvious,
but for me at the time, it was an a-ha moment! I could have solved the challenges I was
facing two years earlier by architecting Cloud Foundry as a set of services!
 In April 2012, I gave my first talk on this architectural approach, called “Decom-
posing Applications of Deployability and Scalability” (www.slideshare.net/chris.e
.richardson/decomposing-applications-for-scalability-and-deployability-april-2012). At
the time, there wasn’t a generally accepted term for this kind of architecture. I some-
times called it modular, polyglot architecture, because the services could be written in
different languages.
 But in another example of how the future is unevenly distributed, the term micro-
service was used at a software architecture workshop in 2011 to describe this kind of
architecture (https://en.wikipedia.org/wiki/Microservices). I first encountered the
term when I heard Fred George give a talk at Oredev 2013, and I liked it!
 In January 2014, I created the https://microservices.io website to document archi-
tecture and design patterns that I had encountered. Then in March 2014, James Lewis
and Martin Fowler published a blog post about microservices (https://martinfowler
.com/articles/microservices.html). By popularizing the term microservices, the blog
post caused the software community to consolidate around the concept.
 The idea of small, loosely coupled teams, rapidly and reliably developing and deliv-
ering microservices is slowly diffusing through the software community. But it’s likely
that this vision of the future is quite different from your daily reality. Today, business-
critical enterprise applications are typically large monoliths developed by large teams.
Software releases occur infrequently and are often painful for everyone involved. IT
often struggles to keep up with the needs of the business. You’re wondering how on
earth you can adopt the microservice architecture.
 
