56
CHAPTER 2
Decomposition strategies
2.2.4
Decomposition guidelines
So far in this chapter, we’ve looked at the main ways to define a microservice architec-
ture. We can also adapt and use a couple of principles from object-oriented design
when applying the microservice architecture pattern. These principles were created
by Robert C. Martin and described in his classic book Designing Object Oriented C++
Applications Using The Booch Method (Prentice Hall, 1995). The first principle is the Sin-
gle Responsibility Principle (SRP), for defining the responsibilities of a class. The sec-
ond principle is the Common Closure Principle (CCP), for organizing classes into
packages. Let’s take a look at these principles and see how they can be applied to the
microservice architecture.
SINGLE RESPONSIBILITY PRINCIPLE
One of the main goals of software architecture and design is determining the respon-
sibilities of each software element. The Single Responsibility Principle is as follows:
A class should have only one reason to change.
                                                                      
Robert C. Martin
Each responsibility that a class has is a potential reason for that class to change. If a
class has multiple responsibilities that change independently, the class won’t be stable.
By following the SRP, you define classes that each have a single responsibility and
hence a single reason for change.
 We can apply SRP when defining a microservice architecture and create small,
cohesive services that each have a single responsibility. This will reduce the size of the
services and increase their stability. The new FTGO architecture is an example of SRP
in action. Each aspect of getting food to a consumer—order taking, order prepara-
tion, and delivery—is the responsibility of a separate service. 
COMMON CLOSURE PRINCIPLE
The other useful principle is the Common Closure Principle:
The classes in a package should be closed together against the same kinds of changes. A
change that affects a package affects all the classes in that package.
Robert C. Martin
The idea is that if two classes change in lockstep because of the same underlying rea-
son, then they belong in the same package. Perhaps, for example, those classes imple-
ment a different aspect of a particular business rule. The goal is that when that
business rule changes, developers only need to change code in a small number of
packages (ideally only one). Adhering to the CCP significantly improves the maintain-
ability of an application.
 We can apply CCP when creating a microservice architecture and package compo-
nents that change for the same reason into the same service. Doing this will minimize
 
