64
CHAPTER 2
Decomposition strategies
data scattered across multiple services, a saga is also a way to implement a self-contained
service. For example, I describe how the createOrder() operation is implemented
using a saga, which invokes services such as the Consumer Service, Kitchen Service,
and Accounting Service using asynchronous messaging.
 Chapter 8 describes the concept of an API gateway, which exposes an API to exter-
nal clients. An API gateway might implement a query operation using the API compo-
sition pattern, described in chapter 7, rather than simply route it to the service. Logic
in the API gateway gathers the data needed by the query by calling multiple services
and combining the results. In this situation, the system operation is assigned to the
API gateway rather than a service. The services need to implement the query opera-
tions needed by the API gateway. 
Summary
Architecture determines your application’s -ilities, including maintainability,
testability, and deployability, which directly impact development velocity.
The microservice architecture is an architecture style that gives an application
high maintainability, testability, and deployability.
Services in a microservice architecture are organized around business concerns—
business capabilities or subdomains—rather than technical concerns.
There are two patterns for decomposition:
– Decompose by business capability, which has its origins in business archi-
tecture
– Decompose by subdomain, based on concepts from domain-driven design
You can eliminate god classes, which cause tangled dependencies that prevent
decomposition, by applying DDD and defining a separate domain model for
each service. 
 
