14
CHAPTER 1
Escaping monolithic hell
SOA and the microservice architecture usually use different technology stacks. SOA
applications typically use heavyweight technologies such as SOAP and other WS* stan-
dards. They often use an ESB, a smart pipe that contains business and message-processing
logic to integrate the services. Applications built using the microservice architecture
tend to use lightweight, open source technologies. The services communicate via dumb
pipes, such as message brokers or lightweight protocols like REST or gRPC.
 SOA and the microservice architecture also differ in how they treat data. SOA
applications typically have a global data model and share databases. In contrast, as
mentioned earlier, in the microservice architecture each service has its own database.
Moreover, as described in chapter 2, each service is usually considered to have its own
domain model.
 Another key difference between SOA and the microservice architecture is the size
of the services. SOA is typically used to integrate large, complex, monolithic applica-
tions. Although services in a microservice architecture aren’t always tiny, they’re
almost always much smaller. As a result, a SOA application usually consists of a few
large services, whereas a microservices-based application typically consists of dozens or
hundreds of smaller services. 
1.5
Benefits and drawbacks of the microservice 
architecture
Let’s first consider the benefits and then we’ll look at the drawbacks.
1.5.1
Benefits of the microservice architecture
The microservice architecture has the following benefits:
It enables the continuous delivery and deployment of large, complex applications.
Services are small and easily maintained.
Services are independently deployable.
Services are independently scalable.
The microservice architecture enables teams to be autonomous.
It allows easy experimenting and adoption of new technologies.
It has better fault isolation.
Table 1.1
Comparing SOA with microservices
SOA
Microservices
Inter-service 
communication
Smart pipes, such as Enterprise Ser-
vice Bus, using heavyweight protocols, 
such as SOAP and the other WS* 
standards.
Dumb pipes, such as a message 
broker, or direct service-to-service 
communication, using lightweight 
protocols such as REST or gRPC
Data
Global data model and shared data-
bases
Data model and database per service
Typical service
Larger monolithic application
Smaller service
 
