18
CHAPTER 1
Escaping monolithic hell
 IDEs and other development tools are focused on building monolithic applica-
tions and don’t provide explicit support for developing distributed applications. Writ-
ing automated tests that involve multiple services is challenging. These are all issues
that are specific to the microservice architecture. Consequently, your organization’s
developers must have sophisticated software development and delivery skills in order
to successfully use microservices.
 The microservice architecture also introduces significant operational complexity.
Many more moving parts—multiple instances of different types of service—must be
managed in production. To successfully deploy microservices, you need a high level of
automation. You must use technologies such as the following:
Automated deployment tooling, like Netflix Spinnaker
An off-the-shelf PaaS, like Pivotal Cloud Foundry or Red Hat OpenShift
A Docker orchestration platform, like Docker Swarm or Kubernetes
I describe the deployment options in more detail in chapter 12. 
DEPLOYING FEATURES SPANNING MULTIPLE SERVICES NEEDS CAREFUL COORDINATION
Another challenge with using the microservice architecture is that deploying features
that span multiple services requires careful coordination between the various develop-
ment teams. You have to create a rollout plan that orders service deployments based
on the dependencies between services. That’s quite different than a monolithic archi-
tecture, where you can easily deploy updates to multiple components atomically. 
DECIDING WHEN TO ADOPT IS DIFFICULT
Another issue with using the microservice architecture is deciding at what point during
the lifecycle of the application you should use this architecture. When developing the
first version of an application, you often don’t have the problems that this architec-
ture solves. Moreover, using an elaborate, distributed architecture will slow down
development. That can be a major dilemma for startups, where the biggest problem is
usually how to rapidly evolve the business model and accompanying application.
Using the microservice architecture makes it much more difficult to iterate rapidly. A
startup should almost certainly begin with a monolithic application.
 Later on, though, when the problem is how to handle complexity, that’s when it
makes sense to functionally decompose the application into a set of microservices.
You may find refactoring difficult because of tangled dependencies. Chapter 13 goes
over strategies for refactoring a monolithic application into microservices.
 As you can see, the microservice architecture offer many benefits, but also has some
significant drawbacks. Because of these issues, adopting a microservice architecture
should not be undertaken lightly. But for complex applications, such as a consumer-
facing web application or SaaS application, it’s usually the right choice. Well-known
sites like eBay (www.slideshare.net/RandyShoup/the-ebay-architecture-striking-a-
balance-between-site-stability-feature-velocity-performance-and-cost), Amazon.com,
Groupon, and Gilt have all evolved from a monolithic architecture to a microservice
architecture.
 
