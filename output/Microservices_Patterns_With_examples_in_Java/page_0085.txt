55
Defining an application’s microservice architecture
 DDD calls the scope of a domain model a bounded context. A bounded context
includes the code artifacts that implement the model. When using the microservice
architecture, each bounded context is a service or possibly a set of services. We can
create a microservice architecture by applying DDD and defining a service for each
subdomain. Figure 2.9 shows how the subdomains map to services, each with its own
domain model.
DDD and the microservice architecture are in almost perfect alignment. The DDD
concept of subdomains and bounded contexts maps nicely to services within a micro-
service architecture. Also, the microservice architecture’s concept of autonomous
teams owning services is completely aligned with the DDD’s concept of each domain
model being owned and developed by a single team. Even better, as I describe later in
this section, the concept of a subdomain with its own domain model is a great way to
eliminate god classes and thereby make decomposition easier.
 Decompose by subdomain and Decompose by business capability are the two main
patterns for defining an application’s microservice architecture. There are, however,
some useful guidelines for decomposition that have their roots in object-oriented
design. Let’s take a look at them. 
Accounting Service
Accounting
domain model
Kitchen Service
.... Service
Order taking
subdomain
Maps to
Maps to
Maps to
Maps to
Maps to
Kitchen
subdomain
Accounting
subdomain
Delivery
subdomain
....
subdomain
Kitchen
domain model
Delivery Service
Delivery
domain model
Order Service
FTGO domain
Order
domain model
Figure 2.9
From subdomains to services: each subdomain of the FTGO application domain 
is mapped to a service, which has its own domain model.
 
