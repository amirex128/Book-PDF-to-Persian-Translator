INDEX
476
business logic (continued)
generating 164–165
identifying 162–163
publishing 166–167
reasons to publish 160–161
domain model design 152–160
aggregates 154–160
problem with fuzzy boundaries 153–154
event sourcing 184–202
benefits of 199–200
drawbacks of 200–202
event publishing 194–195
evolving domain events 198–199
handling concurrent updates using optimis-
tic locking 193–194
idempotent message processing 197
overview of 186–193
snapshots, improving performance with
195–196
traditional persistence 185–186
event store implementation 202–209
Eventuate client framework for Java 205–209
Eventuate Local event store 203–205
Kitchen Service business logic 168–173
Order Service business logic 173–182
Order aggregate 175–180
OrderService class 180–182
organization patterns 147–152
Domain model pattern 150–151
domain-driven design 151–152
Transaction script pattern 149–150
sagas and event sourcing together 209–218
creating orchestration-based saga 211–212
implementing choreography-based sagas 
using event sourcing 210
implementing event sourcing-based saga 
participant 213–216
implementing saga orchestrators using event 
sourcing 216–218
Business logic design patterns
Aggregate 147, 152–160
Domain event 160
Domain model 150–151
Event sourcing 184
Transaction script 149–150
business logic layer 38, 436
by value countermeasure 131–132
C
caching 262, 288
cancel() operation 177
cancelOrder() method 460
CAP theorem 113
CCP (Common Closure Principle) 56
centralized sessions 354
change failure rate 31
choreography 111
choreography-based sagas 118–121
benefits and drawbacks of 121
implementing Create Order saga 118–119
implementing using event sourcing 210
reliable event-based communication 120–121
CI (Continuous Integration) 6, 306, 357
Circuit breaker pattern 77–80
developing robust RPI proxies 79
recovering from unavailable services 79–80
Client concept 358
Client-side discovery pattern 82–83
command message 86
Command query responsibility segregation. See 
CQRS pattern
command/reply-based messaging 102–103
commands 41
commit tests stage 306
committed records 130
Common Closure Principle (CCP) 56–57
communication
flexible 93
secure interprocess 350
communication patterns 23–25
commutative update countermeasure 130
compensatable transactions 116, 128, 450
compensating transaction 450
compile-time tests 297
component tests 306, 339–340
for FTGO Order Service
OrderServiceComponentTestStepDefinitions 
class 341–344
running 344–345
writing 340–345
in-process component tests 339
out-of-process component tests 339–340
condition expression 248
Conduit 381
ConfigMap 402
configurable services 360–364
pull-based externalized configuration 363–364
push-based externalized configuration 362–363
@ConfigurationProperties class 276
consumer contract testing 301–303
for asynchronous request/response 
interaction 332–335
for messaging APIs 305
for publish/subscribe-style interactions
328–330
for REST-based request/response style 
interactions 324–326
consumer group 94
consumer-driven contract test 28, 302
 
