53
Defining an application’s microservice architecture
Later on, it may make sense to separate payments (of Restaurants and Couriers) and
billing (of Consumers).
 A key benefit of organizing services around capabilities is that because they’re sta-
ble, the resulting architecture will also be relatively stable. The individual components
of the architecture may evolve as the how aspect of the business changes, but the archi-
tecture remains unchanged.
 Having said that, it’s important to remember that the services shown in figure 2.8
are merely the first attempt at defining the architecture. They may evolve over time as
we learn more about the application domain. In particular, an important step in the
architecture definition process is investigating how the services collaborate in each of
the key architectural services. You might, for example, discover that a particular
decomposition is inefficient due to excessive interprocess communication and that
you must combine services. Conversely, a service might grow in complexity to the
Courier Service
Courier management
Consumer management
Supplier management
Capability hierarchy
Services
Couriers and restaurants
are very different
kinds of suppliers
=> different services.
Three different services
handling different
phases of the order
taking and fulﬁllment
Treat payments and
billing the same for now.
Restaurant Service
Restaurant information
management
Order Service
Order management
Order taking and fulﬁllment
Accounting
Kitchen Service
Restaurant order
ticket management
Consumer Service
Delivery Service
Consumer accounting
Restaurant accounting
Courier accounting
Accounting Service
Logistics
Delivery management
Courier availability
management
Figure 2.8
Mapping FTGO business capabilities to services. Capabilities at various levels of the 
capability hierarchy are mapped to services.
 
