34
CHAPTER 2
Decomposition strategies
therefore, the definition of the services. As they stood around the whiteboard, the
FTGO team wondered exactly how to do that!
 In this chapter, you’ll learn how to define a microservice architecture for an appli-
cation. I describe strategies for decomposing an application into services. You’ll learn
that services are organized around business concerns rather than technical concerns.
I also show how to use ideas from domain-driven design (DDD) to eliminate god
classes, which are classes that are used throughout an application and cause tangled
dependencies that prevent decomposition.
 I begin this chapter by defining the microservice architecture in terms of software
architecture concepts. After that, I describe a process for defining a microservice
architecture for an application starting from its requirements. I discuss strategies for
decomposing an application into a collection of services, obstacles to it, and how to
overcome them. Let’s start by examining the concept of software architecture.
2.1
What is the microservice architecture exactly?
Chapter 1 describes how the key idea of the microservice architecture is functional
decomposition. Instead of developing one large application, you structure the appli-
cation as a set of services. On one hand, describing the microservice architecture as a
kind of functional decomposition is useful. But on the other hand, it leaves several
questions unanswered, including how does the microservice architecture relate to the
broader concepts of software architecture? What’s a service? And how important is the
size of a service?
 In order to answer those questions, we need to take a step back and look at what is
meant by software architecture. The architecture of a software application is its high-level
structure, which consists of constituent parts and the dependencies between those
parts. As you’ll see in this section, an application’s architecture is multidimensional, so
there are multiple ways to describe it. The reason architecture is important is because
it determines the application’s software quality attributes or -ilities. Traditionally, the
goal of architecture has been scalability, reliability, and security. But today it’s import-
ant that the architecture also enables the rapid and safe delivery of software. You’ll
learn that the microservice architecture is an architecture style that gives an applica-
tion high maintainability, testability, and deployability.
 I begin this section by describing the concept of software architecture and why it’s
important. Next, I discuss the idea of an architectural style. Then I define the micro-
service architecture as a particular architectural style. Let’s start by looking at the con-
cept of software architecture.
2.1.1
What is software architecture and why does it matter?
Architecture is clearly important. There are at least two conferences dedicated to the
topic: O’Reilly Software Architecture Conference (https://conferences.oreilly.com/
software-architecture) and the SATURN conference (https://resources.sei.cmu.edu/
news-events/events/saturn/). Many developers have the goal of becoming an archi-
tect. But what is architecture and why does it matter?
 
