31
Beyond microservices: Process and organization
that practice continuous deployment deploy multiple times per day into produc-
tion, have far fewer production outages, and recover quickly from any that do occur
(https://puppet.com/ resources/whitepaper/state-of-devops-report). As described ear-
lier in section 1.5.1, the microservice architecture directly supports continuous
delivery/deployment.
1.7.3
The human side of adopting microservices
Adopting the microservice architecture changes your architecture, your organization,
and your development processes. Ultimately, though, it changes the working environ-
ment of people, who are, as mentioned earlier, emotional creatures. If ignored, their
emotions can make the adoption of microservices a bumpy ride. Mary and the other
FTGO leaders will struggle to change how FTGO develops software.
 The best-selling book Managing Transitions (Da Capo Lifelong Books, 2017,
https://wmbridges.com/books) by William and Susan Bridges introduces the con-
cept of a transition, which refers to the process of how people respond emotionally to a
change. It describes a three-stage Transition Model:
1
Ending, Losing, and Letting Go—The period of emotional upheaval and resis-
tance when people are presented with a change that forces them out of their
comfort zone. They often mourn the loss of the old way of doing things. For
example, when people reorganize into cross-functional teams, they miss their
former teammates. Similarly, a data modeling group that owns the global data
model will be threatened by the idea of each service having its own data
model.
Move fast without breaking things
The goal of continuous delivery/deployment (and, more generally, DevOps) is to rap-
idly yet reliably deliver software. Four useful metrics for assessing software develop-
ment are as follows:
Deployment frequency—How often software is deployed into production
Lead time—Time from a developer checking in a change to that change being
deployed
Mean time to recover—Time to recover from a production problem
Change failure rate—Percentage of changes that result in a production problem
In a traditional organization, the deployment frequency is low, and the lead time is
high. Stressed-out developers and operations people typically stay up late into the
night fixing last-minute issues during the maintenance window. In contrast, a DevOps
organization releases software frequently, often multiple times per day, with far fewer
production issues. Amazon, for example, deployed changes into production every
11.6 seconds in 2014 (www.youtube.com/watch?v=dxk8b9rSKOo), and Netflix had
a lead time of 16 minutes for one software component (https://medium.com/netflix-
techblog/how-we-build-code-at-netflix-c5d9bd727f15). 
 
