INDEX
487
RequestHandler interface 417
reread value countermeasure 131
Resource Server concept 358
REST 73–76
benefits and drawbacks of 75–76
fetching multiple resources in single 
request 74–75
mapping operations to HTTP verbs 75
REST maturity model 74
specifying REST APIs 74
Rest Assured Mock MVC 314
Restaurant domain events 458–459
Restaurant Service
creating services 404–405
deploying 402–405
design of 419–423
AbstractAutowiringHttpRequestHandler 
class 423
AbstractHttpHandler class 423
FindRestaurantRequestHandler class
421–422
REST-based request/response style interactions, 
integration tests for 322–326
example contract 324
tests for API gateway OrderServiceProxy
325–326
tests for Order Service 324–325
RESTful services 419–426
deploying lambda functions using Serverless 
framework 425–426
design of Restaurant Service 419–423
packaging service as ZIP file 424
retriable transactions 117, 129, 450
revise() method 179
S
Saas (Software-as-a-Service) 5
saga orchestration package 140
Saga pattern 26
SagaOrchestratorCreated event 216
SagaOrchestratorUpdated event 216
SagaReplyRequested pseudo event 213
sagas 17, 58, 106, 110–145, 209–218, 450
coordinating 117–125
choreography-based sagas 118–121
orchestration-based sagas 121–125
Create Order saga 135–142
CreateOrderSaga orchestrator 136–138
CreateOrderSagaState class 138
Eventuate Tram Saga framework 140–142
KitchenServiceProxy class 139
creating orchestration-based saga 211–212
with a NoSQL-based event store 211–212
with RDBMS-based event store 211
implementing choreography-based sagas using 
event sourcing 210
implementing event sourcing-based saga 
participant 213–216
implementing saga orchestrators using event 
sourcing 216–218
persisting using event sourcing 216
processing replies exactly once 218
sending command messages reliably
216–218
lack of isolation 126–132
anomalies caused by 127
countermeasures for handling 128–132
Order Service
OrderCommandHandlers class 142–143
OrderService class 133–134
OrderServiceConfiguration class 143–145
transaction management 111–117
maintaining data consistency 114–117
need for distributed transactions 112
trouble with distributed transactions 112–114
unit tests for 310–312
SATURN conference 34
save() method 207
scalability 430
scale cube 8–11
X-axis scaling 9
Y-axis scaling 10–11
Z-axis scaling 9–10
secure services 349–360
authentication in API gateway 354–355
authorization 356
in traditional monolithic application 350–353
using JWTs to pass user identity and roles
356–357
using OAuth 2.0 357–360
security patterns 28–29
Access token 28, 38, 354
SELECT statements 188
Self registration pattern 82
semantic lock 450
semantic lock countermeasure 129–130
sending port interface 86
Serverless deployment with lambda 415–419
benefits of lambda functions 418
developing lambda functions 417
drawbacks of lambda functions 419
invoking lambda functions 417–418
defining scheduled lambda functions
418
handling events generated by AWS 
services 418
handling HTTP requests 417
using web service request 418
overview of 416
 
