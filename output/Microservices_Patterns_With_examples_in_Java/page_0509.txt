INDEX
479
domain model (continued)
Delivery Service 463–464
deciding which data to migrate 464
design of domain logic 464
identifying which entities and fields are part 
of delivery management 463
problem with fuzzy boundaries 153–154
splitting 439–440
domain services
KitchenService 171–172
unit tests for 312–313
domain-driven design (DDD) 24, 34
DSL (domain-specific language) 303
DTP (Distributed Transaction Processing)
112
dumb pipes 14
duplicate messages 95–97
tracking messages and discarding 
duplicates 96–97
writing idempotent message handlers 96
DynamoDB streams 100
E
edge functions 271
Elastic Beanstalk 391
Elasticsearch 370
@EnableGateway annotation 279
end-to-end tests 345–346
designing 345
running 346
writing 346
Enterprise Service Bus (ESB) 264
entities, unit tests for 309–310
Entity object, DDD 151
enums 283
ESB (Enterprise Service Bus) 264
event. See Domain events
event handlers
events generated by AWS services 418
idempotent 240–241
unit tests for 315–317
event message 86
event publishing 194–195
Asynchronous messaging pattern 89–90, 
98–100, 102
domain events 160–168
consuming 167–168
defined 161
event enrichment 161–162
generating and publishing 164–167
identifying 162–163
reasons for 160–161
event sourcing 194–195, 199
traditional persistence and 186
using polling 194–195
using transaction log tailing 195
event sourcing 184–202
audit logging 378
benefits of 199–200
avoids O/R impedance mismatch 
problem 200
preserves aggregate history 199–200
reliable domain event publishing 199
time machine for developers 200
concurrent updates and optimistic locking
193–194
drawbacks of 200–202
complexity 200
deleting data 201
evolving events 201
learning curve 200
querying event store 202
event publishing 194–195
using polling 194–195
using transaction log tailing 195
evolving domain events 198–199
event schema evolution 198–199
managing schema changes through 
upcasting 199
idempotent message processing 197
with NoSQL-based event store 197
with RDBMS-based event store 197
overview of 186–193
aggregate methods required to generate 
events 189–191
event sourcing-based Order aggregate 191–193
events representing state changes 188
persisting aggregates using events 186–188
sagas and 209–218
creating orchestration-based saga 211–212
implementing choreography-based sagas 
using event sourcing 210
implementing event sourcing-based saga 
participant 213–216
implementing saga orchestrators using event 
sourcing 216–218
snapshots and performance improvement
195–196
trouble with traditional persistence 185–186
audit logging 186
event publishing bolted to business logic 186
lack of aggregate history 186
Object-Relational impedance mismatch
185–186
Event Store 202
event store implementation 202–209
Eventuate client framework for Java 205–209
AggregateRepository class 207–208
defining aggregate commands 207
 
