293
write automated tests as part of development. It improves their productivity
because, for example, they’ll have tests that provide immediate feedback while
editing code.
In this regard, FTGO is a fairly typical organization. The Sauce Labs Testing Trends in
2018 report paints a fairly gloomy picture of the state of test automation (https://
saucelabs.com/resources/white-papers/testing-trends-for-2018). It describes how only
26% of organizations are mostly automated, and a minuscule 3% are fully automated!
 The reliance on manual testing isn’t because of a lack of tooling and frameworks.
For example, JUnit, a popular Java testing framework, was first released in 1998. The
reason for the lack of automated tests is mostly cultural: “Testing is QA’s job,” “It’s not
the best use of a developers’s time,” and so on. It also doesn’t help that developing a
fast-running, yet effective, maintainable test suite is challenging. And, a typical large,
monolithic application is extremely difficult to test.
 One key motivation for using the microservice architecture is, as described in
chapter 2, improving testability. Yet at the same time, the complexity of the microser-
vice architecture demands that you write automated tests. Furthermore, some aspects
of testing microservices are challenging. That’s because we need to verify that services
can interact correctly while minimizing the number of slow, complex, and unreliable
end-to-end-tests that launch many services.
 This chapter is the first of two chapters on testing. It’s an introduction to testing.
Chapter 10 covers more advanced testing concepts. The two chapters are long, but
together they cover testing ideas and techniques that are essential to modern software
development in general, and to the microservice architecture in particular.
 I begin this chapter by describing effective testing strategies for a microservices-
based application. These strategies enable you to be confident that your software
works, while minimizing test complexity and execution time. After that, I describe
how to write one particular kind of test for your services: unit tests. Chapter 10 covers
the other kinds of tests: integration, component, and end-to-end.
 Let’s start by taking a look at testing strategies for microservices.
Why an introduction to testing?
You may be wondering why this chapter includes an introduction to basic testing con-
cepts. If you’re already familiar with concepts such as the test pyramid and the different
types of tests, feel free to speed-read this chapter and move onto the next one, which
focuses on microservices-specific testing topics. But based on my experiences consult-
ing for and training clients all over the world, a fundamental weakness of many software
development organizations is the lack of automated testing. That’s because if you want
to deliver software quickly and reliably, it’s absolutely essential to do automated testing.
It’s the only way to have a short lead time, which is the time it takes to get committed
code into production. Perhaps even more importantly, automated testing is essential
because it forces you to develop a testable application. It’s typically very difficult to
introduce automating testing into an already large, complex application. In other words,
the fast track to monolithic hell is to not write automated tests.
 
