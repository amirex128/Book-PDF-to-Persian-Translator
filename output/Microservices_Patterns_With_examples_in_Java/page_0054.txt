24
CHAPTER 1
Escaping monolithic hell
in this chapter. The rest of the pattern language consists of groups of patterns that are
solutions to issues that are introduced by using the Microservice architecture pattern.
 The patterns are also divided into three layers:
Infrastructure patterns—These solve problems that are mostly infrastructure issues
outside of development.
Application infrastructure —These are for infrastructure issues that also impact
development.
Application patterns—These solve problems faced by developers.
These patterns are grouped together based on the kind of problem they solve. Let’s
look at the main groups of patterns.
PATTERNS FOR DECOMPOSING AN APPLICATION INTO SERVICES
Deciding how to decompose a system into a set of services is very much an art, but
there are a number of strategies that can help. The two decomposition patterns
shown in figure 1.11 are different strategies you can use to define your application’s
architecture.
Chapter 2 describes these patterns in detail. 
COMMUNICATION PATTERNS
An application built using the microservice architecture is a distributed system. Conse-
quently, interprocess communication (IPC) is an important part of the microservice
architecture. You must make a variety of architectural and design decisions about how
your services communicate with one another and the outside world. Figure 1.12 shows
the communication patterns, which are organized into five groups:
Communication style—What kind of IPC mechanism should you use?
Discovery—How does a client of a service determine the IP address of a service
instance so that, for example, it makes an HTTP request?
Reliability—How can you ensure that communication between services is reli-
able even though services can be unavailable?
Transactional messaging—How should you integrate the sending of messages and
publishing of events with database transactions that update business data?
External API—How do clients of your application communicate with the services?
Decompose by
business capability
Decompose by
subdomain
General
Alternative A
Predecessor
Speciﬁc
Alternative B
Successor
Key
Problem area
Figure 1.11
There are two 
decomposition patterns: Decompose 
by business capability, which organizes 
services around business capabilities, 
and Decompose by subdomain, which 
organizes services around domain-
driven design (DDD) subdomains.
 
