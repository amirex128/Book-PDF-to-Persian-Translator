8
CHAPTER 1
Escaping monolithic hell
You’ll also be able to do the following:
Architect an application using the microservice architecture pattern
Develop the business logic for a service
Use sagas to maintain data consistency across services
Implement queries that span services
Effectively test microservices
Develop production-ready services that are secure, configurable, and observable
Refactor an existing monolithic application to services
1.4
Microservice architecture to the rescue
Mary has come to the conclusion that FTGO must migrate to the microservice
architecture.
 Interestingly, software architecture has very little to do with functional require-
ments. You can implement a set of use cases—an application’s functional require-
ments—with any architecture. In fact, it’s common for successful applications, such as
the FTGO application, to be big balls of mud.
 Architecture matters, however, because of how it affects the so-called quality of ser-
vice requirements, also called nonfunctional requirements, quality attributes, or ilities. As
the FTGO application has grown, various quality attributes have suffered, most nota-
bly those that impact the velocity of software delivery: maintainability, extensibility,
and testability.
 On the one hand, a disciplined team can slow down the pace of its descent toward
monolithic hell. Team members can work hard to maintain the modularity of their
application. They can write comprehensive automated tests. On the other hand, they
can’t avoid the issues of a large team working on a single monolithic application. Nor
can they solve the problem of an increasingly obsolete technology stack. The best a
team can do is delay the inevitable. To escape monolithic hell, they must migrate to a
new architecture: the Microservice architecture.
 Today, the growing consensus is that if you’re building a large, complex applica-
tion, you should consider using the microservice architecture. But what are micro-
services exactly? Unfortunately, the name doesn’t help because it overemphasizes size.
There are numerous definitions of the microservice architecture. Some take the name
too literally and claim that a service should be tiny—for example, 100 LOC. Others
claim that a service should only take two weeks to develop. Adrian Cockcroft, formerly
of Netflix, defines a microservice architecture as a service-oriented architecture com-
posed of loosely coupled elements that have bounded contexts. That’s not a bad defi-
nition, but it is a little dense. Let’s see if we can do better.
1.4.1
Scale cube and microservices
My definition of the microservice architecture is inspired by Martin Abbott and
Michael Fisher’s excellent book, The Art of Scalability (Addison-Wesley, 2015). This
 
