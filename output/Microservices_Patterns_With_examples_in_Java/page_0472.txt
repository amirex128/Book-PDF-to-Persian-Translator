442
CHAPTER 13
Refactoring to microservices
make that change in the monolith. If that code is subsequently extracted into a ser-
vice, then the service can access Delivery Service.
WHAT SERVICES TO EXTRACT AND WHEN
As I mentioned, breaking apart the monolith is time consuming. It diverts effort away
from implementing features. As a result, you must carefully decide the sequence in
which you extract services. You need to focus on extracting services that give the larg-
est benefit. What’s more, you want to continually demonstrate to the business that
there’s value in migrating to a microservice architecture.
 On any journey, it’s essential to know where you’re going. A good way to start the
migration to microservices is with a time-boxed architecture definition effort. You
should spend a short amount of time, such as a couple of weeks, brainstorming your
ideal architecture and defining a set of services. This gives you a destination to aim
for. It’s important, though, to remember that this architecture isn’t set in stone. As
you break apart the monolith and gain experience, you should revise the architecture
to take into account what you’ve learned.
 Once you’ve determined the approximate destination, the next step is to start
breaking apart the monolith. There are a couple of different strategies you can use to
determine the sequence in which you extract services.
 One strategy is to effectively freeze development of the monolith and extract ser-
vices on demand. Instead of implementing features or fixing bugs in the monolith,
you extract the necessary service or service(s) and change those. One benefit of this
approach is that it forces you to break up the monolith. One drawback is that the
extraction of services is driven by short-term requirements rather than long-term
needs. For instance, it requires you to extract services even if you’re making a small
change to a relatively stable part of the system. As a result, you risk doing a lot of work
for minimal benefit.
 An alternative strategy is a more planned approach, where you rank the modules
of an application by the benefit you anticipate getting from extracting them. There
are a few reasons why extracting a service is beneficial:
Accelerates development—If your application’s roadmap suggests that a particular
part of your application will undergo a lot of development over the next year,
then converting it to a service accelerates development.
Solves a performance, scaling, or reliability problem—If a particular part of your appli-
cation has a performance or scalability problem or is unreliable, then it’s valu-
able to convert it to a service.
Enables the extraction of some other services—Sometimes extracting one service sim-
plifies the extraction of another service, due to dependencies between modules.
You can use these criteria to add refactoring tasks to your application’s backlog,
ranked by expected benefit. The benefit of this approach is that it’s more strategic
and much more closely aligned with the needs of the business. During sprint plan-
ning, you decide whether it’s more valuable to implement features or extract services. 
 
