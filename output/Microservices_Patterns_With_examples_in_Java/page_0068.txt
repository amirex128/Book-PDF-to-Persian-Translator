38
CHAPTER 2
Decomposition strategies
 You can apply the layered architecture to any of the four views discussed earlier.
The popular three-tier architecture is the layered architecture applied to the logical
view. It organizes the application’s classes into the following tiers or layers:
Presentation layer—Contains code that implements the user interface or exter-
nal APIs
Business logic layer—Contains the business logic
Persistence layer—Implements the logic of interacting with the database
The layered architecture is a great example of an architectural style, but it does have
some significant drawbacks:
Single presentation layer—It doesn’t represent the fact that an application is likely
to be invoked by more than just a single system.
Single persistence layer—It doesn’t represent the fact that an application is likely
to interact with more than just a single database.
Defines the business logic layer as depending on the persistence layer—In theory, this
dependency prevents you from testing the business logic without the database.
Also, the layered architecture misrepresents the dependencies in a well-designed
application. The business logic typically defines an interface or a repository of inter-
faces that define data access methods. The persistence tier defines DAO classes that
implement the repository interfaces. In other words, the dependencies are the reverse
of what’s depicted by a layered architecture.
 Let’s look at an alternative architecture that overcomes these drawbacks: the hex-
agonal architecture. 
ABOUT THE HEXAGONAL ARCHITECTURE STYLE
Hexagonal architecture is an alternative to the layered architectural style. As figure 2.2
shows, the hexagonal architecture style organizes the logical view in a way that places
the business logic at the center. Instead of the presentation layer, the application has
one or more inbound adapters that handle requests from the outside by invoking the
business logic. Similarly, instead of a data persistence tier, the application has one or
more outbound adapters that are invoked by the business logic and invoke external
applications. A key characteristic and benefit of this architecture is that the business
logic doesn’t depend on the adapters. Instead, they depend upon it.
 The business logic has one or more ports. A port defines a set of operations and is
how the business logic interacts with what’s outside of it. In Java, for example, a port is
often a Java interface. There are two kinds of ports: inbound and outbound ports. An
inbound port is an API exposed by the business logic, which enables it to be invoked
by external applications. An example of an inbound port is a service interface, which
defines a service’s public methods. An outbound port is how the business logic invokes
external systems. An example of an output port is a repository interface, which defines a
collection of data access operations.
 
