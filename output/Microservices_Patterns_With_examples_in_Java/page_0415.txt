385
But machines were still treated as beloved pets, and deployment was still a fundamen-
tally manual process.
 Today, the deployment process is radically different. Instead of handing off code to
a separate production team, the adoption of DevOps means that the development
team is also responsible for deploying their application or services. In some organiza-
tions, operations provides developers with a console for deploying their code. Or, bet-
ter yet, once the tests pass, the deployment pipeline automatically deploys the code
into production.
 The computing resources used in a production environment have also changed rad-
ically with physical machines being abstracted away. Virtual machines running on a
highly automated cloud, such as AWS, have replaced the long-lived, pet-like physical and
virtual machines. Today’s virtual machines are immutable. They’re treated as disposable
cattle instead of pets and are discarded and recreated rather than being reconfigured.
Containers, an even more lightweight abstraction layer of top of virtual machines, are an
increasingly popular way of deploying applications. You can also use an even more light-
weight serverless deployment platform, such as AWS Lambda, for many use cases.
 It’s no coincidence that the evolution of deployment processes and architectures has
coincided with the growing adoption of the microservice architecture. An application
might have tens or hundreds of services written in a variety of languages and frame-
works. Because each service is a small application, that means you have tens or hundreds
of applications in production. It’s no longer practical, for example, for system adminis-
trators to hand configure servers and services. If you want to deploy microservices at
scale, you need a highly automated deployment process and infrastructure.
 Figure 12.2 shows a high-level view of a production environment. The production
environment enables developers to configure and manage their services, the deployment
Service
A
Consumes
services
Service
C
Service
B
Service
D
User
Observe and
troubleshoot
services
Update
services
Conﬁgure
and manage
services
Developer
Routing
Dash-
boards
Monitoring
Service
management
interface
Runtime
Service
management
Alerting
Deployment
pipeline
Figure 12.2
A simplified view of the production environment. It provides four main capabilities: 
service management enables developers to deploy and manage their services, runtime management 
ensures that the services are running, monitoring visualizes service behavior and generates alerts, 
and request routing routes requests from users to the services.
 
