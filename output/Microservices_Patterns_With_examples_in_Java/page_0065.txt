35
What is the microservice architecture exactly?
 To answer that question, I first define what is meant by the term software architecture.
After that, I discuss how an application’s architecture is multidimensional and is best
described using a collection of views or blueprints. I then describe that software archi-
tecture matters because of its impact on the application’s software quality attributes.
A DEFINITION OF SOFTWARE ARCHITECTURE
There are numerous definitions of software architecture. For example, see https://
en.wikiquote.org/wiki/Software_architecture to read some of them. My favorite defi-
nition comes from Len Bass and colleagues at the Software Engineering Institute
(www.sei.cmu.edu), who played a key role in establishing software architecture as a
discipline. They define software architecture as follows:
The software architecture of a computing system is the set of structures needed to reason about
the system, which comprise software elements, relations among them, and properties of both.
Documenting Software Architectures by Bass et al.
That’s obviously a quite abstract definition. But its essence is that an application’s
architecture is its decomposition into parts (the elements) and the relationships (the
relations) between those parts. Decomposition is important for a couple of reasons:
It facilitates the division of labor and knowledge. It enables multiple people (or
multiple teams) with possibly specialized knowledge to work productively together
on an application.
It defines how the software elements interact.
It’s the decomposition into parts and the relationships between those parts that deter-
mine the application’s -ilities. 
THE 4+1 VIEW MODEL OF SOFTWARE ARCHITECTURE
More concretely, an application’s architecture can be viewed from multiple perspec-
tives, in the same way that a building’s architecture can be viewed from structural,
plumbing, electrical, and other perspectives. Phillip Krutchen wrote a classic paper
describing the 4+1 view model of software architecture, “Architectural Blueprints—
The ‘4+1’ View Model of Software Architecture” (www.cs.ubc.ca/~gregor/teaching/
papers/4+1view-architecture.pdf). The 4+1 model, shown in Figure 2.1, defines four
different views of a software architecture. Each describes a particular aspect of the
architecture and consists of a particular set of software elements and relationships
between them.
 The purpose of each view is as follows:
Logical view—The software elements that are created by developers. In object-
oriented languages, these elements are classes and packages. The relations
between them are the relationships between classes and packages, including
inheritance, associations, and depends-on.
Implementation view—The output of the build system. This view consists of mod-
ules, which represent packaged code, and components, which are executable
 
