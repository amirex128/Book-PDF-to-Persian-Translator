392
CHAPTER 12
Deploying microservices
Let’s look at the benefits and drawbacks of using this approach.
12.2.1 The benefits of deploying services as VMs
The Service as a virtual machine pattern has a number of benefits:
The VM image encapsulates the technology stack.
Isolated service instances.
Uses mature cloud infrastructure.
Let’s look at each one.
THE VM IMAGE ENCAPSULATES THE TECHNOLOGY STACK
An important benefit of this pattern is that the VM image contains the service and all
of its dependencies. It eliminates the error-prone requirement to correctly install and
set up the software that a service needs in order to run. Once a service has been pack-
aged as a virtual machine, it becomes a black box that encapsulates your service’s tech-
nology stack. The VM image can be deployed anywhere without modification. The API
for deploying the service becomes the VM management API. Deployment becomes
much simpler and more reliable. 
SERVICE INSTANCES ARE ISOLATED
A major benefit of virtual machines is that each service instance runs in complete iso-
lation. That, after all, is one of the main goals of virtual machine technology. Each vir-
tual machine has a fixed amount of CPU and memory and can’t steal resources from
other services. 
USES MATURE CLOUD INFRASTRUCTURE
Another benefit of deploying your microservices as virtual machines is that you can
leverage mature, highly automated cloud infrastructure. Public clouds such as AWS
attempt to schedule VMs on physical machines in a way that avoids overloading the
machine. They also provide valuable features such as load balancing of traffic across
VMs and autoscaling. 
12.2.2 The drawbacks of deploying services as VMs
The Service as a VM pattern also has some drawbacks:
Less-efficient resource utilization
Relatively slow deployments
System administration overhead
Let’s look at each drawback in turn.
(continued)
Elastic Beanstalk can also deploy Docker containers. Each EC2 instance runs a col-
lection of one or more containers. Unlike a Docker orchestration framework, covered
later in the chapter, the unit of scaling is the EC2 instance rather than a container.
 
