CONTENTS
xii
5.4
Kitchen Service business logic
168
The Ticket aggregate
169
5.5
Order Service business logic
173
The Order Aggregate
175
■The OrderService class
180
6 
Developing business logic with event sourcing
183
6.1
Developing business logic using event sourcing
184
The trouble with traditional persistence
185
■Overview of event 
sourcing
186
■Handling concurrent updates using optimistic 
locking
193
■Event sourcing and publishing events
194
Using snapshots to improve performance
195
■Idempotent 
message processing
197
■Evolving domain events
198
Benefits of event sourcing
199
■Drawbacks of event 
sourcing
200
6.2
Implementing an event store
202
How the Eventuate Local event store works
203
■The Eventuate 
client framework for Java
205
6.3
Using sagas and event sourcing together
209
Implementing choreography-based sagas using event sourcing
210
Creating an orchestration-based saga
211
■Implementing an 
event sourcing-based saga participant
213
■Implementing saga 
orchestrators using event sourcing
216
7 
Implementing queries in a microservice architecture
220
7.1
Querying using the API composition pattern
221
The findOrder() query operation
221
■Overview of the API 
composition pattern
222
■Implementing the findOrder() query 
operation using the API composition pattern
224
■API 
composition design issues
225
■The benefits and drawbacks 
of the API composition pattern
227
7.2
Using the CQRS pattern
228
Motivations for using CQRS
229
■Overview of CQRS
232
The benefits of CQRS
235
■The drawbacks of CQRS
236
7.3
Designing CQRS views
236
Choosing a view datastore
237
■Data access module design
239
Adding and updating CQRS views
241
7.4
Implementing a CQRS view with AWS DynamoDB
242
The OrderHistoryEventHandlers module
243
Data modeling and query design with DynamoDB
244
The OrderHistoryDaoDynamoDb class
249
 
