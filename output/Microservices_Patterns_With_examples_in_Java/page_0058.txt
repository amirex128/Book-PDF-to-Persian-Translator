28
CHAPTER 1
Escaping monolithic hell
Distributed tracing—Assign each external request a unique ID and trace requests
as they flow between services.
Exception tracking—Report exceptions to an exception tracking service, which
deduplicates exceptions, alerts developers, and tracks the resolution of each
exception.
Application metrics—Maintain metrics, such as counters and gauges, and expose
them to a metrics server.
Audit logging—Log user actions.
Chapter 11 describes these patterns in more detail. 
PATTERNS FOR THE AUTOMATED TESTING OF SERVICES
The microservice architecture makes individual services easier to test because they’re
much smaller than the monolithic application. At the same time, though, it’s import-
ant to test that the different services work together while avoiding using complex,
slow, and brittle end-to-end tests that test multiple services together. Here are patterns
for simplifying testing by testing services in isolation:
Consumer-driven contract test—Verify that a service meets the expectations of its
clients.
Consumer-side contract test—Verify that the client of a service can communicate
with the service.
Service component test—Test a service in isolation.
Chapters 9 and 10 describe these testing patterns in more detail. 
PATTERNS FOR HANDLING CROSS-CUTTING CONCERNS
In a microservice architecture, there are numerous concerns that every service must
implement, including the observability patterns and discovery patterns. It must also
implement the Externalized Configuration pattern, which supplies configuration
parameters such as database credentials to a service at runtime. When developing a
new service, it would be too time consuming to reimplement these concerns from
scratch. A much better approach is to apply the Microservice Chassis pattern and
build services on top of a framework that handles these concerns. Chapter 11
describes these patterns in more detail. 
SECURITY PATTERNS
In a microservice architecture, users are typically authenticated by the API gateway. It
must then pass information about the user, such as identity and roles, to the services it
invokes. A common solution is to apply the Access token pattern. The API gateway
passes an access token, such as JWT (JSON Web Token), to the services, which can val-
idate the token and obtain information about the user. Chapter 11 discusses the
Access token pattern in more detail.
 Not surprisingly, the patterns in the Microservice architecture pattern language
are focused on solving architect and design problems. You certainly need the right
 
