317
Summary
 But the unit tests don’t verify that a service, such as Order Service, properly inter-
acts with other services. For example, the unit tests don’t verify that an Order can be
persisted in MySQL. Nor do they verify that CreateOrderSaga sends command mes-
sages in the right format to the right message channel. And they don’t verify that the
RestaurantCreated event processed by OrderEventConsumer has the same structure
as the event published by Restaurant Service. In order to verify that a service prop-
erly interacts with other services, we must write integration tests. We also need to write
component tests that test an entire service in isolation. The next chapter discusses
how to conduct those types of tests, as well as end-to-end tests. 
Summary
Automated testing is the key foundation of rapid, safe delivery of software.
What’s more, because of its inherent complexity, to fully benefit from the
microservice architecture you must automate your tests.
The purpose of a test is to verify the behavior of the system under test (SUT). In
this definition, system is a fancy term that means the software element being
tested. It might be something as small as a class, as large as the entire applica-
tion, or something in between, such as a cluster of classes or an individual ser-
vice. A collection of related tests form a test suite.
A good way to simplify and speed up a test is to use test doubles. A test double is
an object that simulates the behavior of a SUT’s dependency. There are two
types of test doubles: stubs and mocks. A stub is a test double that returns values
to the SUT. A mock is a test double that a test uses to verify that the SUT cor-
rectly invokes a dependency.
Use the test pyramid to determine where to focus your testing efforts for your
services. The majority of your tests should be fast, reliable, and easy-to-write unit
tests. You must minimize the number of end-to-end tests, because they’re slow,
brittle, and time consuming to write.
 
