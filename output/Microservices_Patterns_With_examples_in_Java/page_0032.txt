2
CHAPTER 1
Escaping monolithic hell
 Unfortunately, that feeling had quickly evaporated. She had just spent the first
morning back in the office in yet another painful meeting with senior engineering
and business people. They had spent two hours discussing why the development team
was going to miss another critical release date. Sadly, this kind of meeting had become
increasingly common over the past few years. Despite adopting agile, the pace of devel-
opment was slowing down, making it next to impossible to meet the business’s goals.
And, to make matters worse, there didn’t seem to be a simple solution.
 The conference had made Mary realize that FTGO was suffering from a case of
monolithic hell and that the cure was to adopt the microservice architecture. But the
microservice architecture and the associated state-of-the-art software development
practices described at the conference felt like an elusive dream. It was unclear to Mary
how she could fight today’s fires while simultaneously improving the way software was
developed at FTGO.
 Fortunately, as you will learn in this book, there is a way. But first, let’s look at the
problems that FTGO is facing and how they got there.
1.1
The slow march toward monolithic hell
Since its launch in late 2005, FTGO had grown by leaps and bounds. Today, it’s one of
the leading online food delivery companies in the United States. The business even
plans to expand overseas, although those plans are in jeopardy because of delays in
implementing the necessary features.
 At its core, the FTGO application is quite simple. Consumers use the FTGO web-
site or mobile application to place food orders at local restaurants. FTGO coordinates
a network of couriers who deliver the orders. It’s also responsible for paying couriers
and restaurants. Restaurants use the FTGO website to edit their menus and manage
orders. The application uses various web services, including Stripe for payments,
Twilio for messaging, and Amazon Simple Email Service (SES) for email.
 Like many other aging enterprise applications, the FTGO application is a mono-
lith, consisting of a single Java Web Application Archive (WAR) file. Over the years, it
has become a large, complex application. Despite the best efforts of the FTGO devel-
opment team, it’s become an example of the Big Ball of Mud pattern (www.laputan
.org/mud/). To quote Foote and Yoder, the authors of that pattern, it’s a “haphaz-
ardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle.”
The pace of software delivery has slowed. To make matters worse, the FTGO applica-
tion has been written using some increasingly obsolete frameworks. The FTGO appli-
cation is exhibiting all the symptoms of monolithic hell.
 The next section describes the architecture of the FTGO application. Then it
talks about why the monolithic architecture worked well initially. We’ll get into how
the FTGO application has outgrown its architecture and how that has resulted in
monolithic hell.
 
