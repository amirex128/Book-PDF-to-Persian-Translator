30
CHAPTER 1
Escaping monolithic hell
The velocity of the team of teams is significantly higher than that of a single large
team. As described earlier in section 1.5.1, the microservice architecture plays a key
role in enabling the teams to be autonomous. Each team can develop, deploy, and
scale their services without coordinating with other teams. Moreover, it’s very clear
who to contact when a service isn’t meeting its SLA.
 What’s more, the development organization is much more scalable. You grow the
organization by adding teams. If a single team becomes too large, you split it and its
associated service or services. Because the teams are loosely coupled, you avoid the
communication overhead of a large team. As a result, you can add people without
impacting productivity. 
1.7.2
Software development and delivery process
Using the microservice architecture with a waterfall development process is like driv-
ing a horse-drawn Ferrari—you squander most of the benefit of using microservices. If
you want to develop an application with the microservice architecture, it’s essential
that you adopt agile development and deployment practices such as Scrum or Kan-
ban. Better yet, you should practice continuous delivery/deployment, which is a part
of DevOps.
 Jez Humble (https://continuousdelivery.com/) defines continuous delivery as
follows:
Continuous Delivery is the ability to get changes of all types—including new features,
configuration changes, bug fixes and experiments—into production, or into the hands of
users, safely and quickly in a sustainable way.
A key characteristic of continuous delivery is that software is always releasable. It
relies on a high level of automation, including automated testing. Continuous
deployment takes continuous delivery one step further in the practice of automati-
cally deploying releasable code into production. High-performing organizations
The reverse Conway maneuver
In order to effectively deliver software when using the microservice architecture, you
need to take into account Conway’s law (https://en.wikipedia.org/wiki/Conway%27s
_law), which states the following:
Organizations which design systems … are constrained to produce designs
which are copies of the communication structures of these organizations.
Melvin Conway
In other words, your application’s architecture mirrors the structure of the organiza-
tion that developed it. It’s important, therefore, to apply Conway’s law in reverse
(www.thoughtworks.com/radar/techniques/inverse-conway-maneuver) and design
your organization so that its structure mirrors your microservice architecture. By doing
so, you ensure that your development teams are as loosely coupled as the services.
 
