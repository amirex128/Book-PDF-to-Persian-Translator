INDEX
477
consumerId parameter 229
consumer-provider relationship 301
consumer-side contract test 28, 302
containers
container image 395
Deploy a service as a container 22, 393
Docker 395–398
continuous deployment 5
deployment pipeline 305–307
Continuous Integration (CI) 6, 306, 357
controllers, unit tests for 313–315
Conway, Melvin 30
Conway’s law 30
correlation ID 88–89, 120
countermeasures 111, 126, 450
CQRS (Command query responsibility 
segregation) 26, 63, 160, 228–236
benefits of 235–236
efficient implementation 235
improved separation of concerns 235–236
querying in event sourcing-based 
application 235
drawbacks of 236
more complex architecture 236
replication lag 236
motivations for using 229–232
findAvailableRestaurants() query 
operation 231
findOrderHistory() query operation 229–231
need to separate concerns 231–232
overview of 232–235
query-only services 233–235
separating commands from queries 232–233
views
adding and updating 241–242
designing 236–242
implementing with AWS DynamoDB
242–252
Create Order saga 114–115, 135–142
CreateOrderSaga orchestrator 136–138
CreateOrderSagaState class 138
Eventuate Tram Saga framework 140–142
implementing using choreography 118–119
implementing using orchestration 122–123
KitchenServiceProxy class 139
create, update, and delete (CRUD) 
operations 232
create() method 171, 204
createOrder() operation 114
CreateOrderSaga orchestrator 136–138
CreateOrderSagaState class 138
CreateOrderSagaTest class 312
Cross-cutting concerns patterns
Externalized configuration 28, 361
Microservice chassis 28, 378–382
CRUD (create, update, and delete) 
operations 232
Cucumber framework 338
CustomerContactInfoRepository interface 445, 
458
D
DAO (data access object) 39, 149, 239
data access logic layer 436
data consistency 449–453
API composition pattern and 228
maintaining across services 58
refactoring to microservices
sagas and compensatable transactions
451–452
sequencing extraction of services 452–453
supporting compensatable transactions
450–451
Saga pattern 25–26, 114–117
data consistency patterns 25
Saga pattern 25–26, 114–117
DataLoader module 288
DDD (domain-driven design) 24, 34
DDD aggregate pattern 152–160
Debezium 100
Decompose by business capability pattern 51–54
decomposition 52–54
identifying business capabilities 51–52
purpose of business capabilities 51
decomposition 33–64
Decompose by subdomain 54
defining application’s microservice 
architecture 44–64
defining service APIs 61–64
guidelines for decomposition 56–57
identifying system operations 45–50
obstacles to decomposition 57–61
service definition with Decompose by business 
capability pattern 51–54
service definition with Decompose by sub-
domain pattern 54–55
guidelines for 56–57
Common Closure Principle 56–57
Single Responsibility Principle 56
obstacles to 57–61
god classes 58–61
maintaining data consistency across 
services 58
network latency 57
obtaining consistent view of data 58
synchronous interprocess communication 57
patterns
Decompose by business capability 24, 51–54
Decompose by subdomain 24, 54
 
