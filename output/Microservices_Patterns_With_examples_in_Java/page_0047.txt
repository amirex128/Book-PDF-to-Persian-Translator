17
Benefits and drawbacks of the microservice architecture
In many organizations, it makes sense to restrict the choices, but the key point is that
you aren’t constrained by past decisions.
 Moreover, because the services are small, rewriting them using better languages
and technologies becomes practical. If the trial of a new technology fails, you can
throw away that work without risking the entire project. This is quite different than
when using a monolithic architecture, where your initial technology choices severely
constrain your ability to use different languages and frameworks in the future. 
1.5.2
Drawbacks of the microservice architecture
Certainly, no technology is a silver bullet, and the microservice architecture has a
number of significant drawbacks and issues. Indeed most of this book is about how to
address these drawbacks and issues. As you read about the challenges, don’t worry.
Later in this book I describe ways to address them.
 Here are the major drawbacks and issues of the microservice architecture:
Finding the right set of services is challenging.
Distributed systems are complex, which makes development, testing, and deploy-
ment difficult.
Deploying features that span multiple services requires careful coordination.
Deciding when to adopt the microservice architecture is difficult.
Let’s look at each one in turn.
FINDING THE RIGHT SERVICES IS CHALLENGING
One challenge with using the microservice architecture is that there isn’t a concrete,
well-defined algorithm for decomposing a system into services. As with much of soft-
ware development, it’s something of an art. To make matters worse, if you decompose
a system incorrectly, you’ll build a distributed monolith, a system consisting of coupled
services that must be deployed together. A distributed monolith has the drawbacks of
both the monolithic architecture and the microservice architecture. 
DISTRIBUTED SYSTEMS ARE COMPLEX
Another issue with using the microservice architecture is that developers must deal
with the additional complexity of creating a distributed system. Services must use an
interprocess communication mechanism. This is more complex than a simple method
call. Moreover, a service must be designed to handle partial failure and deal with the
remote service either being unavailable or exhibiting high latency.
 Implementing use cases that span multiple services requires the use of unfamiliar
techniques. Each service has its own database, which makes it a challenge to implement
transactions and queries that span services. As described in chapter 4, a microservices-
based application must use what are known as sagas to maintain data consistency
across services. Chapter 7 explains that a microservices-based application can’t retrieve
data from multiple services using simple queries. Instead, it must implement queries
using either API composition or CQRS views.
 
