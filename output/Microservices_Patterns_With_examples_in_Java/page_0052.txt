22
CHAPTER 1
Escaping monolithic hell
then apply numerous successor patterns, including service discovery patterns
and the Circuit breaker pattern.
Alternative—A pattern that provides an alternative solution to this pattern. For
example, the Monolithic architecture pattern and the Microservice architec-
ture pattern are alternative ways of architecting an application. You pick one or
the other.
Generalization—A pattern that is a general solution to a problem. For example,
in chapter 12 you’ll learn about the different implementations of the Single ser-
vice per host pattern.
Specialization—A specialized form of a particular pattern. For example, in chap-
ter 12 you’ll learn that the Deploy a service as a container pattern is a specializa-
tion of Single service per host.
In addition, you can organize patterns that tackle issues in a particular problem area
into groups. The explicit description of related patterns provides valuable guidance
on how to effectively solve a particular problem. Figure 1.9 shows how the relation-
ships between patterns is visually represented.
The different kinds of relationships between patterns shown in figure 1.9 are repre-
sented as follows:
Represents the predecessor-successor relationship
Patterns that are alternative solutions to the same problem
Indicates that one pattern is a specialization of another pattern
Patterns that apply to a particular problem area
Pattern
Problem area
Deployment
Monolithic
architecture
Key
Microservice
architecture
Single service
per host
Service-per-container
General
Alternative A
Predecessor
Speciﬁc
Alternative B
Successor
Figure 1.9
The visual representation of different types of relationships 
between the patterns: a successor pattern solves a problem created by applying 
the predecessor pattern; two or more patterns can be alternative solutions to 
the same problem; one pattern can be a specialization of another pattern; and 
patterns that solve problems in the same area can be grouped, or generalized.
 
