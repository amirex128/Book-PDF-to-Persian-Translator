258
CHAPTER 8
External API patterns
internally, but might not be easily consumed by a mobile client. Some aren’t even fire-
wall friendly. 
8.1.2
API design issues for other kinds of clients
I picked the mobile client because it’s a great way to demonstrate the drawbacks of cli-
ents accessing services directly. But the problems created by exposing services to cli-
ents aren’t specific to just mobile clients. Other kinds of clients, especially those
outside the firewall, also encounter these problems. As described earlier, the FTGO
application’s services are consumed by web applications, browser-based JavaScript
applications, and third-party applications. Let’s take a look at the API design issues
with these clients.
API DESIGN ISSUES FOR WEB APPLICATIONS
Traditional server-side web applications, which handle HTTP requests from browsers
and return HTML pages, run within the firewall and access the services over a LAN.
Network bandwidth and latency aren’t obstacles to implementing API composition in
a web application. Also, web applications can use non-web-friendly protocols to access
the services. The teams that develop web applications are part of the same organiza-
tion and often work in close collaboration with the teams writing the backend ser-
vices, so a web application can easily be updated whenever the backend services are
changed. Consequently, it’s feasible for a web application to access the backend ser-
vices directly. 
API DESIGN ISSUES FOR BROWSER-BASED JAVASCRIPT APPLICATIONS
Modern browser applications use some amount of JavaScript. Even if the HTML is pri-
marily generated by a server-side web application, it’s common for JavaScript running
in the browser to invoke services. For example, all of the FTGO application web appli-
cations—Consumer, Restaurant, and Admin—contain JavaScript that invokes the back-
end services. The Consumer web application, for instance, dynamically refreshes the
Order Details page using JavaScript that invokes the service APIs.
 On one hand, browser-based JavaScript applications are easy to update when ser-
vice APIs change. On the other hand, JavaScript applications that access the services
over the internet have the same problems with network latency as mobile applications.
To make matters worse, browser-based UIs, especially those for the desktop, are usu-
ally more sophisticated and need to compose more services than mobile applications.
It’s likely that the Consumer and Restaurant applications, which access services over
the internet, won’t be able to compose service APIs efficiently. 
DESIGNING APIS FOR THIRD-PARTY APPLICATIONS
FTGO, like many other organizations, exposes an API to third-party developers. The
developers can use the FTGO API to write applications that place and manage
orders. These third-party applications access the APIs over the internet, so API com-
position is likely to be inefficient. But the inefficiency of API composition is a rela-
tively minor problem compared to the much larger challenge of designing an API
 
