295
Testing strategies for microservice architectures
WRITING AUTOMATED TESTS
Automated tests are usually written using a testing framework. JUnit, for example, is a
popular Java testing framework. Figure 9.2 shows the structure of an automated test.
Each test is implemented by a test method, which belongs to a test class.
An automated test typically consists of four phases (http://xunitpatterns.com/
Four%20Phase%20Test.html):
1
Setup—Initialize the test fixture, which consists of the SUT and its dependen-
cies, to the desired initial state. For example, create the class under test and ini-
tialize it to the state required for it to exhibit the desired behavior.
2
Exercise—Invoke the SUT—for example, invoke a method on the class under test.
3
Verify—Make assertions about the invocation’s outcome and the state of the
SUT. For example, verify the method’s return value and the new state of the class
under test.
System Under
Test (SUT)
Test
Test suite
Veriﬁes behavior of
Figure 9.1
The goal of a test is to 
verify the behavior of the system 
under test. An SUT might be as 
small as a class or as large as an 
entire application.
Test class
Setup
Execute
Verify
Teardown
Test method
Test method
Test runner
SUT
Fixture
Executes
Test method
Figure 9.2
Each automated test is implemented by a test method, which belongs to a test class. A 
test consists of four phases: setup, which initializes the test fixture, which is everything required to 
run the test; execute, which invokes the SUT; verify, which verifies the outcome of the test; and 
teardown, which cleans up the test fixture.
 
