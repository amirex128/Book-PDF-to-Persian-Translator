9
Microservice architecture to the rescue
book describes a useful, three-dimensional scalability model: the scale cube, shown in
figure 1.3.
The model defines three ways to scale an application: X, Y, and Z.
X-AXIS SCALING LOAD BALANCES REQUESTS ACROSS MULTIPLE INSTANCES
X-axis scaling is a common way to scale a monolithic application. Figure 1.4 shows
how X-axis scaling works. You run multiple instances of the application behind a
load balancer. The load balancer distributes requests among the N identical instances of
the application. This is a great way of improving the capacity and availability of an
application. 
Z-AXIS SCALING ROUTES REQUESTS BASED ON AN ATTRIBUTE OF THE REQUEST
Z-axis scaling also runs multiple instances of the monolith application, but unlike X-axis
scaling, each instance is responsible for only a subset of the data. Figure 1.5 shows how
Z-axis scaling works. The router in front of the instances uses a request attribute to
route it to the appropriate instance. An application might, for example, route requests
using userId.
 In this example, each application instance is responsible for a subset of users. The
router uses the userId specified by the request Authorization header to select one of
Microservices
Y-axis scaling,
a.k.a. functional
decomposition
Scale by splitting
things that are
different, such as
by function.
X-axis scaling,
a.k.a. horizontal duplication
Scale by cloning.
Z-axis scaling,
a.k.a. data partitioning
Scale by splitting
similar things, such as
by customer ID.
One
instance
Many
instances
One
partition
Many
partitions
Monolith
Figure 1.3
The scale cube defines three separate ways to scale an application: X-axis 
scaling load balances requests across multiple, identical instances; Z-axis scaling routes 
requests based on an attribute of the request; Y-axis functionally decomposes an application 
into services.
 
