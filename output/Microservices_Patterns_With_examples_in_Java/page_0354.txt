324
CHAPTER 10
Testing microservices: Part 2
Contract manages WireMock and configures it to respond to the HTTP requests
defined by the contracts.
 On the provider side, Spring Cloud Contract generates a test class called HttpTest,
which uses Rest Assured Mock MVC to test Order Service’s controllers. Test classes
such as HttpTest must extend a handwritten base class. In this example, the base class
BaseHttp instantiates OrderController injected with mock dependencies and calls
RestAssuredMockMvc.standaloneSetup() to configure Spring MVC.
 Let’s take a closer look at how this works, starting with an example contract.
AN EXAMPLE CONTRACT FOR A REST API
A REST contract, such as the one shown in listing 10.2, specifies an HTTP request,
which is sent by the REST client, and the HTTP response, which the client expects to
get back from the REST server. A contract’s request specifies the HTTP method, the
path, and optional headers. A contract’s response specifies the HTTP status code,
optional headers, and, when appropriate, the expected body.
org.springframework.cloud.contract.spec.Contract.make {
request {
method 'GET'
url '/orders/1223232'
}
response {
status 200
headers {
header('Content-Type': 'application/json;charset=UTF-8')
}
body('''{"orderId" : "1223232", "state" : "APPROVAL_PENDING"}''')
}
}
This particular contract describes a successful attempt by API Gateway to retrieve an
Order from Order Service. Let’s now look at how to use this contract to write integra-
tion tests, starting with the tests for Order Service. 
CONSUMER-DRIVEN CONTRACT INTEGRATION TESTS FOR ORDER SERVICE
The consumer-driven contract integration tests for Order Service verify that its API
meets its clients’ expectations. Listing 10.3 shows HttpBase, which is the base class
for the test class code-generated by Spring Cloud Contract. It’s responsible for the
setup phase of the test. It creates the controllers injected with mock dependencies
and configures those mocks to return values that cause the controller to generate the
expected response.
public abstract class HttpBase {
private StandaloneMockMvcBuilder controllers(Object... controllers) {
...
Listing 10.2
A contract that describes an HTTP-based request/response style interaction
Listing 10.3
The abstract base class for the tests code-generated by Spring Cloud Contract
 
