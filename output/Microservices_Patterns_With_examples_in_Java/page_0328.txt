298
CHAPTER 9
Testing microservices: Part 1
The test quadrant defines four different categories of tests:
Q1—Support programming/technology facing: unit and integration tests
Q2—Support programming/business facing: component and end-to-end test
Q3—Critique application/business facing: usability and exploratory testing
Q4—Critique application/technology facing: nonfunctional acceptance tests such
as performance tests
The test quadrant isn’t the only way of organizing tests. There’s also the test pyramid,
which provides guidance on how many tests of each type to write. 
USING THE TEST PYRAMID AS A GUIDE TO FOCUSING YOUR TESTING EFFORTS
We must write different kinds of tests in order to be confident that our application
works. The challenge, though, is that the execution time and complexity of a test
increase with its scope. Also, the larger the scope of a test and the more moving parts
it has, the less reliable it becomes. Unreliable tests are almost as bad as no tests,
because if you can’t trust a test, you’re likely to ignore failures.
 On one end of the spectrum are unit tests for individual classes. They’re fast to
execute, easy to write, and reliable. At the other end of the spectrum are end-to-end
tests for the entire application. These tend to be slow, difficult to write, and often
unreliable because of their complexity. Because we don’t have unlimited budget for
development and testing, we want to focus on writing tests that have small scope with-
out compromising the effectiveness of the test suite.
 The test pyramid, shown in figure 9.5, is a good guide (https://martinfowler.com/
bliki/TestPyramid.html). At the base of the pyramid are the fast, simple, and reliable
unit tests. At the top of the pyramid are the slow, complex, and brittle end-to-end tests.
Like the USDA food pyramid, although more useful and less controversial (https://en
.wikipedia.org/wiki/History_of_USDA_nutrition_guides), the test pyramid describes
the relative proportions of each type of test.
 The key idea of the test pyramid is that as we move up the pyramid we should write
fewer and fewer tests. We should write lots of unit tests and very few end-to-end tests.
Q2 AUTOMATED
Q3 MANUAL
Business facing
Technology facing
Support programming
Critique project
Q1 AUTOMATED
Q4 MANUAL/
AUTOMATED
Functional/
acceptance tests
Exploratory
testing, usability
testing
Unit,
integration,
component
Non-functional
acceptance tests:
performance
and more
Figure 9.4
The test quadrant categorizes tests along 
two dimensions. The first dimension is whether a test 
is business facing or technology facing. The second is 
whether the purpose of the test is to support 
programming or critique the application.
 
