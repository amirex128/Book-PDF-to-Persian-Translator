291
Summary
 This section has barely scratched the surface of GraphQL’s capabilities. I hope I’ve
demonstrated that GraphQL is a very appealing alternative to a more traditional,
REST-based API gateway. It lets you implement an API that’s flexible enough to sup-
port a diverse set of clients. Consequently, you should consider using GraphQL to
implement your API gateway. 
Summary
Your application’s external clients usually access the application’s services via an
API gateway. An API gateway provides each client with a custom API. It’s respon-
sible for request routing, API composition, protocol translation, and implemen-
tation of edge functions such as authentication.
Your application can have a single API gateway or it can use the Backends for
frontends pattern, which defines an API gateway for each type of client. The
main advantage of the Backends for frontends pattern is that it gives the client
teams greater autonomy, because they develop, deploy, and operate their own
API gateway.
There are numerous technologies you can use to implement an API gateway,
including off-the-shelf API gateway products. Alternatively, you can develop
your own API gateway using a framework.
Spring Cloud Gateway is a good, easy-to-use framework for developing an API
gateway. It routes requests using any request attribute, including the method
and the path. Spring Cloud Gateway can route a request either directly to a
backend service or to a custom handler method. It’s built using the scalable,
reactive Spring Framework 5 and Project Reactor frameworks. You can write
your custom request handlers in a reactive style using, for example, Project
Reactor’s Mono abstraction.
GraphQL, a framework that provides graph-based query language, is another
excellent foundation for developing an API Gateway. You write a graph-oriented
schema to describe the server-side data model and its supported queries. You
then map that schema to your services by writing resolvers, which retrieve data.
GraphQL-based clients execute queries against the schema that specify exactly
the data that the server should return. As a result, a GraphQL-based API gate-
way can support diverse clients. 
 
