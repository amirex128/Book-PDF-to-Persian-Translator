320
CHAPTER 10
Testing microservices: Part 2
testing sometimes, but it’s at the top of the test pyramid, so you want to minimize the
number of end-to-end tests.
 A much more effective strategy is to write what are known as integration tests. As fig-
ure 10.2 shows, integration tests are the layer above unit tests in the testing pyramid.
They verify that a service can properly interact with infrastructure services and other ser-
vices. But unlike end-to-end tests, they don’t launch services. Instead, we use a couple of
strategies that significantly simplify the tests without impacting their effectiveness.
The first strategy is to test each of the service’s adapters, along with, perhaps, the
adapter’s supporting classes. For example, in section 10.1.1 you’ll see a JPA per-
sistence test that verifies that Orders are persisted correctly. Rather than test persistence
through Order Service’s API, it directly tests the OrderRepository class. Similarly, in
section 10.1.3 you’ll see a test that verifies that Order Service publishes correctly
structured domain events by testing the OrderDomainEventPublisher class. The bene-
fit of testing only a small number of classes rather than the entire service is that the
tests are significantly simpler and faster.
 The second strategy for simplifying integration tests that verify interactions
between application services is to use contracts, discussed in chapter 9. A contract is a
concrete example of an interaction between a pair of services. As table 10.1 shows, the
structure of a contract depends on the type of interaction between the services.
Table 10.1
The structure of a contract depends on the type of interaction between the services.
Interaction style
Consumer
Provider
Contract
REST-based, 
request/response
API Gateway
Order Service
HTTP request and 
response
Publish/subscribe
Order History Service
Order Service
Domain event
Asynchronous 
request/response
Order Service
Kitchen Service
Command message 
and reply message
End-to-end
Component
Integration
Unit
Figure 10.2
Integration tests are the layer 
above unit tests. They verify that a service 
can communicate with its dependencies, 
which includes infrastructure services, such 
as the database, and application services.
 
