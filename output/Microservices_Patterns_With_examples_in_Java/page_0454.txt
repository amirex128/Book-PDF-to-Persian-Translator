424
CHAPTER 12
Deploying microservices
public abstract class AbstractHttpHandler implements
RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
private Logger log = LoggerFactory.getLogger(this.getClass());
@Override
public APIGatewayProxyResponseEvent handleRequest(
APIGatewayProxyRequestEvent input, Context context) {
log.debug("Got request: {}", input);
try {
beforeHandling(input, context);
return handleHttpRequest(input, context);
} catch (Exception e) {
log.error("Error handling request id: {}", context.getAwsRequestId(), e);
return buildErrorResponse(new AwsLambdaError(
"Internal Server Error",
"500",
context.getAwsRequestId(),
"Error handling request: " + context.getAwsRequestId() + " " 
+ input.toString()));
}
}
protected void beforeHandling(APIGatewayProxyRequestEvent request, 
Context context) {
// do nothing
}
protected abstract APIGatewayProxyResponseEvent handleHttpRequest(
APIGatewayProxyRequestEvent request, Context context);
}
12.6.2 Packaging the service as ZIP file
Before the service can be deployed, we must package it as a ZIP file. We can easily
build the ZIP file using the following Gradle task:
task buildZip(type: Zip) {
from compileJava
from processResources
into('lib') {
from configurations.runtime
}
}
This task builds a ZIP with the classes and resources at the top level and the JAR
dependencies in the lib directory.
 Now that we’ve built the ZIP file, let’s look at how to deploy the lambda function. 
Listing 12.11
An abstract RequestHandler that catches exceptions and returns 
a 500 HTTP response
 
