430
CHAPTER 13
Refactoring to microservices
microservices is a significant undertaking. It will divert resources away from new fea-
ture development. As a result, it’s likely that the business will only support the adop-
tion of microservices if it solves a significant business problem.
 If you’re in monolithic hell, it’s likely that you already have at least one business
problem. Here are some examples of business problems caused by monolithic hell:
Slow delivery—The application is difficult to understand, maintain, and test, so
developer productivity is low. As a result, the organization is unable to compete
effectively and risks being overtaken by competitors.
Buggy software releases—The lack of testability means that software releases are
often buggy. This makes customers unhappy, which results in losing customers
and reduced revenue.
Poor scalability—Scaling a monolithic application is difficult because it combines
modules with very different resource requirements into one executable compo-
nent. The lack of scalability means that it’s either impossible or prohibitively
expensive to scale the application beyond a certain point. As a result, the appli-
cation can’t support the current or predicted needs of the business.
It’s important to be sure that these problems are there because you’ve outgrown your
architecture. A common reason for slow delivery and buggy releases is a poor software
development process. For example, if you’re still relying on manual testing, then
adopting automated testing alone can significantly increase development velocity.
Similarly, you can sometimes solve scalability problems without changing your archi-
tecture. You should first try simpler solutions. If, and only if, you still have software
delivery problems should you then migrate to the microservice architecture. Let’s
look at how to do that. 
13.1.2 Strangling the monolith
The process of transforming a monolithic application into microservices is a form of
application modernization (https://en.wikipedia.org/wiki/Software_modernization).
Application modernization is the process of converting a legacy application to one having
a modern architecture and technology stack. Developers have been modernizing appli-
cations for decades. As a result, there is wisdom accumulated through experience we
can use when refactoring an application into a microservice architecture. The most
important lesson learned over the years is to not do a big bang rewrite.
 A big bang rewrite is when you develop a new application—in this case, a microservices-
based application—from scratch. Although starting from scratch and leaving the legacy
code base behind sounds appealing, it’s extremely risky and will likely end in failure.
You will spend months, possibly years, duplicating the existing functionality, and only
then can you implement the features that the business needs today! Also, you’ll
need to develop the legacy application anyway, which diverts effort away from the
rewrite and means that you have a constantly moving target. What’s more, it’s possible
 
