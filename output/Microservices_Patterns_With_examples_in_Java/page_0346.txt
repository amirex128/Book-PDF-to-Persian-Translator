316
CHAPTER 9
Testing microservices: Part 1
scenes, though, the messaging infrastructure is stubbed, so no message broker is
involved. Letâ€™s look at how to test the OrderEventConsumer class.
 Listing 9.7 shows part of the OrderEventConsumerTest class, which tests Order-
EventConsumer. It verifies that OrderEventConsumer routes each event to the appro-
priate handler method and correctly invokes OrderService. The test uses the
Eventuate Tram Mock Messaging framework, which provides an easy-to-use DSL for
writing mock messaging tests that uses the same given-when-then format as Rest
Assured. Each test instantiates OrderEventConsumer injected with a mock Order-
Service, publishes a domain event, and verifies that OrderEventConsumer correctly
invokes the service mock.
public class OrderEventConsumerTest {
private OrderService orderService;
private OrderEventConsumer orderEventConsumer;
@Before
public void setUp() throws Exception {
orderService = mock(OrderService.class);
orderEventConsumer = new OrderEventConsumer(orderService);
  
}
@Test
public void shouldCreateMenu() {
given().
eventHandlers(orderEventConsumer.domainEventHandlers()).  
when().
aggregate("net.chrisrichardson.ftgo.restaurantservice.domain.Restaurant",
AJANTA_ID).
publishes(new RestaurantCreated(AJANTA_RESTAURANT_NAME,   
RestaurantMother.AJANTA_RESTAURANT_MENU))
then().
verify(() -> {
    
verify(orderService)
.createMenu(AJANTA_ID,
new RestaurantMenu(RestaurantMother.AJANTA_RESTAURANT_MENU_ITEMS));
})
;
}
}
The setUp() method creates an OrderEventConsumer injected with a mock Order-
Service. The shouldCreateMenu() method publishes a RestaurantCreated event
and verifies that OrderEventConsumer invoked OrderService.createMenu(). The
OrderEventConsumerTest class and the other unit test classes execute extremely quickly.
The unit tests run in just a few seconds.
Listing 9.7
A fast-running unit test for the OrderEventConsumer class
Instantiate
OrderEventConsumer with
mocked dependencies.
Configure
OrderEventConsumer
domain handlers.
Publish a
Restaurant-
Created
event.
Verify that OrderEventConsumer 
invoked OrderService.createMenu().
 
