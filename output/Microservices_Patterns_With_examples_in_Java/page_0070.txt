40
CHAPTER 2
Decomposition strategies
Because of this decoupling, it’s much easier to test the business logic in isolation.
Another benefit is that it more accurately reflects the architecture of a modern appli-
cation. The business logic can be invoked via multiple adapters, each of which imple-
ments a particular API or UI. The business logic can also invoke multiple adapters,
each one of which invokes a different external system. Hexagonal architecture is a
great way to describe the architecture of each service in a microservice architecture.
 The layered and hexagonal architectures are both examples of architectural styles.
Each defines the building blocks of an architecture and imposes constraints on the
relationships between them. The hexagonal architecture and the layered architec-
ture, in the form of a three-tier architecture, organize the logical view. Let’s now
define the microservice architecture as an architectural style that organizes the imple-
mentation view. 
2.1.3
The microservice architecture is an architectural style
I’ve discussed the 4+1 view model and architectural styles, so I can now define mono-
lithic and microservice architecture. They’re both architectural styles. Monolithic
architecture is an architectural style that structures the implementation view as a sin-
gle component: a single executable or WAR file. This definition says nothing about
the other views. A monolithic application can, for example, have a logical view that’s
organized along the lines of a hexagonal architecture.
The microservice architecture is also an architectural style. It structures the imple-
mentation view as a set of multiple components: executables or WAR files. The com-
ponents are services, and the connectors are the communication protocols that
enable those services to collaborate. Each service has its own logical view architecture,
which is typically a hexagonal architecture. Figure 2.3 shows a possible microservice
architecture for the FTGO application. The services in this architecture correspond to
business capabilities, such as Order management and Restaurant management.
Later in this chapter, I describe what is meant by business capability . The connectors
between services are implemented using interprocess communication mechanisms
such as REST APIs and asynchronous messaging. Chapter 3 discusses interprocess
communication in more detail.
Pattern: Monolithic architecture
Structure the application as a single executable/deployable component. See http://
microservices.io/patterns/ monolithic.html.
Pattern: Microservice architecture
Structure the application as a collection of loosely coupled, independently deployable
services. See http://microservices.io/patterns/microservices.html.
 
