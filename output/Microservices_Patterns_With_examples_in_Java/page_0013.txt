CONTENTS
xi
3.4
Using asynchronous messaging to improve 
availability
103
Synchronous communication reduces availability
103
Eliminating synchronous interaction
104
4 
Managing transactions with sagas
110
4.1
Transaction management in a microservice 
architecture
111
The need for distributed transactions in a microservice 
architecture
112
■The trouble with distributed 
transactions
112
■Using the Saga pattern to maintain 
data consistency
114
4.2
Coordinating sagas
117
Choreography-based sagas
118
■Orchestration-based sagas
121
4.3
Handling the lack of isolation
126
Overview of anomalies
127
■Countermeasures for handling the 
lack of isolation
128
4.4
The design of the Order Service and 
the Create Order Saga
132
The OrderService class
133
■The implementation of the Create 
Order Saga
135
■The OrderCommandHandlers class
142
The OrderServiceConfiguration class
143
5 
Designing business logic in a microservice architecture
146
5.1
Business logic organization patterns
147
Designing business logic using the Transaction script pattern
149
Designing business logic using the Domain model pattern
150
About Domain-driven design
151
5.2
Designing a domain model using the 
DDD aggregate pattern
152
The problem with fuzzy boundaries
153
■Aggregates have 
explicit boundaries
154
■Aggregate rules
155
■Aggregate 
granularity
158
■Designing business logic with aggregates
159
5.3
Publishing domain events
160
Why publish change events?
160
■What is a domain 
event?
161
■Event enrichment
161
■Identifying domain 
events
162
■Generating and publishing domain events
164
Consuming domain events
167
 
