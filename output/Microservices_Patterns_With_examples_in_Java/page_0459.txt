429
Overview of refactoring to microservices
your monolith into microservices by developing what’s known as a strangler applica-
tion. The idea of a strangler application comes from strangler vines, which grow in
rain forests by enveloping and sometimes killing trees. A strangler application is a new
application consisting of microservices that you develop by implementing new func-
tionality as services and extracting services from the monolith. Over time, as the stran-
gler application implements more and more functionality, it shrinks and ultimately
kills the monolith. An important benefit of developing a strangler application is that,
unlike a big bang rewrite, it delivers value to the business early and often.
 I begin this chapter by describing the motivations for refactoring a monolith to a
microservice architecture. I then describe how to develop the strangler application
by implementing new functionality as services and extracting services from the
monolith. Next, I cover various design topics, including how to integrate the mono-
lith and services, how to maintain database consistency across the monolith and
services, and how to handle security. I end the chapter by describing a couple of
example services. One service is Delayed Order Service, which implements brand
new functionality. The other service is Delivery Service, which is extracted from
the monolith. Let’s start by taking a look at the concept of refactoring to a micro-
service architecture.
13.1
Overview of refactoring to microservices
Put yourself in Mary’s shoes. You’re responsible for the FTGO application, a large and
old monolithic application. The business is extremely frustrated with engineering’s
inability to deliver features rapidly and reliably. FTGO appears to be suffering from a
classic case of monolithic hell. Microservices seem, at least on the surface, to be the
answer. Should you propose diverting development resources away from feature devel-
opment to migrating to a microservice architecture?
 I start this section by discussing why you should consider refactoring to microser-
vices. I also discuss why it’s important to be sure that your software development prob-
lems are because you’re in monolithic hell rather than in, for example, a poor
software development process. I then describe strategies for incrementally refactoring
your monolith to a microservice architecture. Next, I discuss the importance of deliv-
ering improvements earlier and often in order to maintain the support of the busi-
ness. I then describe why you should avoid investing in a sophisticated deployment
infrastructure until you’ve developed a few services. Finally, I describe the various
strategies you can use to introduce services into your architecture, including imple-
menting new features as services and extracting services from the monolith.
13.1.1 Why refactor a monolith?
The microservice architecture has, as described in chapter 1, numerous benefits. It
has much better maintainability, testability, and deployability, so it accelerates devel-
opment. The microservice architecture is more scalable and improves fault isolation.
It’s also much easier to evolve your technology stack. But refactoring a monolith to
 
