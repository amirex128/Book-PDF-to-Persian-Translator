37
What is the microservice architecture exactly?
illustrate how the elements of a view collaborate. Let’s now look at why architecture
is important. 
WHY ARCHITECTURE MATTERS
An application has two categories of requirements. The first category includes the
functional requirements, which define what the application must do. They’re usually
in the form of use cases or user stories. Architecture has very little to do with the func-
tional requirements. You can implement functional requirements with almost any
architecture, even a big ball of mud.
 Architecture is important because it enables an application to satisfy the second
category of requirements: its quality of service requirements. These are also known as
quality attributes and are the so-called -ilities. The quality of service requirements
define the runtime qualities such as scalability and reliability. They also define devel-
opment time qualities including maintainability, testability, and deployability. The
architecture you choose for your application determines how well it meets these
quality requirements. 
2.1.2
Overview of architectural styles
In the physical world, a building’s architecture often follows a particular style, such as
Victorian, American Craftsman, or Art Deco. Each style is a package of design deci-
sions that constrains a building’s features and building materials. The concept of
architectural style also applies to software. David Garlan and Mary Shaw (An Introduc-
tion to Software Architecture, January 1994, https://www.cs.cmu.edu/afs/cs/project/
able/ftp/intro_softarch/intro_softarch.pdf), pioneers in the discipline of software
architecture, define an architectural style as follows:
An architectural style, then, defines a family of such systems in terms of a pattern of
structural organization. More specifically, an architectural style determines the vocabulary
of components and connectors that can be used in instances of that style, together with a
set of constraints on how they can be combined.
A particular architectural style provides a limited palette of elements (components)
and relations (connectors) from which you can define a view of your application’s
architecture. An application typically uses a combination of architectural styles. For
example, later in this section I describe how the monolithic architecture is an archi-
tectural style that structures the implementation view as a single (executable/deploy-
able) component. The microservice architecture structures an application as a set of
loosely coupled services.
THE LAYERED ARCHITECTURAL STYLE
The classic example of an architectural style is the layered architecture. A layered archi-
tecture organizes software elements into layers. Each layer has a well-defined set of
responsibilities. A layered architecture also constraints the dependencies between the
layers. A layer can only depend on either the layer immediately below it (if strict layer-
ing) or any of the layers below it.
 
