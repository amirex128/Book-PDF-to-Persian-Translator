54
CHAPTER 2
Decomposition strategies
point where it becomes worthwhile to split it into multiple services. What’s more, in
section 2.2.5, I describe several obstacles to decomposition that might cause you to
revisit your decision.
 Let’s take a look at another way to decompose an application that is based on
domain-driven design. 
2.2.3
Defining services by applying the Decompose by 
sub-domain pattern
DDD, as described in the excellent book Domain-driven design by Eric Evans
(Addison-Wesley Professional, 2003), is an approach for building complex software
applications that is centered on the development of an object-oriented domain
model. A domain mode captures knowledge about a domain in a form that can be
used to solve problems within that domain. It defines the vocabulary used by the
team, what DDD calls the Ubiquitous Language. The domain model is closely mir-
rored in the design and implementation of the application. DDD has two concepts
that are incredibly useful when applying the microservice architecture: subdomains
and bounded contexts.
DDD is quite different than the traditional approach to enterprise modeling, which
creates a single model for the entire enterprise. In such a model there would be, for
example, a single definition of each business entity, such as customer, order, and so
on. The problem with this kind of modeling is that getting different parts of an orga-
nization to agree on a single model is a monumental task. Also, it means that from the
perspective of a given part of the organization, the model is overly complex for their
needs. Moreover, the domain model can be confusing because different parts of the
organization might use either the same term for different concepts or different terms
for the same concept. DDD avoids these problems by defining multiple domain mod-
els, each with an explicit scope.
 DDD defines a separate domain model for each subdomain. A subdomain is a part
of the domain, DDD’s term for the application’s problem space. Subdomains are iden-
tified using the same approach as identifying business capabilities: analyze the busi-
ness and identify the different areas of expertise. The end result is very likely to be
subdomains that are similar to the business capabilities. The examples of subdomains
in FTGO include Order taking, Order management, Kitchen management, Delivery,
and Financials. As you can see, these subdomains are very similar to the business capa-
bilities described earlier.
Pattern: Decompose by subdomain
Define services corresponding to DDD subdomains. See http://microservices.io
/patterns/decomposition/decompose-by-subdomain.html.
 
