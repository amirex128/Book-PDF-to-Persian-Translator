21
The Microservice architecture pattern language
 One reason why patterns are valuable is because a pattern must describe the con-
text within which it applies. The idea that a solution is specific to a particular context
and might not work well in other contexts is an improvement over how technology
used to typically be discussed. For example, a solution that solves the problem at the
scale of Netflix might not be the best approach for an application with fewer users.
 The value of a pattern, however, goes far beyond requiring you to consider the
context of a problem. It forces you to describe other critical yet frequently overlooked
aspects of a solution. A commonly used pattern structure includes three especially
valuable sections:
Forces
Resulting context
Related patterns
Let’s look at each of these, starting with forces.
FORCES: THE ISSUES THAT YOU MUST ADDRESS WHEN SOLVING A PROBLEM
The forces section of a pattern describes the forces (issues) that you must address
when solving a problem in a given context. Forces can conflict, so it might not be
possible to solve all of them. Which forces are more important depends on the con-
text. You have to prioritize solving some forces over others. For example, code must
be easy to understand and have good performance. Code written in a reactive style
has better performance than synchronous code, yet is often more difficult to under-
stand. Explicitly listing the forces is useful because it makes clear which issues need
to be solved. 
RESULTING CONTEXT: THE CONSEQUENCES OF APPLYING A PATTERN
The resulting context section of a pattern describes the consequences of applying the
pattern. It consists of three parts:
Benefits—The benefits of the pattern, including the forces that have been resolved
Drawbacks—The drawbacks of the pattern, including the unresolved forces
Issues—The new problems that have been introduced by applying the pattern
The resulting context provides a more complete and less biased view of the solution,
which enables better design decisions. 
RELATED PATTERNS: THE FIVE DIFFERENT TYPES OF RELATIONSHIPS
The related patterns section of a pattern describes the relationship between the pattern
and other patterns. There are five types of relationships between patterns:
Predecessor—A predecessor pattern is a pattern that motivates the need for this
pattern. For example, the Microservice architecture pattern is the predecessor
to the rest of the patterns in the pattern language, except the monolithic archi-
tecture pattern.
Successor—A pattern that solves an issue that has been introduced by this pat-
tern. For example, if you apply the Microservice architecture pattern, you must
 
