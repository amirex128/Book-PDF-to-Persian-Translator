19
The Microservice architecture pattern language
 You must address numerous design and architectural issues when using the micro-
service architecture. What’s more, many of these issues have multiple solutions, each
with a different set of trade-offs. There is no one single perfect solution. To help guide
your decision making, I’ve created the Microservice architecture pattern language. I ref-
erence this pattern language throughout the rest of the book as I teach you about the
microservice architecture. Let’s look at what a pattern language is and why it’s helpful. 
1.6
The Microservice architecture pattern language
Architecture and design are all about making decisions. You need to decide whether
the monolithic or microservice architecture is the best fit for your application. When
making these decisions you have lots of trade-offs to consider. If you pick the microser-
vice architecture, you’ll need to address lots of issues.
 A good way to describe the various architectural and design options and improve
decision making is to use a pattern language. Let’s first look at why we need patterns
and a pattern language, and then we’ll take a tour of the Microservice architecture
pattern language.
1.6.1
Microservice architecture is not a silver bullet
Back in 1986, Fred Brooks, author of The Mythical Man-Month (Addison-Wesley Profes-
sional, 1995), said that in software engineering, there are no silver bullets. That means
there are no techniques or technologies that if adopted would give you a tenfold
boost in productivity. Yet decades years later, developers are still arguing passionately
about their favorite silver bullets, absolutely convinced that their favorite technology
will give them a massive boost in productivity.
 A lot of arguments follow the suck/rock dichotomy (http://nealford.com/memeagora/
2009/08/05/suck-rock-dichotomy.html), a term coined by Neal Ford that describes
how everything in the software world either sucks or rocks, with no middle ground.
These arguments have this structure: if you do X, then a puppy will die, so therefore
you must do Y. For example, synchronous versus reactive programming, object-oriented
versus functional, Java versus JavaScript, REST versus messaging. Of course, reality is
much more nuanced. Every technology has drawbacks and limitations that are often
overlooked by its advocates. As a result, the adoption of a technology usually follows
the Gartner hype cycle (https://en.wikipedia.org/wiki/Hype_cycle), in which an emerg-
ing technology goes through five phases, including the peak of inflated expectations (it
rocks), followed by the trough of disillusionment (it sucks), and ending with the plateau
of productivity (we now understand the trade-offs and when to use it).
 Microservices are not immune to the silver bullet phenomenon. Whether this
architecture is appropriate for your application depends on many factors. Conse-
quently, it’s bad advice to advise always using the microservice architecture, but it’s
equally bad advice to advise never using it. As with many things, it depends.
 The underlying reason for these polarized and hyped arguments about technology is
that humans are primarily driven by their emotions. Jonathan Haidt, in his excellent
 
