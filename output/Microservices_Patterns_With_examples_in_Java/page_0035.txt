5
The slow march toward monolithic hell
To make matters worse, this overwhelming complexity tends to be a downward spiral.
If the code base is difficult to understand, a developer won’t make changes correctly.
Each change makes the code base incrementally more complex and harder to under-
stand. The clean, modular architecture shown earlier in figure 1.1 doesn’t reflect real-
ity. FTGO is gradually becoming a monstrous, incomprehensible, big ball of mud.
 Mary remembers recently attending a conference where she met a developer who
was writing a tool to analyze the dependencies between the thousands of JARs in their
multimillion lines-of-code (LOC) application. At the time, that tool seemed like some-
thing FTGO could use. Now she’s not so sure. Mary suspects a better approach is to
migrate to an architecture that is better suited to a complex application: microservices. 
DEVELOPMENT IS SLOW
As well as having to fight overwhelming complexity, FTGO developers find day-to-day
development tasks slow. The large application overloads and slows down a developer’s
IDE. Building the FTGO application takes a long time. Moreover, because it’s so large,
the application takes a long time to start up. As a result, the edit-build-run-test loop
takes a long time, which badly impacts productivity. 
PATH FROM COMMIT TO DEPLOYMENT IS LONG AND ARDUOUS
Another problem with the FTGO application is that deploying changes into produc-
tion is a long and painful process. The team typically deploys updates to production
once a month, usually late on a Friday or Saturday night. Mary keeps reading that the
state-of-the-art for Software-as-a-Service (SaaS) applications is continuous deployment:
Large
development
organization
Single code base creates
communication and
coordination overhead.
Large, complex
unreliable, difﬁcult
to maintain
The path from code commit to
production is arduous.
Changes sit in a queue until
they can be manually tested.
Order management team
Restaurant management team
Delivery management team
FTGO development
Production
Jenkins
Cl
Backlog
Deployment pipeline
Source
code
repository
Manual
testing
FTGO
application
Figure 1.2
A case of monolithic hell. The large FTGO developer team commits their changes to a 
single source code repository. The path from code commit to production is long and arduous and 
involves manual testing. The FTGO application is large, complex, unreliable, and difficult to maintain.
 
