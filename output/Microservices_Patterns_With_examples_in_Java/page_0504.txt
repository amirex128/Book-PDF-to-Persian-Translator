INDEX
474
API composition pattern (continued)
design issues 225–227
reactive programming model 227
role of API composer 225–227
findOrder() query operation 221–222, 224
overview of 222–224
API gateway 259–291
authentication 354–355
benefits of 267
design issues 268–271
being good citizen in architecture 270–271
handling partial failures 270
performance and scalability 268–269
reactive programming abstractions 269–270
drawbacks of 267
implementation using GraphQL 279–291
connecting schema to data 285–287
defining schema 282–284
executing queries 284–285
integrating Apollo GraphQL server with 
Express 289–290
optimizing loading using batching and 
caching 288
writing client 290–291
implementation using Netflix Zuul 273
implementation using off-the-shelf products/
services 271–272
API gateway products 272
AWS API gateway service 271–272
AWS Application Load Balancer service 272
implementation using Spring Cloud 
Gateway 273–275
ApiGatewayApplication class 279
OrderConfiguration class 275–276
OrderHandlers class 276–278
OrderService class 278–279
mapping USERINFO cookie to Authorization 
header 455
Netflix example 267–268
overview of 259–266
API composition 261
architecture 263–264
Backends for frontends pattern 264–266
client-specific API 262
edge functions 262–263
ownership model 264
protocol translation 262
request routing 260
ApiGatewayApplication class 279
ApiGatewayMain package 274
APIGatewayProxyRequestEvent 417, 421–422
APIGatewayProxyResponseEvent 417, 422
APIs
defining in microservice architecture 68–69
interprocess communication 69–71
creating specification for messaging-based 
service API 89–90
major, breaking changes 70–71
minor, backward-compatible changes 70
semantic versioning 70
specifying REST APIs 74
refactoring to microservices 444–445, 465–466
testing microservices
consumer contract tests for messaging 
APIs 305
consumer-side integration test for API gate-
way’s OrderServiceProxy 325–326
example contract for REST API 324
See also API gateways
Application architecture patterns
Microservice architecture 8–18, 40
Monolithic architecture 2–7, 22–34, 40
application infrastructure 24
application metrics 28, 366, 373–376
collecting service-level metrics 374–375
delivering metrics to metrics service 375–376
application modernization 23–24, 430–432
application security 349
apply() method 188, 193
architectural styles 37–40
hexagonal 38–40
layered 37–38
microservice architecture 40–43
loose coupling, defined 42–43
relative unimportance of size of service 43
role of shared libraries 43
services, defined 41–42
aspect-oriented programming (AOP) 373, 378
asynchronous (nonblocking) I/O model 268
asynchronous interactions 67
Asynchronous messaging pattern 85–103
competing receivers and message ordering
94–95
creating API specification 89–90
documenting asynchronous operations 90
documenting published events 90
duplicate messages 95–97
tracking messages and discarding 
duplicates 96–97
writing idempotent message handlers 96
improving availability 103–108
eliminating synchronous interaction
104–108
synchronous communication and 
availability 103–104
interaction styles 87–89
one-way notifications 89
publish/subscribe 89
request/response and asynchronous request/
response 87–88
 
