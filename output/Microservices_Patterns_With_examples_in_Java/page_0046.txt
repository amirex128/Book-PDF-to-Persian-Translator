16
CHAPTER 1
Escaping monolithic hell
SERVICES ARE INDEPENDENTLY SCALABLE
Each service in a microservice architecture can be scaled independently of other ser-
vices using X-axis cloning and Z-axis partitioning. Moreover, each service can be
deployed on hardware that’s best suited to its resource requirements. This is quite dif-
ferent than when using a monolithic architecture, where components with wildly dif-
ferent resource requirements—for example, CPU-intensive vs. memory-intensive—
must be deployed together. 
BETTER FAULT ISOLATION
The microservice architecture has better fault isolation. For example, a memory leak
in one service only affects that service. Other services will continue to handle requests
normally. In comparison, one misbehaving component of a monolithic architecture
will bring down the entire system. 
EASILY EXPERIMENT WITH AND ADOPT NEW TECHNOLOGIES
Last but not least, the microservice architecture eliminates any long-term commit-
ment to a technology stack. In principle, when developing a new service, the develop-
ers are free to pick whatever language and frameworks are best suited for that service.
Small, autonomous,
loosely coupled teams
Each service has
its own source
code repository.
Each service has
its own automated
deployment pipeline.
Small, simple,
reliable, easy to
maintain services
Order management team
Restaurant management team
Delivery management team
FTGO development
Production
Jenkins Cl
Deployment pipeline
Order Service
source code
repository
Order Service
Jenkins Cl
Deployment pipeline
Restaurant Service
source code
repository
Restaurant Service
Jenkins Cl
Deployment pipeline
Delivery Service
source code
repository
Delivery Service
Figure 1.8
The microservices-based FTGO application consists of a set of loosely coupled services. 
Each team develops, tests, and deploys their services independently.
 
