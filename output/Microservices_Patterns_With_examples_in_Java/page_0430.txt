400
CHAPTER 12
Deploying microservices
Docker orchestration frameworks are an increasingly popular way to deploy applica-
tions. Docker Swarm is part of the Docker engine, so is easy to set up and use. Kuber-
netes is much more complex to set up and administer, but it’s much more sophisticated.
At the time of writing, Kubernetes has tremendous momentum, with a massive open
source community. Let’s take a closer look at how it works.
KUBERNETES ARCHITECTURE
Kubernetes runs on a cluster of machines. Figure 12.10 shows the architecture of a
Kubernetes cluster. Each machine in a Kubernetes cluster is either a master or a node.
A typical cluster has a small number of masters—perhaps just one—and many nodes.
A master machine is responsible for managing the cluster. A node is a worker than runs
one or more pods. A pod is Kubernetes’s unit of deployment and consists of a set of
containers.
 A master runs several components, including the following:
API server—The REST API for deploying and managing services, used by the
kubectl command-line interface, for example.
Etcd—A key-value NoSQL database that stores the cluster data.
SVC
A
SVC
B
SVC
C
Container
Docker orchestration framework
Container
Container
Docker
Operating
system
Machine
Docker
Operating
system
Machine
Docker
Operating
system
Machine
Service management
Scheduling
Resource management
Figure 12.9
A Docker orchestration 
framework turns a set of machines running 
Docker into a cluster of resources. It assigns 
containers to machines. The framework 
attempts to keep the desired number of 
healthy containers running at all times.
 
