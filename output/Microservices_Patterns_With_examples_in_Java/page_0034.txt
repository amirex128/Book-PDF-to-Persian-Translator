4
CHAPTER 1
Escaping monolithic hell
of software architecture, which structures a system as a single executable or deploy-
able component. If the FTGO application were written in the Go language (GoLang),
it would be a single executable. A Ruby or NodeJS version of the application would be
a single directory hierarchy of source code. The monolithic architecture isn’t inher-
ently bad. The FTGO developers made a good decision when they picked monolithic
architecture for their application. 
1.1.2
The benefits of the monolithic architecture
In the early days of FTGO, when the application was relatively small, the application’s
monolithic architecture had lots of benefits:
Simple to develop—IDEs and other developer tools are focused on building a sin-
gle application.
Easy to make radical changes to the application—You can change the code and the
database schema, build, and deploy.
Straightforward to test—The developers wrote end-to-end tests that launched the
application, invoked the REST API, and tested the UI with Selenium.
Straightforward to deploy—All a developer had to do was copy the WAR file to a
server that had Tomcat installed.
Easy to scale—FTGO ran multiple instances of the application behind a load
balancer.
Over time, though, development, testing, deployment, and scaling became much more
difficult. Let’s look at why. 
1.1.3
Living in monolithic hell
Unfortunately, as the FTGO developers have discovered, the monolithic architecture
has a huge limitation. Successful applications like the FTGO application have a habit
of outgrowing the monolithic architecture. Each sprint, the FTGO development team
implemented a few more stories, which made the code base larger. Moreover, as the
company became more successful, the size of the development team steadily grew.
Not only did this increase the growth rate of the code base, it also increased the man-
agement overhead.
 As figure 1.2 shows, the once small, simple FTGO application has grown over the
years into a monstrous monolith. Similarly, the small development team has now
become multiple Scrum teams, each of which works on a particular functional area.
As a result of outgrowing its architecture, FTGO is in monolithic hell. Development is
slow and painful. Agile development and deployment is impossible. Let’s look at why
this has happened.
COMPLEXITY INTIMIDATES DEVELOPERS
A major problem with the FTGO application is that it’s too complex. It’s too large for
any developer to fully understand. As a result, fixing bugs and correctly implementing
new features have become difficult and time consuming. Deadlines are missed.
 
