INDEX
488
Serverless framework 425–426
server-side discovery pattern 84–85
service API definition 61–64
assigning system operations to services
61–62
determining APIs required to support 
collaboration between services
62–64
Service as a container pattern 393–399
benefits of 398
Docker 395–398
building Docker images 395–396
pushing Docker images to registry
396–397
running Docker containers 397–398
drawbacks of 399
Service as a virtual machine pattern
390–393
benefits of 392
mature cloud infrastructure 392
service instances are isolated 392
VM image encapsulates technology 
stack 392
drawbacks of 392–393
less-efficient resource utilization 393
relatively slow deployments 393
system administration overhead 393
service component test 28, 335
service configurability 349
service definition 76
Decompose by business capability pattern
51–54
decomposition 52–54
identifying business capabilities 51–52
purpose of business capabilities 51
Decompose by sub-domain pattern
54–55
service deployment patterns 26
service discovery 80–85
3rd party registration 84–85, 108
Client-side discovery 82–83
overview of 81
Self registration 82
Server-side discovery 84–85
service meshes 380–382, 407–415
deploying v2 of Consumer Service 414
Istio 408–412
routing production traffic to v2 415
routing rules to route to v1 version
412–413
routing test traffic to v2 414
Service object, DDD 152
service() method 422
service-oriented architecture (SOA)
13–14
SES (Simple Email Service) 2
SessionBasedSecurityInterceptor 352
sessions 351
setUp() method 313
sharded channel 94
Shiro 351
Sidecar pattern 410
Simple Email Service (SES) 2
Single persistence layer 38
Single presentation layer 38
Single Responsibility Principle (SRP) 56
smart pipes 14
snapshots 195–196, 201
SOA (service-oriented architecture) 13
sociable unit test 308
software architecture 34–37
4+1 view model of 35–37
definition of 35
relevance of 37
software pattern 20
Software-as-a-Service (SaaS) 5
solitary unit test 308
SoundCloud 265
specialization pattern 22
Spring Cloud Contract 303–305
Spring Cloud Gateway 273–275
ApiGatewayApplication class 279
OrderConfiguration class 275–276
OrderHandlers class 276–278
OrderService class 278–279
Spring Mock MVC 314
Spring Security 351
SPRING_APPLICATION_JSON variable
363
SQL 237–238
SRP (Single Responsibility Principle) 56
state machines
modeling saga orchestrators as
123–124
Order aggregate 176–177
Strangler Application pattern 431–432
Strategy pattern 20
stubs 296, 339–340
successor pattern 21
SUT (system under test) 294
synchronous I/O model 268
synchronous interactions 67
system operations 45
assigning to services 61–62
creating high-level domain model 46–48
defining 48–50
identifying 45–50
system under test (SUT) 294
System.getenv() method 362
 
