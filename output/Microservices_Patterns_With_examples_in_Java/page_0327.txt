297
Testing strategies for microservice architectures
THE DIFFERENT TYPES OF TESTS
There are many different types of tests. Some tests, such as performance tests and
usability tests, verify that the application satisfies its quality of service requirements. In
this chapter, I focus on automated tests that verify the functional aspects of the appli-
cation or service. I describe how to write four different types of tests:
Unit tests—Test a small part of a service, such as a class.
Integration tests—Verify that a service can interact with infrastructure services
such as databases and other application services.
Component tests—Acceptance tests for an individual service.
End-to-end tests—Acceptance tests for the entire application.
They differ primarily in scope. At one end of the spectrum are unit tests, which verify
behavior of the smallest meaningful program element. For an object-oriented lan-
guage such as Java, that’s a class. At the other end of the spectrum are end-to-end
tests, which verify the behavior of an entire application. In the middle are component
tests, which test individual services. Integration tests, as you’ll see in the next chapter,
have a relatively small scope, but they’re more complex than pure unit tests. Scope is
only one way of characterizing tests. Another way is to use the test quadrant.
USING THE TEST QUADRANT TO CATEGORIZE TESTS
A good way to categorize tests is Brian Marick’s test quadrant (www.exampler.com/old-
blog/2003/08/21/#agile-testing-project-1). The test quadrant, shown in figure 9.4,
categorizes tests along two dimensions:
Whether the test is business facing or technology facing—A business-facing test is
described using the terminology of a domain expert, whereas a technology-facing
test is described using the terminology of developers and the implementation.
Whether the goal of the test is to support programming or critique the application—Devel-
opers use tests that support programming as part of their daily work. Tests that
critique the application aim to identify areas that need improvement.
Compile-time unit tests
Testing is an integral part of development. The modern development workflow is to
edit code, then run tests. Moreover, if you’re a Test-Driven Development (TDD) prac-
titioner, you develop a new feature or fix a bug by first writing a failing test and then
writing the code to make it pass. Even if you’re not a TDD adherent, an excellent way
to fix a bug is to write a test that reproduces the bug and then write the code that
fixes it.
The tests that you run as part of this workflow are known as compile-time tests. In a
modern IDE, such as IntelliJ IDEA or Eclipse, you typically don’t compile your code as
a separate step. Rather, you use a single keystroke to compile the code and run the
tests. In order to stay in the flow, these tests need to execute quickly—ideally, no
more than a few seconds. 
 
