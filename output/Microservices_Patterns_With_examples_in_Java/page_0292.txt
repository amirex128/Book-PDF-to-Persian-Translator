262
CHAPTER 8
External API patterns
PROTOCOL TRANSLATION
An API gateway might also perform protocol translation. It might provide a RESTful
API to external clients, even though the application services use a mixture of protocols
internally, including REST and gRPC. When needed, the implementation of some
API operations translates between the RESTful external API and the internal gRPC-
based APIs. 
THE API GATEWAY PROVIDES EACH CLIENT WITH CLIENT-SPECIFIC API
An API gateway could provide a single one-size-fits-all (OSFA) API. The problem with
a single API is that different clients often have different requirements. For instance, a
third-party application might require the Get Order Details API operation to return
the complete Order details, whereas a mobile client only needs a subset of the data.
One way to solve this problem is to give clients the option of specifying in a request
which fields and related objects the server should return. This approach is adequate
for a public API that must serve a broad range of third-party applications, but it often
doesn’t give clients the control they need.
 A better approach is for the API gateway to provide each client with its own API.
For example, the FTGO API gateway can provide the FTGO mobile client with an API
that’s specifically designed to meet its requirements. It may even have different APIs
for the Android and iPhone mobile applications. The API gateway will also implement
a public API for third-party developers to use. Later on, I’ll describe the Backends for
frontends pattern that takes this concept of an API-per-client even further by defining
a separate API gateway for each client. 
IMPLEMENTING EDGE FUNCTIONS
Although an API gateway’s primary responsibilities are API routing and composition,
it may also implement what are known as edge functions. An edge function is, as the
name suggests, a request-processing function implemented at the edge of an applica-
tion. Examples of edge functions that an application might implement include the
following:
Authentication—Verifying the identity of the client making the request.
Authorization—Verifying that the client is authorized to perform that particular
operation.
Rate limiting —Limiting how many requests per second from either a specific cli-
ent and/or from all clients.
Caching—Cache responses to reduce the number of requests made to the services.
Metrics collection—Collect metrics on API usage for billing analytics purposes.
Request logging—Log requests.
There are three different places in your application where you could implement these
edge functions. First, you can implement them in the backend services. This might
make sense for some functions, such as caching, metrics collection, and possibly autho-
rization. But it’s generally more secure if the application authenticates requests on the
edge before they reach the services.
 
