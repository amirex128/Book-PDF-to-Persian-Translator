INDEX
480
event store implementation (continued)
defining aggregates with ReflectiveMutable-
CommandProcessingAggregate 
class 206–207
defining domain events 207
subscribing to domain events 208–209
Eventuate Local event store 203–205
consuming events by subscribing to event 
broker 205
event relay propagates events from database 
to message broker 205
schema 203–205
event storming 162
event-driven I/O 269
@EventHandlerMethod annotation 208
events. See Domain events
@EventSubscriber annotation 208
Eventuate framework 101, 202, 205–209
and updating aggregates with the Aggregate-
Repository class 207–208
defining aggregate commands 207
defining aggregates with ReflectiveMutable-
CommandProcessingAggregate class
206–207
defining domain events 207
subscribing to domain events 208–209
Eventuate Local event store 203–205
consuming events by subscribing to event 
broker 205
event relay propagates events from database to 
message broker 205
schema 203–205
Eventuate Tram 100, 166
Eventuate Tram Saga framework 140–142
Exception tracking pattern 28, 366, 376–377
Express framework 289–290
external API patterns 253–291
API gateway 76, 227, 254, 259–272
API gateway implementation 271–291
using GraphQL 279–291
using Netflix Zuul 273
using off-the-shelf products/services 271–272
using Spring Cloud Gateway 273–275
API gateway pattern 76, 227, 254, 259–271
benefits of 267
design issues 268–271
drawbacks of 267
Netflix example 267–268
overview of 259–266
Backends for frontends 254, 262, 264–266
design issues 254–259
browser-based JavaScript applications 258
FTGO mobile client 255–258
third-party applications 258–259
web applications 258
externalized configuration 361
pull-based 363–364
push-based 262–263
Externalized Configuration pattern 28, 361
F
Factory object, DDD 151
fault isolation 6
feature flags 469
feature toggles 469
filter expression 247
filter parameter 229
find() operation 204
findAvailableRestaurants() query operation 231
findCustomerContactInfo() method 447
findOrder() operation 221–222, 224
findOrderHistory() query operation 229–231, 
251–252
defining index for 245–247
implementing 247
FindRestaurantRequestHandler class 421–422
Fission framework 416
Fluentd 370
Flume 370
fold operation 187
FTGO application
API design issues for mobile client 255–258
changing monolith to interact with Delivery 
Service 467–470
component tests for Order Service 340–345
deploying with Kubernetes 399–415
API gateway 405–406
Restaurant Service 402–405
service meshes 407–415
zero-downtime deployments 406–407
microservice architecture of 12–13
monolithic architecture of 3–4
ftgo-db-secret 404
FtgoGraphQLClient class 290
functional decomposition 10
fuzzy boundaries 153–154
G
GDPR (General Data Protection Regulation) 201
generalization pattern 22
GET REST endpoint 271
getDelayedOrders() method 456
getOrderDetails() query 368
Gherkin
executing specifications using Cucumber 338
writing acceptance tests 337–338
Go Kit 380
god classes 58–61
 
