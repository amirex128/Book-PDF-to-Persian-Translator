75
Communicating using the synchronous Remote procedure invocation pattern
enable the client to retrieve multiple related objects in a single request. For example,
imagine that a REST client wanted to retrieve an Order and the Order's Consumer. A
pure REST API would require the client to make at least two requests, one for the
Order and another for its Consumer. A more complex scenario would require even
more round-trips and suffer from excessive latency.
 One solution to this problem is for an API to allow the client to retrieve related
resources when it gets a resource. For example, a client could retrieve an Order and its
Consumer using GET /orders/order-id-1345?expand=consumer. The query parame-
ter specifies the related resources to return with the Order. This approach works well
in many scenarios but it’s often insufficient for more complex scenarios. It’s also
potentially time consuming to implement. This has led to the increasing popularity of
alternative API technologies such as GraphQL (http://graphql.org) and Netflix Falcor
(http://netflix.github.io/falcor/), which are designed to support efficient data fetching. 
THE CHALLENGE OF MAPPING OPERATIONS TO HTTP VERBS
Another common REST API design problem is how to map the operations you want
to perform on a business object to an HTTP verb. A REST API should use PUT for
updates, but there may be multiple ways to update an order, including cancelling it,
revising the order, and so on. Also, an update might not be idempotent, which is a
requirement for using PUT. One solution is to define a sub-resource for updating a
particular aspect of a resource. The Order Service, for example, has a POST /orders/
{orderId}/cancel endpoint for cancelling orders, and a POST /orders/{orderId}/
revise endpoint for revising orders. Another solution is to specify a verb as a URL
query parameter. Sadly, neither solution is particularly RESTful.
 This problem with mapping operations to HTTP verbs has led to the growing pop-
ularity of alternatives to REST, such as gPRC, discussed shortly in section 3.2.2. But
first let’s look at the benefits and drawbacks of REST. 
BENEFITS AND DRAWBACKS OF REST
There are numerous benefits to using REST:
It’s simple and familiar.
You can test an HTTP API from within a browser using, for example, the Post-
man plugin, or from the command line using curl (assuming JSON or some
other text format is used).
It directly supports request/response style communication.
HTTP is, of course, firewall friendly.
It doesn’t require an intermediate broker, which simplifies the system’s archi-
tecture.
There are some drawbacks to using REST:
It only supports the request/response style of communication.
Reduced availability. Because the client and service communicate directly with-
out an intermediary to buffer messages, they must both be running for the
duration of the exchange.
 
