28 
Part One  Introduction	
2—Why Is Software Architecture Important?
Obviously, local changes are the most desirable, and so an effective architec-
ture is one in which the most common changes are local, and hence easy to make. 
Deciding when changes are essential, determining which change paths have 
the least risk, assessing the consequences of proposed changes, and arbitrating 
sequences and priorities for requested changes all require broad insight into rela-
tionships, performance, and behaviors of system software elements. These activ-
ities are in the job description for an architect. Reasoning about the architecture 
and analyzing the architecture can provide the insight necessary to make deci-
sions about anticipated changes. 
2.3  Predicting System Qualities 
This point follows from the previous two. Architecture not only imbues systems 
with qualities, but it does so in a predictable way. 
Were it not possible to tell that the appropriate architectural decisions have 
been made (i.e., if the system will exhibit its required quality attributes) without 
waiting until the system is developed and deployed, then choosing an architec-
ture would be a hopeless task—randomly making architecture selections would 
perform as well as any other method. Fortunately, it is possible to make quality 
predictions about a system based solely on an evaluation of its architecture. If we 
know that certain kinds of architectural decisions lead to certain quality attributes 
in a system, then we can make those decisions and rightly expect to be rewarded 
with the associated quality attributes. After the fact, when we examine an archi-
tecture, we can look to see if those decisions have been made, and confidently 
predict that the architecture will exhibit the associated qualities.
This is no different from any mature engineering discipline, where design 
analysis is a standard part of the development process. The earlier you can find 
a problem in your design, the cheaper, easier, and less disruptive it will be to fix.
Even if you don't do the quantitative analytic modeling sometimes necessary 
to ensure that an architecture will deliver its prescribed benefits, this principle of 
evaluating decisions based on their quality attribute implications is invaluable for 
at least spotting potential trouble spots early.
The architecture modeling and analysis techniques described in Chap-
ter 14, as well as the architecture evaluation techniques covered in Chapter 21, 
allow early insight into the software product qualities made possible by software 
architectures.
