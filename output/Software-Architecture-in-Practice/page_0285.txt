264 
Part Two  Quality Attributes	
14—Quality Attribute Modeling and Analysis
■
■Are there mechanisms to prevent or avoid that problem? 
■
■Are there mechanisms to repair or recover from that problem if it occurs? 
■
■Is this a problem we are willing to live with? 
The problems hypothesized are scrutinized in terms of a cost/benefit analy-
sis. That is, what is the cost of preventing this problem compared to the benefits 
that accrue if the problem does not occur?
As you might have gathered, if the architects are being thorough and if the 
problems are significant (that is, they present a large risk for the system), then 
these discussions can continue for a long time. The discussions are a normal por-
tion of design and analysis and will naturally occur, even if only in the mind of a 
single designer. On the other hand, the time spent performing a particular thought 
experiment should be bounded. This sounds obvious, but every grey-haired archi-
tect can tell you war stories about being stuck in endless meetings, trapped in the 
purgatory of “analysis paralysis.” 
Analysis paralysis can be avoided with several techniques:
■
■“Time boxing”: setting a deadline on the length of a discussion.
■
■Estimating the cost if the problem occurs and not spending more than that 
cost in the analysis. In other words, do not spend an inordinate amount of 
time in discussing minor or unlikely potential problems. 
Prioritizing the requirements will help both with the cost estimation and 
with the time estimation.
14.4  Experiments, Simulations, and Prototypes
In many environments it is virtually impossible to do a purely top-down architec-
tural design; there are too many considerations to weigh at once and it is too hard 
to predict all of the relevant technological barriers. Requirements may change in 
dramatic ways, or a key assumption may not be met: We have seen cases where a 
vendor-provided API did not work as specified, or where an API exposing a criti-
cal function was simply missing. 
Finding the sweet spot within the enormous architectural design space of 
complex systems is not feasible by reflection and mathematical analysis alone; 
the models either aren’t precise enough to deal with all of the relevant details or 
are so complicated that they are impractical to analyze with tractable mathemat-
ical techniques. 
The purpose of experiments, simulations, and prototypes is to provide al-
ternative ways of analyzing the architecture. These techniques are invaluable in 
