136 
Part Two  Quality Attributes	
8—Performance
■
■Processing time. Processing consumes resources, which takes time. Events 
are handled by the execution of one or more components, whose time 
expended is a resource. Hardware resources include CPU, data stores, 
network communication bandwidth, and memory. Software resources 
include entities defined by the system under design. For example, buffers 
must be managed and access to critical sections1 must be made sequential. 
For example, suppose a message is generated by one component. It 
might be placed on the network, after which it arrives at another compo-
nent. It is then placed in a buffer; transformed in some fashion; processed 
according to some algorithm; transformed for output; placed in an output 
buffer; and sent onward to another component, another system, or some 
actor. Each of these steps consumes resources and time and contributes to 
the overall latency of the processing of that event.
Different resources behave differently as their utilization approaches 
their capacity—that is, as they become saturated. For example, as a CPU 
becomes more heavily loaded, performance usually degrades fairly steadily. 
On the other hand, when you start to run out of memory, at some point the 
page swapping becomes overwhelming and performance crashes suddenly.
■
■Blocked time. A computation can be blocked because of contention for some 
needed resource, because the resource is unavailable, or because the compu-
tation depends on the result of other computations that are not yet available:
■
■Contention for resources. Many resources can only be used by a single 
client at a time. This means that other clients must wait for access to 
those resources. Figure 8.2 shows events arriving at the system. These 
events may be in a single stream or in multiple streams. Multiple streams 
vying for the same resource or different events in the same stream vying 
for the same resource contribute to latency. The more contention for a 
resource, the more likelihood of latency being introduced. 
■
■Availability of resources. Even in the absence of contention, computation 
cannot proceed if a resource is unavailable. Unavailability may be caused 
by the resource being offline or by failure of the component or for some 
other reason. In any case, you must identify places where resource un-
availability might cause a significant contribution to overall latency. Some 
of our tactics are intended to deal with this situation.
■
■Dependency on other computation. A computation may have to wait 
because it must synchronize with the results of another computation or 
because it is waiting for the results of a computation that it initiated. If a 
component calls another component and must wait for that component to 
respond, the time can be significant if the called component is at the other 
end of a network (as opposed to co-located on the same processor).
1.   A critical section is a section of code in a multi-threaded system in which at most one thread may 
be active at any time.
