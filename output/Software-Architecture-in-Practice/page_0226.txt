13.2  Overview of the Patterns Catalog
205
The solution description should also make clear what quality attributes are 
provided by the static and runtime configurations of elements.
This {context, problem, solution} form constitutes a template for document-
ing a pattern. 
Complex systems exhibit multiple patterns at once. A web-based system 
might employ a three-tier client-server architectural pattern, but within this pat-
tern it might also use replication (mirroring), proxies, caches, firewalls, MVC, 
and so forth, each of which may employ more patterns and tactics. And all of 
these parts of the client-server pattern likely employ layering to internally struc-
ture their software modules.
13.2  Overview of the Patterns Catalog
In this section we list an assortment of useful and widely used patterns. This cata-
log is not meant to be exhaustive—in fact no such catalog is possible. Rather it is 
meant to be representative. We show patterns of runtime elements (such as broker 
or client-server) and of design-time elements (such as layers). For each pattern 
we list the context, problem, and solution. As part of the solution, we briefly de-
scribe the elements, relations, and constraints of each pattern. 
Applying a pattern is not an all-or-nothing proposition. Pattern definitions 
given in catalogs are strict, but in practice architects may choose to violate them 
in small ways when there is a good design tradeoff to be had (sacrificing a little 
of whatever the violation cost, but gaining something that the deviation gained). 
For example, the layered pattern expressly forbids software in lower layers from 
using software in upper layers, but there may be cases (such as to gain some per-
formance) when an architecture might allow a few specific exceptions. 
Patterns can be categorized by the dominant type of elements that they 
show: module patterns show modules, component-and-connector (C&C) patterns 
show components and connectors, and allocation patterns show a combination 
of software elements (modules, components, connectors) and nonsoftware ele-
ments. Most published patterns are C&C patterns, but there are module patterns 
and allocation patterns as well. We’ll begin with the granddaddy of module pat-
terns, the layered pattern.
Module Patterns
Layered Pattern
Context: All complex systems experience the need to develop and evolve por-
tions of the system independently. For this reason the developers of the system 
need a clear and well-documented separation of concerns, so that modules of the 
system may be independently developed and maintained. 
