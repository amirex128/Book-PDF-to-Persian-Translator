7.2  Tactics for Modifiability
123
Reduce the Size of a Module
■
■Split module. If the module being modified includes a great deal of capa-
bility, the modification costs will likely be high. Refining the module into 
several smaller modules should reduce the average cost of future changes. 
Increase Cohesion
Several tactics involve moving responsibilities from one module to another. The 
purpose of moving a responsibility from one module to another is to reduce the 
likelihood of side effects affecting other responsibilities in the original module.
■
■Increase semantic coherence. If the responsibilities A and B in a module 
do not serve the same purpose, they should be placed in different modules. 
This may involve creating a new module or it may involve moving a re-
sponsibility to an existing module. One method for identifying responsibil-
ities to be moved is to hypothesize likely changes that affect a module. If 
some responsibilities are not affected by these changes, then those responsi-
bilities should probably be removed.
Reduce Coupling
We now turn to tactics that reduce the coupling between modules.
■
■Encapsulate. Encapsulation introduces an explicit interface to a module. 
This interface includes an application programming interface (API) and its 
associated responsibilities, such as “perform a syntactic transformation on 
an input parameter to an internal representation.” Perhaps the most common 
modifiability tactic, encapsulation reduces the probability that a change to 
one module propagates to other modules. The strengths of coupling that 
previously went to the module now go to the interface for the module. 
These strengths are, however, reduced because the interface limits the ways 
in which external responsibilities can interact with the module (perhaps 
through a wrapper). The external responsibilities can now only directly in-
teract with the module through the exposed interface (indirect interactions, 
however, such as dependence on quality of service, will likely remain un-
changed). Interfaces designed to increase modifiability should be abstract 
with respect to the details of the module that are likely to change—that is, 
they should hide those details. 
■
■Use an intermediary breaks a dependency. Given a dependency between re-
sponsibility A and responsibility B (for example, carrying out A first requires 
carrying out B), the dependency can be broken by using an intermediary. 
The type of intermediary depends on the type of dependency. For example, 
a publish-subscribe intermediary will remove the data producer’s knowledge 
