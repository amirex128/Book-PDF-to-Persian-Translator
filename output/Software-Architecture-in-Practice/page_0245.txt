224 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
In practice, SOA environments may involve a mix of the three connectors 
just listed, along with legacy protocols and other communication alternatives 
(e.g., SMTP). Commercial products such as IBM’s WebSphere MQ, Microsoft’s 
MSMQ, or Apache’s ActiveMQ are infrastructure components that provide asyn-
chronous messaging. SOAP and REST are described in more detail in Chapter 6.
As you can see, the SOA pattern can be quite complex to design and im-
plement (due to dynamic binding and the concomitant use of metadata). Other 
potential problems with this pattern include the performance overhead of the 
middleware that is interposed between services and clients and the lack of perfor-
mance guarantees (because services are shared and, in general, not under control 
of the requester). These weaknesses are all shared with the broker pattern, which 
is not surprising because the SOA pattern shares many of the design concepts and 
goals of broker. In addition, because you do not, in general, control the evolution 
of the services that you use, you may have to endure high and unplanned-for 
maintenance costs. 
Table 13.7 summarizes the SOA pattern.
The main benefit and the major driver of SOA is interoperability. Because 
service providers and service consumers may run on different platforms, ser-
vice-oriented architectures often integrate a variety of systems, including legacy 
systems. SOA also offers the necessary elements to interact with external ser-
vices available over the Internet. Special SOA components such as the registry or 
the ESB also allow dynamic reconfiguration, which is useful when there’s a need 
to replace or add versions of components with no system interruption. 
Figure 13.11 shows the SOA view of a system called Adventure Builder. 
Adventure Builder allows a customer on the web to assemble a vacation by 
choosing an activity and lodging at and transportation to a destination. The Ad-
venture Builder system interacts with external service providers to construct the 
vacation, and with bank services to process payment. The central OPC (Order 
Processing Center) component coordinates the interaction with internal and ex-
ternal service consumers and providers. Note that the external providers can be 
legacy mainframe systems, Java systems, .NET systems, and so on. The nature of 
these external components is transparent because SOAP provides the necessary 
interoperability. 
