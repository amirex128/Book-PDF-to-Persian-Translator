13.2  Overview of the Patterns Catalog
219
actions, possibly providing a return result. However, variants of the client-server 
pattern may employ more-sophisticated connector protocols. For example:
■
■Web browsers don’t block until the data request is served up.
■
■In some client-server patterns, servers are permitted to initiate certain 
actions on their clients. This might be done by allowing a client to register 
notification procedures, or callbacks, that the server calls at specific times. 
■
■In other systems service calls over a request/reply connector are bracketed 
by a “session” that delineates the start and end of a set of a client-server 
interaction.
The client-server pattern separates client applications from the services they 
use. This pattern simplifies systems by factoring out common services, which are 
reusable. Because servers can be accessed by any number of clients, it is easy 
to add new clients to a system. Similarly, servers may be replicated to support 
scalability or availability. 
The World Wide Web is the best-known example of a system that is based on 
the client-server pattern, allowing clients (web browsers) to access information 
from servers across the Internet using HyperText Transfer Protocol (HTTP). 
HTTP is a request/reply protocol. HTTP is stateless; the connection between the 
client and the server is terminated after each response from the server.
Figure 13.9 uses an informal notation to describe the client-server view of 
an automatic teller machine (ATM) banking system.
server
Server
TCP socket connector with
client and server ports
FTX server
daemon
ATM OS/2
client process
Windows
application
client
client
client
Client
client
client
server server
server
server
Key:
Bank
transaction
authorizer
ATM
monitoring
server
ATM
reconfiguration
server
ATM main
process
Reconfigure
and update
process
Monitoring
station
program
Figure 13.9  The client-server architecture of an ATM banking system 
