22 
Part One  Introduction	
1—What Is Software Architecture?
A structure is a set of elements and the relations among them.
A view is a representation of a coherent set of architectural elements, as 
written by and read by system stakeholders. A view is a representation of one or 
more structures. 
There are three categories of structures:
■
■Module structures show how a system is to be structured as a set of code or 
data units that have to be constructed or procured. 
■
■Component-and-connector structures show how the system is to be 
structured as a set of elements that have runtime behavior (components) and 
interactions (connectors). 
■
■Allocation structures show how the system will relate to nonsoftware 
structures in its environment (such as CPUs, file systems, networks, 
development teams, etc.). 
Structures represent the primary engineering leverage points of an architec-
ture. Each structure brings with it the power to manipulate one or more quality 
attributes. They represent a powerful approach for creating the architecture (and 
later, for analyzing it and explaining it to its stakeholders). And as we will see 
in Chapter 18, the structures that the architect has chosen as engineering lever-
age points are also the primary candidates to choose as the basis for architecture 
documentation. 
Every system has a software architecture, but this architecture may be docu-
mented and disseminated, or it may not be.
There is no such thing as an inherently good or bad architecture. Architec-
tures are either more or less fit for some purpose. 
1.6  For Further Reading
The early work of David Parnas laid much of the conceptual foundation for what 
became the study of software architecture. A quintessential Parnas reader would 
include his foundational article on information hiding [Parnas 72] as well as his 
works on program families [Parnas 76], the structures inherent in software sys-
tems [Parnas 74], and introduction of the uses structure to build subsets and sup-
ersets of systems [Parnas 79]. All of these papers can be found in the more easily 
accessible collection of his important papers [Hoffman 00].
An early paper by Perry and Wolf [Perry 92] drew an analogy between soft-
ware architecture views and structures and the structures one finds in a house 
(plumbing, electrical, and so forth). 
Software architectural patterns have been extensively catalogued in the se-
ries Pattern-Oriented Software Architecture [Buschmann 96] and others. Chapter 
13 of this book also deals with architectural patterns.
