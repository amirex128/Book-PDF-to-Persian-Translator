96 
Part Two  Quality Attributes	
5—Availability
5.3  A Design Checklist for Availability
Table 5.4 is a checklist to support the design and analysis process for availability.
Table 5.4  Checklist to Support the Design and Analysis Process for 
Availability
Category
Checklist
Allocation of 
Responsibilities
Determine the system responsibilities that need to be highly 
available. Within those responsibilities, ensure that additional 
responsibilities have been allocated to detect an omission, 
crash, incorrect timing, or incorrect response. Additionally, 
ensure that there are responsibilities to do the following:
■
■
Log the fault
■
■
Notify appropriate entities (people or systems)
■
■
Disable the source of events causing the fault
■
■
Be temporarily unavailable
■
■
Fix or mask the fault/failure
■
■
Operate in a degraded mode
Coordination Model
Determine the system responsibilities that need to be highly 
available. With respect to those responsibilities, do the 
following: 
■
■
Ensure that coordination mechanisms can detect an 
omission, crash, incorrect timing, or incorrect response. 
Consider, for example, whether guaranteed delivery is 
necessary. Will the coordination work under conditions of 
degraded communication?
■
■
Ensure that coordination mechanisms enable the logging 
of the fault, notification of appropriate entities, disabling of 
the source of the events causing the fault, fixing or masking 
the fault, or operating in a degraded mode.
■
■
Ensure that the coordination model supports the replace-
ment of the artifacts used (processors, communications 
channels, persistent storage, and processes). For exam-
ple, does replacement of a server allow the system to 
continue to operate? 
■
■
Determine if the coordination will work under conditions 
of degraded communication, at startup/shutdown, in re-
pair mode, or under overloaded operation. For example, 
how much lost information can the coordination model 
withstand and with what consequences?
Data Model
Determine which portions of the system need to be highly 
available. Within those portions, determine which data 
abstractions, along with their operations or their properties, 
could cause a fault of omission, a crash, incorrect timing 
behavior, or an incorrect response.
For those data abstractions, operations, and properties, 
ensure that they can be disabled, be temporarily unavailable, 
or be fixed or masked in the event of a fault.
For example, ensure that write requests are cached if a 
server is temporarily unavailable and performed when the 
server is returned to service.
