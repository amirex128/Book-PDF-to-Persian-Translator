220 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
Peer-to-Peer Pattern
Context: Distributed computational entities—each of which is considered 
equally important in terms of initiating an interaction and each of which provides 
its own resources—need to cooperate and collaborate to provide a service to a 
distributed community of users.
Problem: How can a set of “equal” distributed computational entities be con-
nected to each other via a common protocol so that they can organize and share 
their services with high availability and scalability?
Solution: In the peer-to-peer (P2P) pattern, components directly interact as 
peers. All peers are “equal” and no peer or group of peers can be critical for 
the health of the system. Peer-to-peer communication is typically a request/
reply interaction without the asymmetry found in the client-server pattern. 
That is, any component can, in principle, interact with any other component by 
requesting its services. The interaction may be initiated by either party—that 
is, in client-server terms, each peer component is both a client and a server. 
Sometimes the interaction is just to forward data without the need for a reply. 
Each peer provides and consumes similar services and uses the same protocol. 
Connectors in peer-to-peer systems involve bidirectional interactions, reflecting 
the two-way communication that may exist between two or more peer-to-peer 
components. 
Peers first connect to the peer-to-peer network on which they discover other 
peers they can interact with, and then initiate actions to achieve their computation 
by cooperating with other peers by requesting services. Often a peer’s search for 
another peer is propagated from one peer to its connected peers for a limited 
number of hops. A peer-to-peer architecture may have specialized peer nodes 
(called supernodes) that have indexing or routing capabilities and allow a regular 
peer’s search to reach a larger number of peers. 
Peers can be added and removed from the peer-to-peer network with no sig-
nificant impact, resulting in great scalability for the whole system. This provides 
flexibility for deploying the system across a highly distributed platform.
Typically multiple peers have overlapping capabilities, such as providing 
access to the same data or providing equivalent services. Thus, a peer acting as 
client can collaborate with multiple peers acting as servers to complete a certain 
task. If one of these multiple peers becomes unavailable, the others can still pro-
vide the services to complete the task. The result is improved overall availability. 
There are also performance advantages: The load on any given peer component 
acting as a server is reduced, and the responsibilities that might have required 
more server capacity and infrastructure to support it are distributed. This can de-
crease the need for other communication for updating data and for central server 
storage, but at the expense of storing the data locally.
