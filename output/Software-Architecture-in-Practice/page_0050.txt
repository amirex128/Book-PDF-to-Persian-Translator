2.4  Enhancing Communication among Stakeholders
29
2.4  Enhancing Communication among Stakeholders
Software architecture represents a common abstraction of a system that most, 
if not all, of the system’s stakeholders can use as a basis for creating mutual under-
standing, negotiating, forming consensus, and communicating with each other. The 
architecture—or at least parts of it—is sufficiently abstract that most nontechnical 
people can understand it adequately, particularly with some coaching from the archi-
tect, and yet that abstraction can be refined into sufficiently rich technical specifica-
tions to guide implementation, integration, test, and deployment.
Each stakeholder of a software system—customer, user, project manager, 
coder, tester, and so on—is concerned with different characteristics of the system 
that are affected by its architecture. For example:
■
■The user is concerned that the system is fast, reliable, and available when 
needed. 
■
■The customer is concerned that the architecture can be implemented on 
schedule and according to budget.
■
■The manager is worried (in addition to concerns about cost and schedule) 
that the architecture will allow teams to work largely independently, 
interacting in disciplined and controlled ways.
■
■The architect is worried about strategies to achieve all of those goals. 
Architecture provides a common language in which different concerns can 
be expressed, negotiated, and resolved at a level that is intellectually manageable 
even for large, complex systems. Without such a language, it is difficult to under-
stand large systems sufficiently to make the early decisions that influence both 
quality and usefulness. Architectural analysis, as we will see in Chapter 21, both 
depends on this level of communication and enhances it.
Section 3.5 covers stakeholders and their concerns in greater depth.
“What Happens When I Push This Button?” Architecture as a 
Vehicle for Stakeholder Communication
The project review droned on and on. The government-sponsored devel-
opment was behind schedule and over budget and was large enough that 
these lapses were attracting congressional attention. And now the govern-
ment was making up for past neglect by holding a marathon come-one-
come-all review session. The contractor had recently undergone a buyout, 
which hadn’t helped matters. It was the afternoon of the second day, and 
the agenda called for the software architecture to be presented. The young 
architect—an apprentice to the chief architect for the system—was bravely 
explaining how the software architecture for the massive system would 
enable it to meet its very demanding real-time, distributed, high-reliability 
