162 
Part Two  Quality Attributes	
10—Testability
Testing of code is a special case of validation, which is making sure that an 
engineered artifact meets the needs of its stakeholders or is suitable for use. In 
Chapter 21 we will discuss architectural design reviews. This is another kind of 
validation, where the artifact being tested is the architecture. In this chapter we 
are concerned only with the testability of a running system and of its source code. 
10.1  Testability General Scenario
We can now describe the general scenario for testability.
■
■Source of stimulus. The testing is performed by unit testers, integration 
testers, or system testers (on the developing organization side), or 
acceptance testers and end users (on the customer side). The source could 
be human or an automated tester.
■
■Stimulus. A set of tests is executed due to the completion of a coding incre-
ment such as a class layer or service, the completed integration of a subsys-
tem, the complete implementation of the whole system, or the delivery of 
the system to the customer.
■
■Artifact. A unit of code (corresponding to a module in the architecture), a 
subsystem, or the whole system is the artifact being tested. 
■
■Environment. The test can happen at development time, at compile time, at 
deployment time, or while the system is running (perhaps in routine use). The 
environment can also include the test harness or test environments in use.
■
■Response. The system can be controlled to perform the desired tests and the 
results from the test can be observed. 
■
■Response measure. Response measures are aimed at representing how eas-
ily a system under test “gives up” its faults. Measures might include the 
effort involved in finding a fault or a particular class of faults, the effort 
required to test a given percentage of statements, the length of the longest 
test chain (a measure of the difficulty of performing the tests), measures of 
effort to perform the tests, measures of effort to actually find faults, esti-
mates of the probability of finding additional faults, and the length of time 
or amount of effort to prepare the test environment. 
Maybe one measure is the ease at which the system can be brought into 
a specific state. In addition, measures of the reduction in risk of the remain-
ing errors in the system can be used. Not all faults are equal in terms of 
their possible impact. Measures of risk reduction attempt to rate the severity 
of faults found (or to be found). 
Figure 10.2 shows a concrete scenario for testability. The unit tester com-
pletes a code unit during development and performs a test sequence whose results 
are captured and that gives 85 percent path coverage within three hours of testing. 
