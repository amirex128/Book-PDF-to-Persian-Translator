1.5  Summary
21
separation of concerns. The information-hiding modules should encapsulate 
things likely to change, thus insulating the software from the effects of 
those changes. Each module should have a well-defined interface that 
encapsulates or “hides” the changeable aspects from other software 
that uses its facilities. These interfaces should allow their respective 
development teams to work largely independently of each other. 
2.	
Unless your requirements are unprecedented—possible, but unlikely—your 
quality attributes should be achieved using well-known architectural pat-
terns and tactics (described in Chapter 13) specific to each attribute. 
3.	
The architecture should never depend on a particular version of a commer-
cial product or tool. If it must, it should be structured so that changing to a 
different version is straightforward and inexpensive. 
4.	
Modules that produce data should be separate from modules that consume 
data. This tends to increase modifiability because changes are frequently 
confined to either the production or the consumption side of data. If new 
data is added, both sides will have to change, but the separation allows for a 
staged (incremental) upgrade. 
5.	
Don’t expect a one-to-one correspondence between modules and compo-
nents. For example, in systems with concurrency, there may be multiple in-
stances of a component running in parallel, where each component is built 
from the same module. For systems with multiple threads of concurrency, 
each thread may use services from several components, each of which was 
built from a different module.
6.	
Every process should be written so that its assignment to a specific proces-
sor can be easily changed, perhaps even at runtime. 
7.	
The architecture should feature a small number of ways for components 
to interact. That is, the system should do the same things in the same way 
throughout. This will aid in understandability, reduce development time, 
increase reliability, and enhance modifiability. 
8.	
The architecture should contain a specific (and small) set of resource con-
tention areas, the resolution of which is clearly specified and maintained. 
For example, if network utilization is an area of concern, the architect 
should produce (and enforce) for each development team guidelines that 
will result in a minimum of network traffic. If performance is a concern, the 
architect should produce (and enforce) time budgets for the major threads. 
1.5  Summary
The software architecture of a system is the set of structures needed to reason 
about the system, which comprise software elements, relations among them, and 
properties of both.
