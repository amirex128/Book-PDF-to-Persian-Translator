188 
Part Two  Quality Attributes	
12—Other Quality Attributes
Monitorability
Monitorability deals with the ability of the operations staff to monitor the system 
while it is executing. Items such as queue lengths, average transaction processing 
time, and the health of various components should be visible to the operations 
staff so that they can take corrective action in case of potential problems. Sce-
narios will deal with a potential problem and its visibility to the operator, and 
potential corrective action. 
Safety
In 2009 an employee of the Shushenskaya hydroelectric power station in Siberia 
sent commands over a network to remotely, and accidentally, activate an unused 
turbine. The offline turbine created a “water hammer” that flooded and then de-
stroyed the plant and killed dozens of workers.
The thought that software could kill people used to belong in the realm of 
kitschy computers-run-amok science fiction. Sadly, it didn’t stay there. As soft-
ware has come to control more and more of the devices in our lives, software 
safety has become a critical concern.
Safety is not purely a software concern, but a concern for any system that 
can affect its environment. As such it receives mention in Section 12.3, where we 
discuss system quality attributes. But there are means to address safety that are 
wholly in the software realm, which is why we discuss it here as well. 
Software safety is about the software’s ability to avoid entering states that 
cause or lead to damage, injury, or loss of life to actors in the software’s envi-
ronment, and to recover and limit the damage when it does enter into bad states. 
Another way to put this is that safety is concerned with the prevention of and 
recovery from hazardous failures. Because of this, the architectural concerns with 
safety are almost identical to those for availability, which is also about avoiding 
and recovering from failures. Tactics for safety, then, overlap with those for avail-
ability to a large degree. Both comprise tactics to prevent failures and to detect 
and recover from failures that do occur.
Safety is not the same as reliability. A system can be reliable (consistent 
with its specification) but still unsafe (for example, when the specification ig-
nores conditions leading to unsafe action). In fact, paying careful attention to the 
specification for safety-critical software is perhaps the most powerful thing you 
can do to produce safe software. Failures and hazards cannot be detected, pre-
vented, or ameliorated if the software has not been designed with them in mind. 
Safety is frequently engineered by performing failure mode and effects analy-
sis, hazard analysis, and fault tree analysis. (These techniques are discussed in 
Chapter 5.) These techniques are intended to discover possible hazards that could 
result from the system’s operation and provide plans to cope with these hazards.
