252 
Part Two  Quality Attributes	
14—Quality Attribute Modeling and Analysis
and checklists are focused on particular quality attributes but can aid in the anal-
ysis of any system with respect to those attributes. Thought experiments, on the 
other hand, can consider multiple quality attributes simultaneously but are only 
applicable to the specific system under consideration.
14.1  Modeling Architectures to Enable 
Quality Attribute Analysis
Some quality attributes, most notably performance and availability, have well-un-
derstood, time-tested analytic models that can be used to assist in an analysis. 
By analytic model, we mean one that supports quantitative analysis. Let us first 
consider performance.
Analyzing Performance
In Chapter 12 we discussed the fact that models have parameters, which are val-
ues you can set to predict values about the entity being modeled (and in Chap-
ter 12 we showed how to use the parameters to help us derive tactics for the 
quality attribute associated with the model). As an example we showed a queuing 
model for performance as Figure 12.2, repeated here as Figure 14.1. The parame-
ters of this model are the following: 
■
■The arrival rate of events
■
■The chosen queuing discipline
■
■The chosen scheduling algorithm
■
■The service time for events
■
■The network topology 
■
■The network bandwidth
■
■The routing algorithm chosen
In this section, we discuss how such a model can be used to understand the 
latency characteristics of an architectural design. 
To apply this model in an analytical fashion, we also need to have previ-
ously made some architecture design decisions. We will use model-view-control-
ler as our example here. MVC, as presented in Section 13.2, says nothing about 
its deployment. That is, there is no specification of how the model, the view, and 
the controller are assigned to processes and processors; that’s not part of the pat-
tern’s concern. These and other design decisions have to be made to transform 
a pattern into an architecture. Until that happens, one cannot say anything with 
authority about how an MVC-based implementation will perform. For this exam-
ple we will assume that there is one instance each of the model, the view, and the 
controller, and that each instance is allocated to a separate processor. Figure 14.2 
shows MVC following this allocation scheme.
