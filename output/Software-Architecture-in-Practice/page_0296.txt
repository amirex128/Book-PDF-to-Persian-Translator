275
15
Architecture in Agile 
Projects
It is not the strongest of the species that survives, 
nor the most intelligent that survives. It is the 
one that is the most adaptable to change.
—Charles Darwin
Since their first appearance over a decade ago, the various flavors of Agile meth-
ods and processes have received increasing attention and adoption by the world-
wide software community. New software processes do not just emerge out of thin 
air; they evolve in response to a palpable need. In this case, the software develop-
ment world was responding to a need for projects to be more responsive to their 
stakeholders, to be quicker to develop functionality that users care about, to show 
more and earlier progress in a project’s life cycle, and to be less burdened by doc-
umenting aspects of a project that would inevitably change. Is any of this inimical 
to the use of architecture? We emphatically say “no.” In fact, the question for a 
software project is not “Should I do Agile or architecture?”, but rather questions 
such as “How much architecture should I do up front versus how much should 
I defer until the project’s requirements have solidified somewhat?”, “When and 
how should I refactor?”, and “How much of the architecture should I formally 
document, and when?” We believe that there are good answers to all of these 
questions, and that Agile and architecture are not just well suited to live together 
but in fact critical companions for many software projects.
The Agile software movement began to receive considerable public atten-
tion approximately a decade ago, with the release of the “Agile Manifesto.” Its 
roots extend at least a decade earlier than that, in practices such as Extreme Pro-
gramming and Scrum. The Agile Manifesto, originally signed by 17 developers, 
was however a brilliant public relations move; it is brief, pithy, and sensible:
