5.3  A Design Checklist for Availability
97
Category
Checklist
Mapping among 
Architectural Elements
Determine which artifacts (processors, communication 
channels, persistent storage, or processes) may produce 
a fault: omission, crash, incorrect timing, or incorrect 
response. 
Ensure that the mapping (or remapping) of architectural 
elements is flexible enough to permit the recovery from the 
fault. This may involve a consideration of the following:
■
■
Which processes on failed processors need to be reas-
signed at runtime 
■
■
Which processors, data stores, or communication chan-
nels can be activated or reassigned at runtime
■
■
How data on failed processors or storage can be served 
by replacement units
■
■
How quickly the system can be reinstalled based on the 
units of delivery provided
■
■
How to (re)assign runtime elements to processors, com-
munication channels, and data stores
■
■
When employing tactics that depend on redundancy of 
functionality, the mapping from modules to redundant 
components is important. For example, it is possible to 
write one module that contains code appropriate for both 
the active component and backup components in a pro-
tection group. 
Resource  
Management
Determine what critical resources are necessary to 
continue operating in the presence of a fault: omission, 
crash, incorrect timing, or incorrect response. Ensure 
there are sufficient remaining resources in the event of a 
fault to log the fault; notify appropriate entities (people or 
systems); disable the source of events causing the fault; 
be temporarily unavailable; fix or mask the fault/failure; 
operate normally, in startup, shutdown, repair mode, 
degraded operation, and overloaded operation.
Determine the availability time for critical resources, what 
critical resources must be available during specified time 
intervals, time intervals during which the critical resources 
may be in a degraded mode, and repair time for critical 
resources. Ensure that the critical resources are available 
during these time intervals.
For example, ensure that input queues are large enough 
to buffer anticipated messages if a server fails so that the 
messages are not permanently lost.
continues
