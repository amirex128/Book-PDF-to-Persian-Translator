10.6  Discussion Questions
173
Jeff Voas’s foundational work on testability and the relationship between 
testability and reliability is worthwhile. There are several papers to choose from, 
but [Voas 95] is a good start that will point you to others.
10.6  Discussion Questions
1.	
A testable system is one that gives up its faults easily. That is, if a system 
contains a fault, then it doesn’t take long or much effort to make that fault 
show up. On the other hand, fault tolerance is all about designing systems 
that jealously hide their faults; there, the whole idea is to make it very diffi-
cult for a system to reveal its faults. Is it possible to design a system that is 
both highly testable and highly fault tolerant, or are these two design goals 
inherently incompatible? Discuss.
2.	
“Once my system is in routine use by end users, it should not be highly 
testable, because if it still contains faults—and all systems probably do—
then I don’t want them to be easily revealed.” Discuss.
3.	
Many of the tactics for testability are also useful for achieving modifiabili-
ty. Why do you think that is?
4.	
Write some concrete testability scenarios for an automatic teller machine. 
How would you modify your design for the automatic teller machine to ac-
commodate these scenarios?
5.	
What other quality attributes do you think testability is most in conflict 
with? What other quality attributes do you think testability is most compati-
ble with?
6.	
One of our tactics is to limit nondeterminism. One method is to use locking 
to enforce synchronization. What impact does the use of locks have on oth-
er quality attributes?
7.	
Suppose you’re building the next great social networking system. You antic-
ipate that within a month of your debut, you will have half a million users. 
You can’t pay half a million people to test your system, and yet it has to be 
robust and easy to use when all half a million are banging away at it. What 
should you do? What tactics will help you? Write a testability scenario for 
this social networking system.
8.	
Suppose you use executable assertions to improve testability. Make a case 
for, and then a case against, allowing the assertions to run in the production 
system as opposed to removing them after testing.
