122 
Part Two  Quality Attributes	
7—Modifiability
■
■Coupling. Reducing the strength of the coupling between two modules A 
and B will decrease the expected cost of any modification that affects A. 
Tactics that reduce coupling are those that place intermediaries of various 
sorts between modules A and B.
■
■Cohesion. If module A has a low cohesion, then cohesion can be improved 
by removing responsibilities unaffected by anticipated changes. 
Finally we need to be concerned with when in the software development 
life cycle a change occurs. If we ignore the cost of preparing the architecture for 
the modification, we prefer that a change is bound as late as possible. Changes 
can only be successfully made (that is, quickly and at lowest cost) late in the 
life cycle if the architecture is suitably prepared to accommodate them. Thus the 
fourth and final parameter in a model of modifiability is this:
■
■Binding time of modification. An architecture that is suitably equipped to 
accommodate modifications late in the life cycle will, on average, cost less 
than an architecture that forces the same modification to be made earlier. 
The preparedness of the system means that some costs will be zero, or very 
low, for late life-cycle modifications. This, however, neglects the cost of 
preparing the architecture for the late binding.
Now we may understand tactics and their consequences as affecting one or 
more of the previous parameters: reducing the size of a module, increasing cohe-
sion, reducing coupling, and deferring binding time. These tactics are shown in 
Figure 7.3.
Modifiability Tactics
Increase
Cohesion
Reduce
Coupling
Split Module
Encapsulate
Use an
Intermediary
Change
Arrives
Change Made
within Time 
and Budget
Reduce Size
of a Module
Increase
Semantic
Coherence
Restrict
Dependencies
Refactor
Abstract Common
Services
Defer
Binding
Figure 7.3  Modifiability tactics
