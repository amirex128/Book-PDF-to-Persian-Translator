26 
Part One  Introduction	
2—Why Is Software Architecture Important?
Even if you already believe us that architecture is important and don’t need the 
point hammered thirteen more times, think of these thirteen points (which form 
the outline for this chapter) as thirteen useful ways to use architecture in a project.
2.1  Inhibiting or Enabling a System’s Quality 
Attributes
Whether a system will be able to exhibit its desired (or required) quality attri-
butes is substantially determined by its architecture. 
This is such an important message that we’ve devoted all of Part 2 of this 
book to expounding that message in detail. Until then, keep these examples in 
mind as a starting point:
■
■If your system requires high performance, then you need to pay attention 
to managing the time-based behavior of elements, their use of shared 
resources, and the frequency and volume of inter-element communication.
■
■If modifiability is important, then you need to pay careful attention to 
assigning responsibilities to elements so that the majority of changes to the 
system will affect a small number of those elements. (Ideally each change 
will affect just a single element.)
■
■If your system must be highly secure, then you need to manage and protect 
inter-element communication and control which elements are allowed to 
access which information; you may also need to introduce specialized 
elements (such as an authorization mechanism) into the architecture.
■
■If you believe that scalability will be important to the success of your 
system, then you need to carefully localize the use of resources to facilitate 
introduction of higher-capacity replacements, and you must avoid hard-
coding in resource assumptions or limits.
■
■If your projects need the ability to deliver incremental subsets of the 
system, then you must carefully manage intercomponent usage.
■
■If you want the elements from your system to be reusable in other systems, 
then you need to restrict inter-element coupling, so that when you extract 
an element, it does not come out with too many attachments to its current 
environment to be useful.
The strategies for these and other quality attributes are supremely architectural. 
But an architecture alone cannot guarantee the functionality or quality required of 
a system. Poor downstream design or implementation decisions can always under-
mine an adequate architectural design. As we like to say (mostly in jest): The archi-
tecture giveth and the implementation taketh away. Decisions at all stages of the 
life cycle—from architectural design to coding and implementation—affect system 
quality. Therefore, quality is not completely a function of an architectural design. 
