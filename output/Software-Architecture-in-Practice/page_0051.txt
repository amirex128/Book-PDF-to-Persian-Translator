30 
Part One  Introduction	
2—Why Is Software Architecture Important?
requirements. He had a solid presentation and a solid architecture to pres-
ent. It was sound and sensible. But the audience—about 30 government 
representatives who had varying roles in the management and oversight of 
this sticky project—was tired. Some of them were even thinking that per-
haps they should have gone into real estate instead of enduring another one 
of these marathon let’s-finally-get-it-right-this-time reviews. 
The viewgraph showed, in semiformal box-and-line notation, what the 
major software elements were in a runtime view of the system. The names 
were all acronyms, suggesting no semantic meaning without explanation, 
which the young architect gave. The lines showed data flow, message 
passing, and process synchronization. The elements were internally re-
dundant, the architect was explaining. “In the event of a failure,” he began, 
using a laser pointer to denote one of the lines, “a restart mechanism 
triggers along this path when—”
“What happens when the mode select button is pushed?” interrupted 
one of the audience members. He was a government attendee represent-
ing the user community for this system.
“Beg your pardon?” asked the architect. 
“The mode select button,” he said. “What happens when you push it?”
“Um, that triggers an event in the device driver, up here,” began the 
architect, laser-pointing. “It then reads the register and interprets the event 
code. If it’s mode select, well, then, it signals the blackboard, which in turns 
signals the objects that have subscribed to that event. . . . ”
“No, I mean what does the system do,” interrupted the questioner. “Does 
it reset the displays? And what happens if this occurs during a system 
reconfiguration?”
The architect looked a little surprised and flicked off the laser pointer. 
This was not an architectural question, but since he was an architect and 
therefore fluent in the requirements, he knew the answer. “If the command 
line is in setup mode, the displays will reset,” he said. “Otherwise an error 
message will be put on the control console, but the signal will be ignored.” 
He put the laser pointer back on. “Now, the restart mechanism that I was 
talking about—”
“Well, I was just wondering,” said the users’ delegate. “Because I see 
from your chart that the display console is sending signal traffic to the 
target location module.”
“What should happen?” asked another member of the audience, 
addressing the first questioner. “Do you really want the user to get mode 
data during its reconfiguring?” And for the next 45 minutes, the architect 
watched as the audience consumed his time slot by debating what the cor-
rect behavior of the system was supposed to be in various esoteric states. 
The debate was not architectural, but the architecture (and the graphical 
rendition of it) had sparked debate. It is natural to think of architecture as 
the basis for communication among some of the stakeholders besides the 
architects and developers: Managers, for example, use the architecture to 
create teams and allocate resources among them. But users? The architec-
ture is invisible to users, after all; why should they latch on to it as a tool for 
understanding the system?
