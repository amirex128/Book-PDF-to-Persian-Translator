1.4  What Makes a “Good” Architecture?
19
An architectural pattern delineates the element types and their forms of in-
teraction used in solving the problem. Patterns can be characterized according to 
the type of architectural elements they use. For example, a common module type 
pattern is this:
■
■Layered pattern. When the uses relation among software elements is 
strictly unidirectional, a system of layers emerges. A layer is a coherent 
set of related functionality. In a strictly layered structure, a layer can only 
use the services of the layer immediately below it. Many variations of this 
pattern, lessening the structural restriction, occur in practice. Layers are 
often designed as abstractions (virtual machines) that hide implementation 
specifics below from the layers above, engendering portability. 
Common component-and-connector type patterns are these:
■
■Shared-data (or repository) pattern. This pattern comprises components 
and connectors that create, store, and access persistent data. The repository 
usually takes the form of a (commercial) database. The connectors are 
protocols for managing the data, such as SQL. 
■
■Client-server pattern. The components are the clients and the servers, and 
the connectors are protocols and messages they share among each other to 
carry out the system’s work. 
Common allocation patterns include the following:
■
■Multi-tier pattern, which describes how to distribute and allocate the 
components of a system in distinct subsets of hardware and software, 
connected by some communication medium. This pattern specializes the 
generic deployment (software-to-hardware allocation) structure.
■
■Competence center and platform, which are patterns that specialize a 
software system’s work assignment structure. In competence center, work 
is allocated to sites depending on the technical or domain expertise located 
at a site. For example, user-interface design is done at a site where usability 
engineering experts are located. In platform, one site is tasked with 
developing reusable core assets of a software product line (see Chapter 25), 
and other sites develop applications that use the core assets.
Architectural patterns will be investigated much further in Chapter 13. 
1.4  What Makes a “Good” Architecture?
There is no such thing as an inherently good or bad architecture. Architectures 
are either more or less fit for some purpose. A three-tier layered service-oriented 
architecture may be just the ticket for a large enterprise’s web-based B2B system 
