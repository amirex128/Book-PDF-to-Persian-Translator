284 
Part Three  Architecture in the Life Cycle	
15—Architecture in Agile Projects
Many of the above-mentioned goals trade off against each other. Typically 
security (in the form of encryption) comes at the expense of real-time perfor-
mance (latency). Modifiability comes at the expense of time-to-market. Avail-
ability and performance typically come at the expense of modifiability and cost.
Even if it is possible to collect, analyze, and prioritize all relevant data, func-
tional requirements, and quality attribute requirements, the stringent time-to-mar-
ket constraints that prevail in a competitive climate such as web-conferencing 
would have prevented us from doing this. Trying to support all possible uses is 
intractable, and the users themselves were poorly equipped for envisioning all 
possible potential uses of the system. So just asking the users what they wanted, 
in the fashion of a traditional requirements elicitation, was not likely to work.
This results in a classic “agility versus commitment” problem. On the one 
hand the architect wants to provide new capabilities quickly, and to respond to 
customer needs rapidly. On the other hand, long-term survival of the system and 
the company means that it must be designed for extensibility, modifiability, and 
portability. This can best be achieved by having a simple conceptual model for 
the architecture, based on a small number of regularly applied patterns and tac-
tics. It was not obvious how we would “evolve” our way to such an architecture. 
So, how is it possible to find the “sweet spot” between these opposing forces?
The WebArrow web-conferencing system faced precisely this dilemma. It 
was impossible for the architect and lead designers to do purely top-down ar-
chitectural design; there were too many considerations to weigh at once, and it 
was too hard to predict all of the relevant technological challenges. For example, 
they had cases where they discovered that a vendor-provided API did not work 
as specified—imagine that!—or that an API exposing a critical function was sim-
ply missing. In such cases, these problems rippled through the architecture, and 
workarounds needed to be fashioned . . . fast! 
To address the complexity of this domain, the WebArrow architect and de-
velopers found that they needed to think and work in two different modes at the 
same time:
■
■Top-down—designing and analyzing architectural structures to meet the 
demanding quality attribute requirements and tradeoffs 
■
■Bottom-up—analyzing a wide array of implementation-specific and 
environment-specific constraints and fashioning solutions to them 
To compensate for the difficulty in analyzing architectural tradeoffs with 
any precision, the team adopted an agile architecture discipline combined with a 
rigorous program of experiments aimed at answering specific tradeoff questions. 
These experiments are what are called “spikes” in Agile terminology. And these 
experiments proved to be the key in resolving tradeoffs, by helping to turn un-
known architectural parameters into constants or ranges. Here’s how it worked:
