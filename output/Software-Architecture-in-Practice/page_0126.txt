	
6—Interoperability  105
interoperability—heck, it’s necessary if you want your software to compile 
successfully—but it’s not sufficient. To illustrate this concept, we’ll use an-
other “conversation” analogy. Has your partner or spouse ever come home, 
slammed the door, and when you ask what’s wrong, replied “Nothing!”? 
If so, then you should be able to appreciate the keen difference between 
syntax and semantics and the role of expectations in understanding how an 
entity behaves. Because we want interoperable systems and components, 
and not simply ones that compile together nicely, we require a higher bar 
for interfaces than just a statement of syntax. By “interface,” we mean the 
set of assumptions that you can safely make about an entity. For example, 
it’s a safe assumption that whatever’s wrong with your spouse/partner, 
it’s not “Nothing,” and you know that because that “interface” extends way 
beyond just the words they say. And it’s also a safe assumption that nothing 
about our missile component’s accuracy degradation over time was in its 
API, and yet that was a critical part of its interface.
—PCC
Here are some of the reasons you might want systems to interoperate:
■
■Your system provides a service to be used by a collection of unknown 
systems. These systems need to interoperate with your system even though 
you may know nothing about them. An example is a service such as Google 
Maps.
■
■You are constructing capabilities from existing systems. For example, one 
of the existing systems is responsible for sensing its environment, another 
one is responsible for processing the raw data, a third is responsible for 
interpreting the data, and a final one is responsible for producing and 
distributing a representation of what was sensed. An example is a traffic 
sensing system where the input comes from individual vehicles, the raw 
data is processed into common units of measurement, is interpreted and 
fused, and traffic congestion information is broadcast.
These examples highlight two important aspects of interoperability:
1.	
Discovery. The consumer of a service must discover (possibly at runtime, 
possibly prior to runtime) the location, identity, and the interface of the 
service.
2.	
Handling of the response. There are three distinct possibilities:
■
■The service reports back to the requester with the response.
■
■The service sends its response on to another system. 
■
■The service broadcasts its response to any interested parties.
These elements, discovery and disposition of response, along with management 
of interfaces, govern our discussion of scenarios and tactics for interoperability.
