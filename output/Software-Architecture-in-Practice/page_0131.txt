110 
Part Two  Quality Attributes	
6—Interoperability
	
	
<pb:GetUserInfo>
	
	
	
<pb:UserIdentifier>99999</pb:UserIdentifier>
	
	
</pb:GetUserInfo>
	
</soap:Body>
</soap:Envelope>
One aspect of the choice between SOAP and REST is whether you 
want to accept the complexity and restrictions of SOAP+WSDL (the Web 
Services Description Language) to get more standardized interoperability 
or if you want to avoid the overhead by using REST, but perhaps benefit 
from less standardization. What are the other considerations? 
A message exchange in REST has somewhat fewer characters than a 
message exchange in SOAP. So one of the tradeoffs in the choice between 
REST and SOAP is the size of the individual messages. For systems 
exchanging a large number of messages, another tradeoff is between per-
formance (favoring REST) and structured messages (favoring SOAP).
The decision to implement WS* or REST will depend on aspects such 
as the quality of service (QoS) required—WS* implementation has greater 
support for security, availability, and so on—and type of functionality. A 
RESTful implementation, because of its simplicity, is more appropriate for 
read-only functionality, typical of mashups, where there are minimal QoS 
requirements and concerns.
OK, so if you are building a service-based system, how do you choose? 
The truth is, you don’t have to make a single choice, once and for all time; 
each technology is reasonably easy to use, at least for simple applications. 
And each has its strengths and weaknesses. Like everything else in archi-
tecture, it’s all about the tradeoffs; your decision will likely hinge on the way 
those tradeoffs affect your system in your context.
—RK
6.2  Tactics for Interoperability
Figure 6.2 shows the goal of the set of interoperability tactics.
Information
Exchange
Request
Request
Correctly
Handled
Tactics
to Control
Interoperability
Figure 6.2  Goal of interoperability tactics 
