8.3  A Design Checklist for Performance
143
Table 8.2  Checklist to Support the Design and Analysis Process for 
Performance
Category
Checklist
Allocation of 
Responsibilities
Determine the system’s responsibilities that will involve heavy 
loading, have time-critical response requirements, are heavily 
used, or impact portions of the system where heavy loads or 
time-critical events occur. 
For those responsibilities, identify the processing requirements 
of each responsibility, and determine whether they may cause 
bottlenecks.
Also, identify additional responsibilities to recognize and process 
requests appropriately, including
■
■
Responsibilities that result from a thread of control crossing 
process or processor boundaries
■
■
Responsibilities to manage the threads of control—allocation 
and deallocation of threads, maintaining thread pools, and so 
forth
■
■
Responsibilities for scheduling shared resources or 
managing performance-related artifacts such as queues, 
buffers, and caches
For the responsibilities and resources you identified, ensure that 
the required performance response can be met (perhaps by 
building a performance model to help in the evaluation).
Coordination  
Model
Determine the elements of the system that must coordinate with 
each other—directly or indirectly—and choose communication 
and coordination mechanisms that do the following:
■
■
Support any introduced concurrency (for example, is it thread 
safe?), event prioritization, or scheduling strategy
■
■
Ensure that the required performance response can be 
delivered
■
■
Can capture periodic, stochastic, or sporadic event arrivals, 
as needed 
■
■
Have the appropriate properties of the communication 
mechanisms; for example, stateful, stateless, synchronous, 
asynchronous, guaranteed delivery, throughput, or latency
Data Model
Determine those portions of the data model that will be heavily 
loaded, have time-critical response requirements, are heavily 
used, or impact portions of the system where heavy loads or 
time-critical events occur. 
For those data abstractions, determine the following:
■
■
Whether maintaining multiple copies of key data would 
benefit performance
■
■
Whether partitioning data would benefit performance
■
■
Whether reducing the processing requirements for the 
creation, initialization, persistence, manipulation, translation, 
or destruction of the enumerated data abstractions is 
possible
■
■
Whether adding resources to reduce bottlenecks for the 
creation, initialization, persistence, manipulation, translation, 
or destruction of the enumerated data abstractions is feasible
continues
