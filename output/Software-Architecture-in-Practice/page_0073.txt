52 
Part One  Introduction	
3—The Many Contexts of Software Architecture
Architectural choices may also come from your education and training, 
exposure to successful architectural patterns, or exposure to systems that have 
worked particularly poorly or particularly well. You may also wish to experiment 
with an architectural pattern or technique learned from a book (such as this one) 
or a training course. 
Why do we mention this? Because you (and your organization) must be 
aware of this influence, so that you can manage it to the best of your abilities. This 
may mean that you will critically examine proposed architectural solutions, to 
ensure that they are not simply the path of least resistance. It may mean that you 
will take training courses in interesting new technologies. It may mean that you 
will invest in exploratory projects, to “test the water” of a new technology. Each 
of these steps is a way to proactively manage your background and experience.
3.5  Stakeholders
Many people and organizations are interested in a software system. We call these 
entities stakeholders. A stakeholder is anyone who has a stake in the success of 
the system: the customer, the end users, the developers, the project manager, the 
maintainers, and even those who market the system, for example. But stakehold-
ers, despite all having a shared stake in the success of the system, typically have 
different specific concerns that they wish the system to guarantee or optimize. 
These concerns are as diverse as providing a certain behavior at runtime, perform-
ing well on a particular piece of hardware, being easy to customize, achieving 
short time to market or low cost of development, gainfully employing program-
mers who have a particular specialty, or providing a broad range of functions. 
Figure 3.3 shows the architect receiving a few helpful stakeholder “suggestions.” 
You will need to know and understand the nature, source, and priority of 
constraints on the project as early as possible. Therefore, you must identify and 
actively engage the stakeholders to solicit their needs and expectations. Early en-
gagement of stakeholders allows you to understand the constraints of the task, 
manage expectations, negotiate priorities, and make tradeoffs. Architecture eval-
uation (covered in Part III of this book) and iterative prototyping are two means 
for you to achieve stakeholder engagement.
Having an acceptable system involves appropriate performance, reliability, 
availability, platform compatibility, memory utilization, network usage, security, 
modifiability, usability, and interoperability with other systems as well as behav-
ior. All of these qualities, and others, affect how the delivered system is viewed 
by its eventual recipients, and so such quality attributes will be demanded by one 
or more of the system’s stakeholders. 
The underlying problem, of course, is that each stakeholder has different 
concerns and goals, some of which may be contradictory. It is a rare requirements 
