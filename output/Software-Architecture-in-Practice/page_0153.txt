132 
Part Two  Quality Attributes	
8—Performance
hour (or a minute, or a second) before seeing a typed character appear on the 
screen is unacceptable. Performance continues to be a fundamentally important 
quality attribute for all software.
Performance is often linked to scalability—that is, increasing your system’s 
capacity for work, while still performing well. Technically, scalability is making 
your system easy to change in a particular way, and so is a kind of modifiability. 
In addition, we address scalability explicitly in Chapter 12.
8.1  Performance General Scenario
A performance scenario begins with an event arriving at the system. Responding 
correctly to the event requires resources (including time) to be consumed. While 
this is happening, the system may be simultaneously servicing other events. 
Concurrency
Concurrency is one of the more important concepts that an architect must 
understand and one of the least-taught in computer science courses. 
Concurrency refers to operations occurring in parallel. For example, sup-
pose there is a thread that executes the statements 
x := 1;
x++;
and another thread that executes the same statements. What is the value 
of x after both threads have executed those statements? It could be either 
2 or 3. I leave it to you to figure out how the value 3 could occur—or 
should I say I interleave it to you?
Concurrency occurs any time your system creates a new thread, be-
cause threads, by definition, are independent sequences of control. Multi-
tasking on your system is supported by independent threads. Multiple users 
are simultaneously supported on your system through the use of threads. 
Concurrency also occurs any time your system is executing on more than 
one processor, whether the processors are packaged separately or as 
multi-core processors. In addition, you must consider concurrency when 
parallel algorithms, parallelizing infrastructures such as map-reduce, or 
NoSQL databases are used by your system, or you utilize one of a variety 
of concurrent scheduling algorithms. In other words, concurrency is a tool 
available to you in many ways.
Concurrency, when you have multiple CPUs or wait states that can 
exploit it, is a good thing. Allowing operations to occur in parallel improves 
performance, because delays introduced in one thread allow the processor 
