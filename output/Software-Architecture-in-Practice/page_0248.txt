13.2  Overview of the Patterns Catalog
227
Problem: How can we create integration mechanisms that support the ability to 
transmit messages among the producers and consumers in such a way that they 
are unaware of each other’s identity, or potentially even their existence? 
Solution: In the publish-subscribe pattern, summarized in Table 13.8, compo-
nents interact via announced messages, or events. Components may subscribe 
to a set of events. It is the job of the publish-subscribe runtime infrastructure to 
make sure that each published event is delivered to all subscribers of that event. 
Thus, the main form of connector in these patterns is an event bus. Publisher 
components place events on the bus by announcing them; the connector then de-
livers those events to the subscriber components that have registered an interest in 
those events. Any component may be both a publisher and a subscriber.
Publish-subscribe adds a layer of indirection between senders and receivers. 
This has a negative effect on latency and potentially scalability, depending on 
how it is implemented. One would typically not want to use publish-subscribe in 
a system that had hard real-time deadlines to meet, as it introduces uncertainty in 
message delivery times.
Also, the publish-subscribe pattern suffers in that it provides less control 
over ordering of messages, and delivery of messages is not guaranteed (because 
the sender cannot know if a receiver is listening). This can make the publish-sub-
scribe pattern inappropriate for complex interactions where shared state is critical.
Table 13.8  Publish-Subscribe Pattern Solution
Overview
Components publish and subscribe to events. When an event is 
announced by a component, the connector infrastructure dispatches 
the event to all registered subscribers.
Elements
Any C&C component with at least one publish or subscribe port. 
Concerns include which events are published and subscribed to, and 
the granularity of events.
The publish-subscribe connector, which will have announce and listen 
roles for components that wish to publish and subscribe to events.
Relations
The attachment relation associates components with the publish-
subscribe connector by prescribing which components announce 
events and which components are registered to receive events.
Constraints
All components are connected to an event distributor that may be 
viewed as either a bus—connector—or a component. Publish ports 
are attached to announce roles and subscribe ports are attached to 
listen roles. Constraints may restrict which components can listen to 
which events, whether a component can listen to its own events, and 
how many publish-subscribe connectors can exist within a system.
A component may be both a publisher and a subscriber, by having 
ports of both types.
Weaknesses
Typically increases latency and has a negative effect on scalability and 
predictability of message delivery time.
Less control over ordering of messages, and delivery of messages is 
not guaranteed.
