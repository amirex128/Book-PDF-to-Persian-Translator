2.8  Enabling Evolutionary Prototyping
33
performance requirement. Implementers of each of the constituent pieces may 
not know the overall budget, only their own.
Conversely, the architects need not be experts in all aspects of algorithm 
design or the intricacies of the programming language—although they should 
certainly know enough not to design something that is difficult to build—but they 
are the ones responsible for establishing, analyzing, and enforcing the architec-
tural tradeoffs. 
2.7  Influencing the Organizational Structure 
Not only does architecture prescribe the structure of the system being developed, 
but that structure becomes engraved in the structure of the development project (and 
sometimes the structure of the entire organization). The normal method for divid-
ing up the labor in a large project is to assign different groups different portions of 
the system to construct. This is called the work-breakdown structure of a system. 
Because the architecture includes the broadest decomposition of the system, it is 
typically used as the basis for the work-breakdown structure. The work-breakdown 
structure in turn dictates units of planning, scheduling, and budget; interteam com-
munication channels; configuration control and file-system organization; integration 
and test plans and procedures; and even project minutiae such as how the project 
intranet is organized and who sits with whom at the company picnic. Teams commu-
nicate with each other in terms of the interface specifications for the major elements. 
The maintenance activity, when launched, will also reflect the software structure, 
with teams formed to maintain specific structural elements from the architecture: the 
database, the business rules, the user interface, the device drivers, and so forth.
A side effect of establishing the work-breakdown structure is to freeze some 
aspects of the software architecture. A group that is responsible for one of the 
subsystems will resist having its responsibilities distributed across other groups. 
If these responsibilities have been formalized in a contractual relationship, chang-
ing responsibilities could become expensive or even litigious. 
Thus, once the architecture has been agreed on, it becomes very costly—for 
managerial and business reasons—to significantly modify it. This is one argu-
ment (among many) for carrying out extensive analysis before settling on the 
software architecture for a large system—because so much depends on it.
2.8  Enabling Evolutionary Prototyping
Once an architecture has been defined, it can be analyzed and prototyped 
as a skeletal system. A skeletal system is one in which at least some of the 
