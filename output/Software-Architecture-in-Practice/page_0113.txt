92 
Part Two  Quality Attributes	
5—Availability
example of implementing passive redundancy, see the section on code tem-
plates in Chapter 19.) 
■
■Spare (cold spare). Cold sparing refers to a configuration where the re-
dundant spares of a protection group remain out of service until a fail-over 
occurs, at which point a power-on-reset procedure is initiated on the re-
dundant spare prior to its being placed in service. Due to its poor recovery 
performance, cold sparing is better suited for systems having only high-re-
liability (MTBF) requirements as opposed to those also having high-avail-
ability requirements.
■
■Exception handling. Once an exception has been detected, the system must 
handle it in some fashion. The easiest thing it can do is simply to crash, but 
of course that’s a terrible idea from the point of availability, usability, test-
ability, and plain good sense. There are much more productive possibilities. 
The mechanism employed for exception handling depends largely on the 
programming environment employed, ranging from simple function return 
codes (error codes) to the use of exception classes that contain information 
helpful in fault correlation, such as the name of the exception thrown, the 
origin of the exception, and the cause of the exception thrown. Software 
can then use this information to mask the fault, usually by correcting the 
cause of the exception and retrying the operation.
■
■Rollback. This tactic permits the system to revert to a previous known good 
state, referred to as the “rollback line”—rolling back time—upon the detec-
tion of a failure. Once the good state is reached, then execution can contin-
ue. This tactic is often combined with active or passive redundancy tactics 
so that after a rollback has occurred, a standby version of the failed compo-
nent is promoted to active status. Rollback depends on a copy of a previous 
good state (a checkpoint) being available to the components that are rolling 
back. Checkpoints can be stored in a fixed location and updated at regular 
intervals, or at convenient or significant times in the processing, such as at 
the completion of a complex operation. 
■
■Software upgrade is another preparation-and-repair tactic whose goal is to 
achieve in-service upgrades to executable code images in a non-service-af-
fecting manner. This may be realized as a function patch, a class patch, 
or a hitless in-service software upgrade (ISSU). A function patch is used 
in procedural programming and employs an incremental linker/loader to 
store an updated software function into a pre-allocated segment of target 
memory. The new version of the software function will employ the entry 
and exit points of the deprecated function. Also, upon loading the new 
software function, the symbol table must be updated and the instruction 
cache invalidated. The class patch tactic is applicable for targets executing 
object-oriented code, where the class definitions include a back-door mech-
anism that enables the runtime addition of member data and functions. Hit-
less in-service software upgrade leverages the active redundancy or passive 
