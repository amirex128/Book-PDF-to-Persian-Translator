20 
Part One  Introduction	
1—What Is Software Architecture?
but completely wrong for an avionics application. An architecture carefully 
crafted to achieve high modifiability does not make sense for a throwaway proto-
type (and vice versa!). One of the messages of this book is that architectures can 
in fact be evaluated—one of the great benefits of paying attention to them—but 
only in the context of specific stated goals. 
Nevertheless, there are rules of thumb that should be followed when design-
ing most architectures. Failure to apply any of these does not automatically mean 
that the architecture will be fatally flawed, but it should at least serve as a warn-
ing sign that should be investigated.
We divide our observations into two clusters: process recommendations and 
product (or structural) recommendations. Our process recommendations are the 
following:
1.	
The architecture should be the product of a single architect or a small 
group of architects with an identified technical leader. This approach 
gives the architecture its conceptual integrity and technical consistency. 
This recommendation holds for Agile and open source projects as well 
as “traditional” ones. There should be a strong connection between the 
architect(s) and the development team, to avoid ivory tower designs that are 
impractical.
2.	
The architect (or architecture team) should, on an ongoing basis, base the 
architecture on a prioritized list of well-specified quality attribute require-
ments. These will inform the tradeoffs that always occur. Functionality mat-
ters less.
3.	
The architecture should be documented using views. The views should 
address the concerns of the most important stakeholders in support of the 
project timeline. This might mean minimal documentation at first, elaborat-
ed later. Concerns usually are related to construction, analysis, and main-
tenance of the system, as well as education of new stakeholders about the 
system. 
4.	
The architecture should be evaluated for its ability to deliver the system’s 
important quality attributes. This should occur early in the life cycle, when 
it returns the most benefit, and repeated as appropriate, to ensure that 
changes to the architecture (or the environment for which it is intended) 
have not rendered the design obsolete. 
5.	
The architecture should lend itself to incremental implementation, to avoid 
having to integrate everything at once (which almost never works) as well 
as to discover problems early. One way to do this is to create a “skeletal” 
system in which the communication paths are exercised but which at first 
has minimal functionality. This skeletal system can be used to “grow” the 
system incrementally, refactoring as necessary.
Our structural rules of thumb are as follows:
1.	
The architecture should feature well-defined modules whose functional 
responsibilities are assigned on the principles of information hiding and 
