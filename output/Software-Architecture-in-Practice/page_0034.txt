1.2  Architectural Structures and Views
13
■
■Layer structure. The modules in this structure are called layers. A layer 
is an abstract “virtual machine” that provides a cohesive set of services 
through a managed interface. Layers are allowed to use other layers in a 
strictly managed fashion; in strictly layered systems, a layer is only allowed 
to use the layer immediately below. This structure is used to imbue a system 
with portability, the ability to change the underlying computing platform. 
■
■Class (or generalization) structure. The module units in this structure are 
called classes. The relation is inherits from or is an instance of. This view 
supports reasoning about collections of similar behavior or capability (e.g., 
the classes that other classes inherit from) and parameterized differences. 
The class structure allows one to reason about reuse and the incremental 
addition of functionality. If any documentation exists for a project that has 
followed an object-oriented analysis and design process, it is typically this 
structure.
■
■Data model. The data model describes the static information structure in 
terms of data entities and their relationships. For example, in a banking 
system, entities will typically include Account, Customer, and Loan. 
Account has several attributes, such as account number, type (savings or 
checking), status, and current balance. A relationship may dictate that one 
customer can have one or more accounts, and one account is associated to 
one or two customers.
Some Useful C&C Structures
Component-and-connector structures show a runtime view of the system. In these 
structures the modules described above have all been compiled into executable 
forms. All component-and-connector structures are thus orthogonal to the mod-
ule-based structures and deal with the dynamic aspects of a running system. The 
relation in all component-and-connector structures is attachment, showing how 
the components and the connectors are hooked together. (The connectors them-
selves can be familiar constructs such as “invokes.”) Useful C&C structures in-
clude the following:
■
■Service structure. The units here are services that interoperate with each 
other by service coordination mechanisms such as SOAP (see Chapter 6). 
The service structure is an important structure to help engineer a system 
composed of components that may have been developed anonymously and 
independently of each other. 
■
■Concurrency structure. This component-and-connector structure allows the 
architect to determine opportunities for parallelism and the locations where 
resource contention may occur. The units are components and the connec-
tors are their communication mechanisms. The components are arranged 
into logical threads; a logical thread is a sequence of computations that 
