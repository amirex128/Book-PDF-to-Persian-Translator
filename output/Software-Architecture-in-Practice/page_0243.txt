222 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
Table 13.6  Peer-to-Peer Pattern Solution
Overview
Computation is achieved by cooperating peers that request service 
from and provide services to one another across a network.
Elements
Peer, which is an independent component running on a network 
node. Special peer components can provide routing, indexing, and 
peer search capability.
Request/reply connector, which is used to connect to the peer 
network, search for other peers, and invoke services from other 
peers. In some cases, the need for a reply is done away with.
Relations
The  relation associates peers with their connectors. Attachments 
may change at runtime.
Constraints
Restrictions may be placed on the following:
■
■
The number of allowable attachments to any given peer
■
■
The number of hops used for searching for a peer
■
■
Which peers know about which other peers
Some P2P networks are organized with star topologies, in which 
peers only connect to supernodes.
Weaknesses
Managing security, data consistency, data/service availability, 
backup, and recovery are all more complex.
Small peer-to-peer systems may not be able to consistently achieve 
quality goals such as performance and availability.
Service-Oriented Architecture Pattern
Context: A number of services are offered (and described) by service provid-
ers and consumed by service consumers. Service consumers need to be able 
to understand and use these services without any detailed knowledge of their 
implementation.
Problem: How can we support interoperability of distributed components run-
ning on different platforms and written in different implementation languages, 
provided by different organizations, and distributed across the Internet? How can 
we locate services and combine (and dynamically recombine) them into meaning-
ful coalitions while achieving reasonable performance, security, and availability?
Solution: The service-oriented architecture (SOA) pattern describes a collection 
of distributed components that provide and/or consume services. In an SOA, ser-
vice provider components and service consumer components can use different 
implementation languages and platforms. Services are largely standalone: service 
providers and service consumers are usually deployed independently, and often 
belong to different systems or even different organizations. Components have in-
terfaces that describe the services they request from other components and the 
services they provide. A service’s quality attributes can be specified and guar-
anteed with a service-level agreement (SLA). In some cases, these are legally 
binding. Components achieve their computation by requesting services from one 
another.
