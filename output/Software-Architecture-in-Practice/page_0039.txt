18 
Part One  Introduction	
1—What Is Software Architecture?
sketch the architecture in real time, since that would produce vague and 
very likely erroneous representations.
Okay, it’s not completely true to say that they had no architecture docu-
mentation. They did produce a single-page diagram, with a few boxes and 
lines. Some of those boxes were, however, clouds. Yes, they actually used 
a cloud as one of their icons. When I pressed them on the meaning of this 
icon—Was it a process? A class? A thread?—they waffled. This was not, in 
fact, architecture documentation. It was, at best, “marketecture.”
But in those early days we had no preconditions and so we didn’t stop 
the evaluation there. We just blithely waded in to whatever swamp we 
found, and we enforced nothing. As I began this evaluation, I interviewed 
some of the key project stakeholders: the project manager and several of 
the architects (this was a large project with one lead architect and several 
subordinates). As it happens, the lead architect was away, and so I spent 
my time with the subordinate architects. Every time I asked the subor-
dinates a tough question—“How do you ensure that you will meet your 
latency goal along this critical execution path?” or “What are your rules for 
layering?”—they would answer: “Ask Cal. Cal knows that.” Cal was the lead 
architect. Immediately I noted a risk for this system: What if Cal gets hit by 
a bus? What then?
In the end, because of my pestering, the architecture team did in fact 
produce respectable architecture documentation. About halfway through 
the evaluation, the project manager came up to me and shook my hand 
and thanked me for the great job I had done. I was dumbstruck. In my 
mind I hadn’t done anything, at that point; the evaluation was only partially 
complete and I hadn’t produced a single report or finding. I said that to the 
manager and he said: “You got those guys to document the architecture. 
I’ve never been able to get them to do that. So . . . thanks!”
If Cal had been hit by a bus or just left the company, they would have 
had a serious problem on their hands: all of that architectural knowledge 
located in one guy’s head and he is no longer with the organization. In can 
happen. It does happen.
The moral of this story? An architecture that is not documented, and not 
communicated, may still be a good architecture, but the risks surrounding it 
are enormous.
—RK
1.3  Architectural Patterns
In some cases, architectural elements are composed in ways that solve particular 
problems. The compositions have been found useful over time, and over many 
different domains, and so they have been documented and disseminated. These 
compositions of architectural elements, called architectural patterns, provide 
packaged strategies for solving some of the problems facing a system.
