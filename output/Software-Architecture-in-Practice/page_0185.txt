164 
Part Two  Quality Attributes	
10—Testability
10.2  Tactics for Testability
The goal of tactics for testability is to allow for easier testing when an increment 
of software development is completed. Figure 10.3 displays the use of tactics for 
testability. Architectural techniques for enhancing the software testability have not 
received as much attention as more mature quality attribute disciplines such as 
modifiability, performance, and availability, but as we stated before, anything the 
architect can do to reduce the high cost of testing will yield a significant benefit. 
There are two categories of tactics for testability. The first category deals 
with adding controllability and observability to the system. The second deals 
with limiting complexity in the system’s design. 
Control and Observe System State
Control and observation are so central to testability that some authors even define 
testability in those terms. The two go hand-in-hand; it makes no sense to control 
something if you can’t observe what happens when you do. The simplest form of 
control and observation is to provide a software component with a set of inputs, 
let it do its work, and then observe its outputs. However, the control and observe 
system state category of testability tactics provides insight into software that goes 
beyond its inputs and outputs. These tactics cause a component to maintain some 
sort of state information, allow testers to assign a value to that state information, 
and/or make that information accessible to testers on demand. The state infor-
mation might be an operating state, the value of some key variable, performance 
load, intermediate process steps, or anything else useful to re-creating component 
behavior. Specific tactics include the following:
Tests
Executed
Faults
Detected
Tactics
to Control
Testability
Figure 10.3  The goal of testability tactics
