288 
Part Three  Architecture in the Life Cycle	
15—Architecture in Agile Projects
Boehm and Turner, analyzing historical data from 161 industrial projects, 
examined the effects of up-front architecture and risk resolution effort. They 
found that projects tend to have a “sweet spot” where some up-front architecture 
planning pays off and is not wasteful. 
Among this book’s architecture methods, documentation and evaluation 
might seem to be where the most friction with Agile philosophies might lie. 
However, our approaches to these activities are risk-based and embodied in meth-
ods that help you focus effort where it will most pay off.
The WebArrow example showed how adding experimentation to the proj-
ect’s processes enabled it to obtain benefits from both architecture and classic 
Agile practices, and be responsive to ever-changing requirements and domain 
understanding.
15.6  For Further Reading
Agile comes in many flavors. Here are some of the better-known ones:
■
■Extreme Programming [Beck 04]
■
■Scrum [Schwaber 04]
■
■Feature-Driven Development [Palmer 02]
■
■Crystal Clear [Cockburn 04] 
The journal IEEE Software devoted an entire special issue in 2010 to the 
topic of agility and architecture. The editor’s introduction [Abrahamsson 10] dis-
cusses many of the issues that we have raised here.
George Fairbanks in his book Just Enough Architecture [Fairbanks 10] pro-
vides techniques that are very compatible with Agile methods.
Barry Boehm and Richard Turner [Boehm 04] offer a data- and analy-
sis-driven perspective on the risks and tradeoffs involved in the continuum of 
choices regarding agility and what they called “discipline.” The choice of “agil-
ity versus discipline” in the title of the book has angered and alienated many 
practitioners of Agile methods, most of which are quite disciplined. While this 
book does not focus specifically on architecture, it does touch on the subject in 
many ways. This work was expanded upon in 2010, when Boehm, Lane, Kool-
manojwong, and Turner described the Incremental Commitment Model and its 
relationship to agility and architecture [Boehm 10]. All of Boehm and colleagues’ 
work is informed by an active attention to risk. The seminal article on software 
risk management [Boehm 91] was written by Barry Boehm, more than 20 years 
ago, and it is still relevant and compelling reading today.
Carriere, Kazman, and Ozkaya [Carriere 10] provide a way to reason about 
when and where in an architecture you should do refactoring—to reduce techni-
cal debt—based on an analysis of the propagation cost of anticipated changes.
