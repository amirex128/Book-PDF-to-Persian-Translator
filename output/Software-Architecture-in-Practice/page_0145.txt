124 
Part Two  Quality Attributes	
7—Modifiability
of its consumers. So will a shared data repository, which separates readers of 
a piece of data from writers of that data. In a service-oriented architecture in 
which services discover each other by dynamic lookup, the directory service 
is an intermediary.
■
■Restrict dependencies is a tactic that restricts the modules that a given mod-
ule interacts with or depends on. In practice this tactic is achieved by re-
stricting a module’s visibility (when developers cannot see an interface, they 
cannot employ it) and by authorization (restricting access to only authorized 
modules). This tactic is seen in layered architectures, in which a layer is only 
allowed to use lower layers (sometimes only the next lower layer) and in the 
use of wrappers, where external entities can only see (and hence depend on) 
the wrapper and not the internal functionality that it wraps.
■
■Refactor is a tactic undertaken when two modules are affected by the same 
change because they are (at least partial) duplicates of each other. Code re-
factoring is a mainstay practice of Agile development projects, as a cleanup 
step to make sure that teams have not produced duplicative or overly com-
plex code; however, the concept applies to architectural elements as well. 
Common responsibilities (and the code that implements them) are “factored 
out” of the modules where they exist and assigned an appropriate home of 
their own. By co-locating common responsibilities—that is, making them 
submodules of the same parent module—the architect can reduce coupling. 
■
■Abstract common services. In the case where two modules provide not-
quite-the-same but similar services, it may be cost-effective to implement 
the services just once in a more general (abstract) form. Any modification 
to the (common) service would then need to occur just in one place, reduc-
ing modification costs. A common way to introduce an abstraction is by pa-
rameterizing the description (and implementation) of a module’s activities. 
The parameters can be as simple as values for key variables or as complex 
as statements in a specialized language that are subsequently interpreted. 
Defer Binding
Because the work of people is almost always more expensive than the work of 
computers, letting computers handle a change as much as possible will almost 
always reduce the cost of making that change. If we design artifacts with built-in 
flexibility, then exercising that flexibility is usually cheaper than hand-coding a 
specific change.
Parameters are perhaps the best-known mechanism for introducing 
flexibility, and that is reminiscent of the abstract common services tactic. A 
parameterized function f(a, b) is more general than the similar function f(a) that 
assumes b = 0. When we bind the value of some parameters at a different phase 
in the life cycle than the one in which we defined the parameters, we are applying 
the defer binding tactic.
