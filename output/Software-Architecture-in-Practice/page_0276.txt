14.1  Modeling Architectures to Enable Quality Attribute Analysis
255
Given all of these assumptions, the latency for the system can be estimated. 
Sometimes well-known formulas from queuing theory apply. For situations where 
there are no closed-form solutions, estimates can often be obtained through sim-
ulation. Simulations can be used to make more-realistic assumptions such as the 
distribution of the event arrivals. The estimates are only as good as the assump-
tions, but they can serve to provide rough values that can be used either in design 
or in evaluation; as better information is obtained, the estimates will improve.
A reasonably large number of parameters must be known or estimated to 
construct the queuing model shown in Figure 14.3. The model must then be 
solved or simulated to derive the expected latency. This is the cost side of the 
cost/benefit of performing a queuing analysis. The benefit side is that as a result 
of the analysis, there is an estimate for latency, and “what if” questions can be 
easily answered. The question for you to decide is whether having an estimate of 
the latency and the ability to answer “what if” questions is worth the cost of per-
forming the analysis. One way to answer this question is to consider the impor-
tance of having an estimate for the latency prior to constructing either the system 
or a prototype that simulates an architecture under an assumed load. If having a 
small latency is a crucial requirement upon which the success of the system re-
lies, then producing an estimate is appropriate. 
Performance is a well-studied quality attribute with roots that extend beyond 
the computer industry. For example, the queuing model given in Figure 14.1 
dates from the 1930s. Queuing theory has been applied to factory floors, to bank-
ing queues, and to many other domains. Models for real-time performance, such 
as rate monotonic analysis, also exist and have sophisticated analysis techniques. 
Analyzing Availability
Another quality attribute with a well-understood analytic framework is availability. 
Modeling an architecture for availability—or to put it more carefully, mod-
eling an architecture to determine the availability of a system based on that archi-
tecture—is a matter of determining the failure rate and the recovery time. As you 
may recall from Chapter 5, availability can be expressed as
MTBF
(MTBF + MTTR)
This models what is known as steady-state availability, and it is used to 
indicate the uptime of a system (or component of a system) over a sufficiently 
long duration. In the equation, MTBF is the mean time between failure, which is 
derived based on the expected value of the implementation’s failure probability 
density function (PDF), and MTTR refers to the mean time to repair. 
Just as for performance, to model an architecture for availability, we need 
an architecture to analyze. So, suppose we want to increase the availability of a 
system that uses the broker pattern, by applying redundancy tactics. Figure 14.4 
