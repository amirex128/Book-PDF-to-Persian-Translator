12.4  Using Standard Lists of Quality Attributes—or Not 
195
■
■Reliability. The degree to which a system, product, or component performs 
specified functions under specified conditions for a specified period of time
■
■Security. The degree to which a product or system protects information and 
data so that persons or other products or systems have the degree of data 
access appropriate to their types and levels of authorization
■
■Maintainability. The degree of effectiveness and efficiency with which a 
product or system can be modified by the intended maintainers
■
■Portability. The degree of effectiveness and efficiency with which a system, 
product, or component can be transferred from one hardware, software, or 
other operational or usage environment to another
In ISO 25010, these “quality characteristics” are each composed of “qual-
ity subcharacteristics” (for example, nonrepudiation is a subcharacteristic of se-
curity). The standard slogs through almost five dozen separate descriptions of 
quality subcharacteristics in this way. It defines for us the qualities of “pleasure” 
and “comfort.” It distinguishes among “functional correctness” and “functional 
completeness,” and then adds “functional appropriateness” for good measure. To 
exhibit “compatibility,” systems must either have “interoperability” or just plain 
“coexistence.” “Usability” is a product quality, not a quality-in-use quality, al-
though it includes “satisfaction,” which is a quality-in-use quality. “Modifiabil-
ity” and “testability” are both part of “maintainability.” So is “modularity,” which 
is a strategy for achieving a quality rather than a goal in its own right. “Avail-
ability” is part of “reliability.” “Interoperability” is part of “compatibility.” And 
“scalability” isn’t mentioned at all.
Got all that?
Lists like these—and there are many—do serve a purpose. They can be help-
ful checklists to assist requirements gatherers in making sure that no important 
needs were overlooked. Even more useful than standalone lists, they can serve 
as the basis for creating your own checklist that contains the quality attributes 
of concern in your domain, your industry, your organization, and your products. 
Quality attribute lists can also serve as the basis for establishing measures. If 
“pleasure” turns out to be an important concern in your system, how do you mea-
sure it to know if your system is providing enough of it?
However, general lists like these also have drawbacks. First, no list will ever 
be complete. As an architect, you will be called upon to design a system to meet 
a stakeholder concern not foreseen by any list-maker. For example, some writers 
speak of “manageability,” which expresses how easy it is for system administra-
tors to manage the application. This can be achieved by inserting useful instru-
mentation for monitoring operation and for debugging and performance tuning. 
We know of an architecture that was designed with the conscious goal of retain-
ing key staff and attracting talented new hires to a quiet region of the American 
Midwest. That system’s architects spoke of imbuing the system with “Iowabil-
ity.” They achieved it by bringing in state-of-the-art technology and giving their 
development teams wide creative latitude. Good luck finding “Iowability” in any 
