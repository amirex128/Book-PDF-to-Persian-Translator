4.3  Quality Attribute Considerations 
65
3.	
Constraints are satisfied by accepting the design decision and reconciling it 
with other affected design decisions.
4.2  Functionality
Functionality is the ability of the system to do the work for which it was in-
tended. Of all of the requirements, functionality has the strangest relationship to 
architecture.
First of all, functionality does not determine architecture. That is, given a 
set of required functionality, there is no end to the architectures you could create 
to satisfy that functionality. At the very least, you could divide up the function-
ality in any number of ways and assign the subpieces to different architectural 
elements. 
In fact, if functionality were the only thing that mattered, you wouldn’t have 
to divide the system into pieces at all; a single monolithic blob with no internal 
structure would do just fine. Instead, we design our systems as structured sets 
of cooperating architectural elements—modules, layers, classes, services, data-
bases, apps, threads, peers, tiers, and on and on—to make them understandable 
and to support a variety of other purposes. Those “other purposes” are the other 
quality attributes that we’ll turn our attention to in the remaining sections of this 
chapter, and the remaining chapters of Part II. 
But although functionality is independent of any particular structure, func-
tionality is achieved by assigning responsibilities to architectural elements, re-
sulting in one of the most basic of architectural structures.
Although responsibilities can be allocated arbitrarily to any modules, soft-
ware architecture constrains this allocation when other quality attributes are im-
portant. For example, systems are frequently divided so that several people can 
cooperatively build them. The architect’s interest in functionality is in how it in-
teracts with and constrains other qualities. 
4.3  Quality Attribute Considerations 
Just as a system’s functions do not stand on their own without due consideration of 
other quality attributes, neither do quality attributes stand on their own; they pertain 
to the functions of the system. If a functional requirement is “When the user presses 
the green button, the Options dialog appears,” a performance QA annotation might 
describe how quickly the dialog will appear; an availability QA annotation might 
describe how often this function will fail, and how quickly it will be repaired; a us-
ability QA annotation might describe how easy it is to learn this function.
