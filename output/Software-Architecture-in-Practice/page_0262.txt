13.3 Relationships between Tactics and Patterns 
241
:Client
:ClientProxy
:ServerProxy
:Server
process boundary
registerServer()
marshallRequest()
unmarshallRequest()
clientID
serverID
OK
resultA
resultA
sendRequest()
marshallResponse()
unmarshallResponse()
sendResponse()
performFunctionA()
performFunctionA()
locateServer()
locateClient()
process boundary
:Broker
Figure 13.16  A sequence diagram showing a typical client-server interaction 
mediated by a broker
■
■Performance. The levels of indirection between the client (requesting 
the information or service) and the server (providing the information or 
service) add overhead, and hence add latency. Also, the broker is a potential 
performance bottleneck if direct communication between the client and 
server is not desired (for example, for security reasons).
■
■Testability. Brokers are employed in complex multi-process and multi-
processor systems. Such systems are typically highly dynamic. Requests 
and responses are typically asynchronous. All of this makes testing and 
debugging such systems extremely difficult. But the description of the 
broker pattern provides no testing functionality, such as testing interfaces, 
state or activity capture and playback capabilities, and so forth.
