1.2  Architectural Structures and Views
17
reason: it tends to spawn the project structure, because it mirrors the team struc-
ture of development. In other projects, the dominant structure might be a C&C 
structure that shows how the system’s functionality and/or critical quality attri-
butes are achieved.
Fewer Is Better
Not all systems warrant consideration of many architectural structures. The larger 
the system, the more dramatic the difference between these structures tends to be; 
but for small systems we can often get by with fewer. Instead of working with 
each of several component-and-connector structures, usually a single one will do. 
If there is only one process, then the process structure collapses to a single node 
and need not be explicitly represented in the design. If there is to be no distribu-
tion (that is, if the system is implemented on a single processor), then the deploy-
ment structure is trivial and need not be considered further. In general, design and 
document a structure only if doing so brings a positive return on the investment, 
usually in terms of decreased development or maintenance costs.
Which Structures to Choose?
We have briefly described a number of useful architectural structures, and there 
are many more. Which ones shall an architect choose to work on? Which ones 
shall the architect choose to document? Surely not all of them. Chapter 18 will 
treat this topic in more depth, but for now a good answer is that you should think 
about how the various structures available to you provide insight and leverage 
into the system’s most important quality attributes, and then choose the ones that 
will play the best role in delivering those attributes. 
Ask Cal
More than a decade ago I went to a customer site to do an architecture 
evaluation—one of the first instances of the Architecture Tradeoff Analysis 
Method (ATAM) that I had ever performed (you can read about the ATAM, 
and other architecture evaluation topics, in Chapter 21). In those early 
days, we were still figuring out how to make architecture evaluations re-
peatable and predictable, and how to guarantee useful outcomes from 
them. One of the ways that we ensured useful outcomes was to enforce 
certain preconditions on the evaluation. A precondition that we figured out 
rather quickly was this: if the architecture has not been documented, we 
will not proceed with the evaluation. The reason for this precondition was 
simple: we could not evaluate the architecture by reading the code—we 
didn’t have the time for that—and we couldn’t just ask the architect to 
