6.1  Interoperability General Scenario
109
■
■
Reliability. SOAP, by itself, does not ensure reliable message delivery. 
Applications that require such guarantees must use services compliant with 
SOAP’s reliability standard: WS-Reliability.
SOAP is quite general and has its roots in a remote procedure call 
(RPC) model of interacting applications, although other models are cer-
tainly possible. SOAP has a simple type system, comparable to that found 
in the major programming languages. SOAP relies on HTTP and RPC for 
message transmission, but it could, in theory, be implemented on top of 
any communication protocol. SOAP does not mandate a service’s method 
names, addressing model, or procedural conventions. Thus, choosing 
SOAP buys little actual interoperability between applications—it is just 
an information exchange standard. The interacting applications need to 
agree on how to interpret the payload, which is where you get semantic 
interoperability. 
REST, on the other hand, is a client-server-based architectural style that 
is structured around a small set of create, read, update, delete (CRUD) op-
erations (called POST, GET, PUT, DELETE respectively in the REST world) 
and a single addressing scheme (based on a URI, or uniform resource 
identifier). REST imposes few constraints on an architecture: SOAP offers 
completeness; REST offers simplicity. 
REST is about state and state transfer and views the web (and the ser-
vices that service-oriented systems can string together) as a huge network 
of information that is accessible by a single URI-based addressing scheme. 
There is no notion of type and hence no type checking in REST—it is up to 
the applications to get the semantics of interaction right.
Because REST interfaces are so simple and general, any HTTP client 
can talk to any HTTP server, using the REST operations (POST, GET, PUT, 
DELETE) with no further configuration. That buys you syntactic interopera-
bility, but of course there must be organization-level agreement about what 
these programs actually do and what information they exchange. That is, 
semantic interoperability is not guaranteed between services just because 
both have REST interfaces.
REST, on top of HTTP, is meant to be self-descriptive and in the best 
case is a stateless protocol. Consider the following example, in REST, of a 
phone book service that allows someone to look up a person, given some 
unique identifier for that person:
http://www.XYZdirectory.com/phonebook/UserInfo/99999
The same simple lookup, implemented in SOAP, would be specified as 
something like the following:
<?xml version=”1.0”?>
<soap:Envelope xmlns:soap=http://www.w3.org/2001/  
	
	
12/soap-envelope 
 soap:encodingStyle=”http://www.w3.org/2001/12/ 
	
	
soap-encoding”>
	
<soap:Body pb=”http://www.XYZdirectory.com/ 
	
	
phonebook”>
