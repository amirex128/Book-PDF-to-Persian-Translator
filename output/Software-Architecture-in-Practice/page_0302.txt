15.2  Agility and Architecture Methods
281
There is one line representing each of these three projects, starting 
near the Y axis and descending, at different rates, to the X axis at the 50 
mark. This shows that adding time for up-front work reduces later rework. 
No surprise: that is exactly the point of doing more up-front work. However, 
when you sum each of those downward-trending lines (for the 10, 100, and 
1,000 KSLOC projects) with the upward sloping line for the up-front (initial 
architecture and risk resolution) work, you get the second set of three lines, 
which start at the Y axis and meet the upward sloping line at the 50 mark 
on the X axis. 
These lines show that there is a sweet spot for each project. For the 10 
KSLOC project, the sweet spot is at the far left. This says that devoting 
much, if any, time to up-front work is a waste for a small project (assuming 
that the inherent domain complexity is the same for all three sets of lines). 
For the 100 KSLOC project, the sweet spot is at around 20 percent of the 
project schedule. And for the 1,000 KSLOC project, the sweet spot is at 
around 40 percent of the project schedule. These results are fairly intui-
tive. A project with a million lines of code is enormously complex, and it is 
difficult to imagine how Agile principles alone can cope with this complexity 
if there is no architecture to guide and organize the effort. 
The graph shows that no one answer is appropriate for all situations, 
so you need methods to guide you to decide how much up-front work is 
right for you. Boehm and Turner’s work is a start, but expected lines of 
code is not the only determinant for appropriateness of up-front planning. 
The domain, the reliability or safety required, and the experience of your 
development team all play a role.
The whole point of choosing how much time to budget for architecture is to 
reduce risk. Risk may be financial, political, operational, or reputational. Some 
risks might involve human life or the chance of legal action. Chapter 22 covers 
risk management and budgets for planning in the context of architecture.
15.2  Agility and Architecture Methods
Throughout this book we emphasize methods for architecture design, analysis, 
and documentation. We unabashedly like methods! And so does the Agile com-
munity: dozens of books have been written on Scrum, Extreme Programming, 
Crystal Clear, and other Agile methods. But how should we think of architec-
ture-centric techniques and methods in an Agile context? How well do they fit 
with the twelve Agile principles, for example?
We believe that they fit very well. The methods we present are based on the 
essential elements needed to perform the activity. If you believe that architecture 
