16 
Part One  Introduction	
1—What Is Software Architecture?
different system perspectives, they are not independent. Elements of one structure 
will be related to elements of other structures, and we need to reason about these 
relations. For example, a module in a decomposition structure may be manifested 
as one, part of one, or several components in one of the component-and-con-
nector structures, reflecting its runtime alter ego. In general, mappings between 
structures are many to many. 
Figure 1.2 shows a very simple example of how two structures might relate 
to each other. The figure on the left shows a module decomposition view of a 
tiny client-server system. In this system, two modules must be implemented: The 
client software and the server software. The figure on the right shows a compo-
nent-and-connector view of the same system. At runtime there are ten clients run-
ning and accessing the server. Thus, this little system has two modules and eleven 
components (and ten connectors).
Whereas the correspondence between the elements in the decomposition 
structure and the client-server structure is obvious, these two views are used for 
very different things. For example, the view on the right could be used for perfor-
mance analysis, bottleneck prediction, and network traffic management, which 
would be extremely difficult or impossible to do with the view on the left.
(In Chapter 13 we’ll learn about the map-reduce pattern, in which copies 
of simple, identical functionality are distributed across hundreds or thousands 
of processing nodes—one module for the whole system, but one component per 
node.) 
Individual projects sometimes consider one structure dominant and cast 
other structures, when possible, in terms of the dominant structure. Often the 
dominant structure is the module decomposition structure. This is for a good 
Client
Server
Module
System
Decomposition View
Key:
Client-Server View
Key:
Component
Request-Reply
C7
C8
C2
C3
C1
C4
C6
C9
C10
C5
S1
FIGURE 1.2  Two views of a client-server system
