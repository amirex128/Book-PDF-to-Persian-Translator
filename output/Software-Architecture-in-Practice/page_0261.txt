240 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
Table 13.12  Architecture Patterns and Corresponding Tactics ([Bachmann 07])
Pattern
Modifiability
Increase 
Cohesion
Reduce Coupling
Defer Binding 
Time
Increase Semantic 
Coherence
Abstract Common 
Services
Encapsulate
Use a Wrapper
Restrict Comm. 
Paths
Use an 
Intermediary
Raise the 
Abstraction Level
Use Runtime 
Registration
Use Startup-Time 
Binding
Use Runtime 
Binding
Layered
X
X 
X 
X
X 
X 
Pipes and Filters
X
X
X
X
X
Blackboard
X
X
X
X
X
X
X
Broker
X
X
X
X
X
X
X
Model View 
Controller
X
X
X
X
Presentation 
Abstraction Control
X
X
X
X
Microkernel
X
X
X
X
X
Reflection
X
X
To illustrate these concerns in particular, and how to use tactics to augment 
patterns in general, we’ll use the broker pattern as a starting point. 
The broker pattern is widely used in distributed systems and dates back at 
least to its critical role in CORBA-based systems. Broker is a crucial component 
of any large-scale, dynamic, service-oriented architecture. 
Using this pattern, a client requesting some information from a server does 
not need to know the location or APIs of the server. The client simply contacts 
the broker (typically through a client-side proxy); this is illustrated in the UML 
sequence diagram in Figure 13.16.
Weaknesses of the Broker Pattern.  In Section 13.2 we enumerated sev-
eral weaknesses of the broker pattern. Here we will examine these weaknesses 
in more detail. The broker pattern has several weaknesses with respect to certain 
quality attributes. For example: 
■
■Availability. The broker, if implemented as suggested in Figure 13.6, is a 
single point of failure. The liveness of servers, the broker, and perhaps even 
the clients need to be monitored, and repair mechanisms must be provided.
