170 
Part Two  Quality Attributes	
10—Testability
Table 10.2  Checklist to Support the Design and Analysis Process for 
Testability, continued
Category
Checklist
Resource Management
Ensure there are sufficient resources available to execute 
a test suite and capture the results. Ensure that your test 
environment is representative of (or better yet, identical to) 
the environment in which the system will run. Ensure that 
the system provides the means to do the following:
■
■
Test resource limits 
■
■
Capture detailed resource usage for analysis in the 
event of a failure
■
■
Inject new resource limits into the system for the 
purposes of testing
■
■
Provide virtualized resources for testing
Binding Time
Ensure that components that are bound later than compile 
time can be tested in the late-bound context. 
Ensure that late bindings can be captured in the event of a 
failure, so that you can re-create the system’s state leading 
to the failure. 
Ensure that the full range of binding possibilities can be 
tested.
Choice of Technology
Determine what technologies are available to help achieve 
the testability scenarios that apply to your architecture. Are 
technologies available to help with regression testing, fault 
injection, recording and playback, and so on?
Determine how testable the technologies are that you have 
chosen (or are considering choosing in the future) and 
ensure that your chosen technologies support the level of 
testing appropriate for your system. For example, if your 
chosen technologies do not make it possible to inject state, 
it may be difficult to re-create fault scenarios.
Now That Your Architecture Is Set to Help You Test . . . 
By Nick Rozanski, coauthor (with Eoin Woods) of Software Systems 
Architecture: Working With Stakeholders Using Viewpoints and 
Perspectives
In addition to architecting your system to make it amenable to testing, 
you will need to overcome two more specific and daunting challenges 
when testing very large or complex systems, namely test data and test 
automation.
Test Data
Your first challenge is how to create large, consistent and useful test 
data sets. This is a significant problem in my experience, particularly for 
integration testing (that is, testing a number of components to confirm that 
they work together correctly) and performance testing (confirming that 
