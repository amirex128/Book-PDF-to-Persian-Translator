238 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
Other Allocation Patterns.  There are several published deployment styles. 
Microsoft publishes a “Tiered Distribution” pattern, which prescribes a particular 
allocation of components in a multi-tier architecture to the hardware they will run 
on. Similarly, IBM’s WebSphere handbooks describe a number of what they call 
“topologies” along with the quality attribute criteria for choosing among them. 
There are 11 topologies (specialized deployment patterns) described for Web-
Sphere version 6, including the “single machine topology (stand-alone server),” 
“reverse proxy topology,” “vertical scaling topology,” “horizontal scaling topol-
ogy,” and “horizontal scaling with IP sprayer topology.”
There are also published work assignment patterns. These take the form of 
often-used team structures. For example, patterns for globally distributed Agile 
projects include these:
■
■Platform. In software product line development, one site is tasked with 
developing reusable core assets of the product line, and other sites develop 
applications that use the core assets.
■
■Competence center. Work is allocated to sites depending on the technical 
or domain expertise located at a site. For example, user interface design is 
done at a site where usability engineering experts are located.
■
■Open source. Many independent contributors develop the software product 
in accordance with a technical integration strategy. Centralized control is 
minimal, except when an independent contributor integrates his code into 
the product line.
13.3 Relationships between Tactics and Patterns 
Patterns and tactics together constitute the software architect’s primary tools of 
the trade. How do they relate to each other?
Patterns Comprise Tactics
As we said in the introduction to this chapter, tactics are the “building blocks” 
of design from which architectural patterns are created. Tactics are atoms and 
patterns are molecules. Most patterns consist of (are constructed from) several 
different tactics, and although these tactics might all serve a common purpose—
such as promoting modifiability, for example—they are often chosen to promote 
different quality attributes. For example, a tactic might be chosen that makes an 
availability pattern more secure, or that mitigates the performance impact of a 
modifiability pattern.
Consider the example of the layered pattern, the most common pattern in all 
of software architecture (virtually all nontrivial systems employ layering). The 
