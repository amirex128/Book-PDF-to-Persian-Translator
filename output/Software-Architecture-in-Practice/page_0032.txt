1.2  Architectural Structures and Views
11
elements are runtime components (which are the principal units of compu-
tation and could be services, peers, clients, servers, filters, or many other 
types of runtime elements) and connectors (which are the communication 
vehicles among components, such as call-return, process synchronization 
operators, pipes, or others). Component-and-connector views help us an-
swer questions such as these: 
■
■What are the major executing components and how do they interact at 
runtime? 
■
■What are the major shared data stores? 
■
■Which parts of the system are replicated? 
■
■How does data progress through the system? 
■
■What parts of the system can run in parallel? 
■
■Can the system’s structure change as it executes and, if so, how? 
By extension, component-and-connector views are crucially important 
for asking questions about the system’s runtime properties such as 
performance, security, availability, and more.
3.	
Allocation structures embody decisions as to how the system will relate 
to nonsoftware structures in its environment (such as CPUs, file systems, 
networks, development teams, etc.). These structures show the relationship 
between the software elements and elements in one or more external envi-
ronments in which the software is created and executed. Allocation views 
help us answer questions such as these: 
■
■What processor does each software element execute on? 
■
■In what directories or files is each element stored during development, 
testing, and system building? 
■
■What is the assignment of each software element to development teams?
Structures Provide Insight
Structures play such an important role in our perspective on software architec-
ture because of the analytical and engineering power they hold. Each structure 
provides a perspective for reasoning about some of the relevant quality attributes. 
For example:
■
■The module “uses” structure, which embodies what modules use what other 
modules, is strongly tied to the ease with which a system can be extended 
or contracted. 
■
■The concurrency structure, which embodies parallelism within the system, 
is strongly tied to the ease with which a system can be made free of 
deadlock and performance bottlenecks. 
■
■The deployment structure is strongly tied to the achievement of 
performance, availability, and security goals. 
