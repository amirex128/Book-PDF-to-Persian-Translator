3.1  Architecture in a Technical Context
41
■
■If your system requires high performance, then you need to pay attention 
to managing the time-based behavior of elements, their use of shared 
resources, and the frequency and volume of interelement communication.
To that list, we’ll add the following:
■
■If you care about a system’s availability, you have to be concerned with 
how components take over for each other in the event of a failure, and how 
the system responds to a fault.
■
■If you care about usability, you have to be concerned about isolating the 
details of the user interface and those elements responsible for the user 
experience from the rest of the system, so that those things can be tailored 
and improved over time.
■
■If you care about the testability of your system, you have to be concerned 
about the testability of individual elements, which means making their state 
observable and controllable, plus understanding the emergent behavior of 
the elements working together.
■
■If you care about the safety of your system, you have to be concerned about 
the behavioral envelope of the elements and the emergent behavior of the 
elements working in concert.
■
■If you care about interoperability between your system and another, you 
have to be concerned about which elements are responsible for external 
interactions so that you can control those interactions.
These and other representations are all saying the same thing in different 
ways: If you care about this quality attribute, you have to be concerned with these 
decisions, all of which are thoroughly architectural in nature. An architecture in-
hibits or enables a system’s quality attributes. And conversely, nothing else influ-
ences an architecture more than the quality attribute requirements it must satisfy.
If you care about architecture for no other reason, you should care about it for 
this one. We feel so strongly about architecture’s importance with respect to achiev-
ing system quality attributes that all of Part II of this book is devoted to the topic.
Why is functionality missing from the preceding list? It is missing because 
the architecture mainly provides containers into which the architect places func-
tionality. Functionality is not so much a driver for the architecture as it is a conse-
quence of it. We return to this point in more detail in Part II.
Architectures and the Technical Environment
The technical environment that is current when an architecture is designed will 
influence that architecture. It might include standard industry practices or soft-
ware engineering techniques prevalent in the architect’s professional community. 
It is a brave architect who, in today’s environment, does not at least consider 
a web-based, object-oriented, service-oriented, mobility-aware, cloud-based, 
