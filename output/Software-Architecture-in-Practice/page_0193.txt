172 
Part Two  Quality Attributes	
10—Testability
There are lots of tools to help with this nowadays, such as Quick Test 
Pro, TestComplete, or Selenium for testing, and CruiseControl, Hudson, 
and TeamCity for continuous integration. A comprehensive list on the web 
can be found here: en.wikipedia.org/wiki/Test_automation.
10.4  Summary
Ensuring that a system is easily testable has payoffs both in terms of the cost of 
testing and the reliability of the system. A vehicle often used to execute the tests 
is the test harness. Test harnesses are software systems that encapsulate test re-
sources such as test cases and test infrastructure so that it is easy to reapply tests 
across iterations and it is easy to apply the test infrastructure to new increments 
of the system. Another vehicle is the creation of test cases prior to the develop-
ment of a component, so that developers know which tests their component must 
pass.
Controlling and observing the system state is a major class of testability 
tactics. Providing the ability to do fault injection, to record system state at key 
portions of the system, to isolate the system from its environment, and to abstract 
various resources are all different tactics to support the control and observation of 
a system and its components.
Complex systems are difficult to test because of the large state space in 
which their computations take place, and because of the larger number of inter-
connections among the elements of the system. Consequently, keeping the sys-
tem simple is another class of tactics that supports testability.
10.5  For Further Reading
An excellent general introduction to software testing is [Beizer 90]. For a more 
modern take on testing, and from the software developer’s perspective rather than 
the tester’s, Freeman and Pryce cover test-driven development in the object-ori-
ented realm [Freeman 09].
Bertolino and Strigini [Bertolino 96] are the developers of the model of test-
ing shown in Figure 10.1. 
Yin and Bieman [Yin 94] have written about executable assertions. Hartman 
[Hartman 10] describes a technique for using executable assertions as a means 
for detecting race conditions.
Bruntink and van Deursen [Bruntink 06] write about the impact of structure 
on testing. 
