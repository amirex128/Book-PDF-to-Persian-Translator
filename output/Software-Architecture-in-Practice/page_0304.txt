15.3  A Brief Example of Agile Architecting
283
Architecture Evaluation 
Could an architecture evaluation work as part of an Agile process? Absolutely. 
In fact, doing so is perfectly Agile-consistent, because meeting stakeholders’ im-
portant concerns is a cornerstone of Agile philosophy. 
Our approach to architecture evaluation is exemplified by the Architecture 
Tradeoff Analysis Method (ATAM) of Chapter 21. It does not endeavor to an-
alyze all, or even most, of an architecture. Rather, the focus is determined by 
a set of quality attribute scenarios that represent the most important (but by no 
means all) of the concerns of the stakeholders. “Most important” is judged by 
the amount of value the scenario brings to the architecture’s stakeholders, or the 
amount of risk present in achieving the scenario. Once these scenarios have been 
elicited, validated, and prioritized, they give us an evaluation agenda based on 
what is important to the success of the system, and what poses the greatest risk 
for the system’s success. Then we only delve into those areas that pose high risk 
for the achievement of the system’s main functions and qualities.
And as we will see in Chapter 21, it is easy to tailor a lightweight architec-
ture evaluation, for quicker and less-costly analysis and feedback whenever in the 
project it is called for. 
15.3  A Brief Example of Agile Architecting
Our claim is that architecture and agility are quite compatible. Now we will look 
at a brief case study of just that. This project, which one of the authors worked 
on, involved the creation and evolution of a web-conferencing system. Through-
out this project we practiced “agile architecting” and, we believe, hit the sweet 
spot between up-front planning where possible, and agility where needed.
Web-conferencing systems are complex and demanding systems. They must 
provide real-time responsiveness, competitive features, ease of installation and 
use, lightweight footprint, and much more. For example:
■
■They must work on a wide variety of hardware and software platforms, the 
details of which are not under the control of the architect.
■
■They must be reliable and provide low-latency response times, particularly 
for real-time functionality such as voice over IP (VoIP) and screen sharing.
■
■They must provide high security, but do so over an unknown network topol-
ogy and an unknown set of firewalls and firewall policies.
■
■They must be easily modified and easily integrated into a wide variety of 
environments and applications.
■
■They must be highly usable and easily installed and learned by users with 
widely varying IT skills. 
