282 
Part Three  Architecture in the Life Cycle	
15—Architecture in Agile Projects
needs to be designed, analyzed, and documented, then the techniques we present 
are essential regardless of the project in which they are embedded. The methods 
we present are essentially driven by the motivation to reduce risk, and by consid-
erations of costs and benefits. 
Among all of our methods—for extracting architecturally significant re-
quirements, for architecture design, for architecture evaluation, for architecture 
documentation—that you’ll see in subsequent chapters, one might expect the 
greatest Agile friction from evaluation and documentation. And so the rest of this 
section will examine those two practices in an Agile context.
Architecture Documentation and YAGNI
Our approach to architecture documentation is called Views and Beyond, and it 
will be discussed in Chapter 18. Views and Beyond and Agile agree emphatically 
on the following point: If information isn’t needed, don’t spend the resources 
to document it. All documentation should have an intended use and audience in 
mind, and be produced in a way that serves both. 
One of our fundamental principles of technical documentation is “Write 
for the reader.” That means understanding who will read the documentation 
and how they will use it. If there is no audience, there is no need to produce the 
documentation. This principle is so important in Agile methods that it has been 
given its own name: YAGNI. YAGNI means “you ain’t gonna need it,” and it 
refers to the idea that you should only implement or document something when 
you actually have the need for it. Do not spend time attempting to anticipate all 
possible needs. 
The Views and Beyond approach uses the architectural view as the “unit” of 
documentation to be produced. Selecting the views to document is an example of 
applying this principle. The Views and Beyond approach prescribes producing a 
view if and only if it addresses substantial concerns of an important stakeholder 
community. And because documentation is not a monolithic activity that holds up 
all other progress until it is complete, the view selection method prescribes pro-
ducing the documentation in prioritized stages to satisfy the needs of the stake-
holders who need it now.
We document the portions of the architecture that we need to teach to 
newcomers, that embody significant potential risks if not properly managed, 
and that we need to change frequently. We document what we need to convey 
to readers so they can do their job. Although “classic” Agile emphasizes doc-
umenting the minimum amount needed to let the current team of developers 
make progress, our approach emphasizes that the reader might be a maintainer 
assigned to make a technology upgrade years after the original development 
team has disbanded.
