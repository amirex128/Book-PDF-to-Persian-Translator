13.2  Overview of the Patterns Catalog
229
■
■Social networks, where “friends” are notified when changes occur to a 
person’s website
The publish-subscribe pattern is used to send events and messages to an un-
known set of recipients. Because the set of event recipients is unknown to the 
event producer, the correctness of the producer cannot, in general, depend on 
those recipients. Thus, new recipients can be added without modification to the 
producers. 
Having components be ignorant of each other’s identity results in easy mod-
ification of the system (adding or removing producers and consumers of data) but 
at the cost of runtime performance, because the publish-subscribe infrastructure 
is a kind of indirection, which adds latency. In addition, if the publish-subscribe 
connector fails completely, this is a single point of failure for the entire system.
The publish-subscribe pattern can take several forms: 
■
■List-based publish-subscribe is a realization of the pattern where every 
publisher maintains a subscription list—a list of subscribers that have 
registered an interest in receiving the event. This version of the pattern is 
less decoupled than others, as we shall see below, and hence it does not 
provide as much modifiability, but it can be quite efficient in terms of 
runtime overhead. Also, if the components are distributed, there is no single 
point of failure.
■
■Broadcast-based publish-subscribe differs from list-based publish-
subscribe in that publishers have less (or no) knowledge of the subscribers. 
Publishers simply publish events, which are then broadcast. Subscribers 
(or in a distributed system, services that act on behalf of the subscribers) 
examine each event as it arrives and determine whether the published event 
is of interest. This version has the potential to be very inefficient if there 
are lots of messages and most messages are not of interest to a particular 
subscriber.
■
■Content-based publish-subscribe is distinguished from the previous two 
variants, which are broadly categorized as “topic-based.” Topics are 
predefined events, or messages, and a component subscribes to all events 
within the topic. Content, on the other hand, is much more general. Each 
event is associated with a set of attributes and is delivered to a subscriber 
only if those attributes match subscriber-defined patterns.
In practice the publish-subscribe pattern is typically realized by some form 
of message-oriented middleware, where the middleware is realized as a broker, 
managing the connections and channels of information between producers and 
consumers. This middleware is often responsible for the transformation of mes-
sages (or message protocols), in addition to routing and sometimes storing the 
messages. Thus the publish-subscribe pattern inherits the strengths and weak-
nesses of the broker pattern.
