13.2  Overview of the Patterns Catalog
211
the result (and any exceptions) back to the requesting client. In this way the client 
remains completely ignorant of the identity, location, and characteristics of the 
server. Because of this separation, if a server becomes unavailable, a replacement 
can be dynamically chosen by the broker. If a server is replaced with a different 
(compatible) service, again, the broker is the only component that needs to know 
of this change, and so the client is unaffected. Proxies are commonly introduced as 
intermediaries in addition to the broker to help with details of the interaction with 
the broker, such as marshaling and unmarshaling messages. 
The down sides of brokers are that they add complexity (brokers and 
possibly proxies must be designed and implemented, along with messaging 
protocols) and add a level of indirection between a client and a server, which will 
add latency to their communication. Debugging brokers can be difficult because 
they are involved in highly dynamic environments where the conditions leading 
to a failure may be difficult to replicate. The broker would be an obvious point of 
attack, from a security perspective, and so it needs to be hardened appropriately. 
Also a broker, if it is not designed carefully, can be a single point of failure for 
a large and complex system. And brokers can potentially be bottlenecks for 
communication.
Table 13.2 summarizes the solution of the broker pattern.
Table 13.2  Broker Pattern Solution
Overview
The broker pattern defines a runtime component, called a broker, that 
mediates the communication between a number of clients and servers. 
Elements
Client, a requester of services
Server, a provider of services
Broker, an intermediary that locates an appropriate server to fulfill a 
client’s request, forwards the request to the server, and returns the 
results to the client
Client-side proxy, an intermediary that manages the actual 
communication with the broker, including marshaling, sending, and 
unmarshaling of messages
Server-side proxy, an intermediary that manages the actual 
communication with the broker, including marshaling, sending, and 
unmarshaling of messages
Relations
The attachment relation associates clients (and, optionally, client-side 
proxies) and servers (and, optionally, server-side proxies) with brokers.
Constraints
The client can only attach to a broker (potentially via a client-side 
proxy). The server can only attach to a broker (potentially via a server-
side proxy).
Weaknesses Brokers add a layer of indirection, and hence latency, between clients 
and servers, and that layer may be a communication bottleneck.
The broker can be a single point of failure.
A broker adds up-front complexity.
A broker may be a target for security attacks.
A broker may be difficult to test.
