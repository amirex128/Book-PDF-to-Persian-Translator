186 
Part Two  Quality Attributes	
12—Other Quality Attributes
Variability
Variability is a special form of modifiability. It refers to the ability of a system 
and its supporting artifacts such as requirements, test plans, and configuration 
specifications to support the production of a set of variants that differ from each 
other in a preplanned fashion. Variability is an especially important quality at-
tribute in a software product line (this will be explored in depth in Chapter 25), 
where it means the ability of a core asset to adapt to usages in the different prod-
uct contexts that are within the product line scope. The goal of variability in a 
software product line is to make it easy to build and maintain products in the 
product line over a period of time. Scenarios for variability will deal with the 
binding time of the variation and the people time to achieve it.
Portability
Portability is also a special form of modifiability. Portability refers to the ease 
with which software that was built to run on one platform can be changed to 
run on a different platform. Portability is achieved by minimizing platform de-
pendencies in the software, isolating dependencies to well-identified locations, 
and writing the software to run on a “virtual machine” (such as a Java Virtual 
Machine) that encapsulates all the platform dependencies within. Scenarios de-
scribing portability deal with moving software to a new platform by expending 
no more than a certain level of effort or by counting the number of places in the 
software that would have to change.
Development Distributability
Development distributability is the quality of designing the software to support 
distributed software development. Many systems these days are developed using 
globally distributed teams. One problem that must be overcome when develop-
ing with distributed teams is coordinating their activities. The system should be 
designed so that coordination among teams is minimized. This minimal coor-
dination needs to be achieved both for the code and for the data model. Teams 
working on modules that communicate with each other may need to negotiate 
the interfaces of those modules. When a module is used by many other mod-
ules, each developed by a different team, communication and negotiation become 
more complex and burdensome. Similar considerations apply for the data model. 
Scenarios for development distributability will deal with the compatibility of the 
communication structures and data model of the system being developed and the 
coordination mechanisms of the organizations doing the development.
