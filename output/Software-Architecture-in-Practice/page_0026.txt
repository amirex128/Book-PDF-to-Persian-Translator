1.1  What Software Architecture Is and What It Isn’t
5
decomposition structure in fact. Another kind of module structure emerges 
as an output of object-oriented analysis and design—class diagrams. If you 
aggregate your modules into layers, you’ve created another (and very use-
ful) module structure. Module structures are static structures, in that they 
focus on the way the system’s functionality is divided up and assigned to 
implementation teams. 
2.	
Other structures are dynamic, meaning that they focus on the way the el-
ements interact with each other at runtime to carry out the system’s func-
tions. Suppose the system is to be built as a set of services. The services, 
the infrastructure they interact with, and the synchronization and interaction 
relations among them form another kind of structure often used to describe 
a system. These services are made up of (compiled from) the programs in 
the various implementation units that we just described. In this book we 
will call runtime structures component-and-connector (C&C) structures. 
The term component is overloaded in software engineering. In our use, a 
component is always a runtime entity.
3.	
A third kind of structure describes the mapping from software structures 
to the system’s organizational, developmental, installation, and execution 
environments. For example, modules are assigned to teams to develop, and 
assigned to places in a file structure for implementation, integration, and 
testing. Components are deployed onto hardware in order to execute. These 
mappings are called allocation structures.
Although software comprises an endless supply of structures, not all of them 
are architectural. For example, the set of lines of source code that contain the let-
ter “z,” ordered by increasing length from shortest to longest, is a software struc-
ture. But it’s not a very interesting one, nor is it architectural. A structure is archi-
tectural if it supports reasoning about the system and the system’s properties. The 
reasoning should be about an attribute of the system that is important to some 
stakeholder. These include functionality achieved by the system, the availability 
of the system in the face of faults, the difficulty of making specific changes to the 
system, the responsiveness of the system to user requests, and many others. We 
will spend a great deal of time in this book on the relationship between architec-
ture and quality attributes like these.
Thus, the set of architectural structures is not fixed or limited. What is archi-
tectural is what is useful in your context for your system.
Architecture Is an Abstraction
Because architecture consists of structures and structures consist of elements1 
and relations, it follows that an architecture comprises software elements and 
1.  In this book we use the term “element” when we mean either a module or a component, and don’t 
want to distinguish.
