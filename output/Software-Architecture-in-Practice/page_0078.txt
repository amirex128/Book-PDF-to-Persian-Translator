3.7  What Do Architectures Influence? 
57
An architect designing a system for which the real-time deadlines are tight 
will make one set of design choices; the same architect, designing a similar sys-
tem in which the deadlines can be easily satisfied, will make different choices. 
And the same architect, designing a non-real-time system, is likely to make quite 
different choices still. Even with the same requirements, hardware, support soft-
ware, and human resources available, an architect designing a system today is 
likely to design a different system than might have been designed five years ago. 
3.7  What Do Architectures Influence? 
The story about contexts influencing architectures has a flip side. It turns out that 
architectures have an influence on the very factors that influence them. Specifi-
cally, the existence of an architecture affects the technical, project, business, and 
professional contexts that subsequently influence future architectures.
Here is how the cycle works:
■
■Technical context. The architecture can affect stakeholder requirements 
for the next system by giving the customer the opportunity to receive a 
system (based on the same architecture) in a more reliable, timely, and 
economical manner than if the subsequent system were to be built from 
scratch, and typically with fewer defects. A customer may in fact be willing 
to relax some of their requirements to gain these economies. Shrink-
wrapped software has clearly affected people’s requirements by providing 
solutions that are not tailored to any individual’s precise needs but are 
instead inexpensive and (in the best of all possible worlds) of high quality. 
Software product lines have the same effect on customers who cannot be so 
flexible with their requirements.
■
■Project context. The architecture affects the structure of the developing 
organization. An architecture prescribes a structure for a system; as we will 
see, it particularly prescribes the units of software that must be implemented 
(or otherwise obtained) and integrated to form the system. These units 
are the basis for the development project’s structure. Teams are formed 
for individual software units; and the development, test, and integration 
activities all revolve around the units. Likewise, schedules and budgets 
allocate resources in chunks corresponding to the units. If a company 
becomes adept at building families of similar systems, it will tend to invest 
in each team by nurturing each area of expertise. Teams become embedded 
in the organization’s structure. This is feedback from the architecture to 
the developing organization. In any design undertaken by the organization 
at large, these groups have a strong voice in the system’s decomposition, 
pressuring for the continued existence of the portions they control.
