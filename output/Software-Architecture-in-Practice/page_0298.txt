15.1  How Much Architecture?
277
were initially employed on small- to medium-sized projects with short time 
frames and enjoyed considerable success. They were not often used for larger 
projects, particularly those with distributed development. This is not surprising, 
given the twelve principles. 
In particular principles 4 and 6 imply the need for co-location or, if co-lo-
cation is not possible, then at least a high level of communication among the 
distributed teams. Indeed, one of the core practices of Agile projects is frequent 
(often daily) face-to-face meetings. Principle 11 says that, for best results, teams 
should be self-organizing. But self-organization is a social process that is much 
more cumbersome if those teams are not physically co-located. In this case we 
believe that the creators of the twelve Agile principles got it wrong. The best 
teams may be self-organizing, but the best architectures still require much more 
than this—technical skill, deep experience, and deep knowledge.
Principle 1 argues for “early and continuous delivery of valuable software” 
and principle 7 claims that “Working software is the primary measure of prog-
ress.” One might argue that a focus on early and continuous release of software, 
where “working” is measured in terms of customer-facing features, leaves little 
time for addressing the kinds of cross-cutting concerns and infrastructure critical 
to a high-quality large-scale system. 
It has been claimed by some that there is an inherent tension between being 
agile and doing a conscientious job of architecting. But is there truly a tension? 
And if so, how do you go about characterizing it and reasoning about it? In short, 
how much architecture is the “right” amount of architecture?
Our brief answer, in this chapter, is that there is no tension. This issue is not 
“Agile versus Architecture” but rather “how best to blend Agile and Architecture.”
One more point, before we dive into the details: The Agile Manifesto is it-
self a compromise: a pronouncement created by a committee. The fact that ar-
chitecture doesn’t clearly live anywhere within it is most likely because they had 
no consensus opinion on this topic and not because there is any inherent conflict.
15.1  How Much Architecture?
We often think of the early software development methods that emerged in the 
1970s—such as the Waterfall method—as being plan-driven and inflexible. But 
this inflexibility is not for nothing. Having a strong up-front plan provides for 
considerable predictability (as long as the requirements don’t change too much) 
and makes it easier to coordinate large numbers of teams. Can you imagine a 
large construction or aerospace project without heavy up-front planning? Agile 
methods and practitioners, on the other hand, often scorn planning, preferring in-
stead teamwork, frequent face-to-face communication, flexibility, and adaptation. 
This enhances invention and creativity. 
