12 
Part One  Introduction	
1—What Is Software Architecture?
And so forth. Each structure provides the architect with a different insight 
into the design (that is, each structure can be analyzed for its ability to deliver a 
quality attribute). But perhaps more important, each structure presents the archi-
tect with an engineering leverage point: By designing the structures appropri-
ately, the desired quality attributes emerge.
Scenarios, described in Chapter 4, are useful for exercising a given structure 
as well as its connections to other structures. For example, a software engineer 
wanting to make a change to the concurrency structure of a system would need 
to consult the concurrency and deployment views, because the affected mecha-
nisms typically involve processes and threads, and physical distribution might 
involve different control mechanisms than would be used if the processes were 
co-located on a single machine. If control mechanisms need to be changed, the 
module decomposition would need to be consulted to determine the extent of the 
changes.
Some Useful Module Structures
Useful module structures include the following:
■
■Decomposition structure. The units are modules that are related to each 
other by the is-a-submodule-of relation, showing how modules are decom-
posed into smaller modules recursively until the modules are small enough 
to be easily understood. Modules in this structure represent a common 
starting point for design, as the architect enumerates what the units of 
software will have to do and assigns each item to a module for subsequent 
(more detailed) design and eventual implementation. Modules often have 
products (such as interface specifications, code, test plans, etc.) associated 
with them. The decomposition structure determines, to a large degree, the 
system’s modifiability, by assuring that likely changes are localized. That 
is, changes fall within the purview of at most a few (preferably small) mod-
ules. This structure is often used as the basis for the development project’s 
organization, including the structure of the documentation, and the project’s 
integration and test plans. The units in this structure tend to have names that 
are organization-specific such as “segment” or “subsystem.”
■
■Uses structure. In this important but overlooked structure, the units here are 
also modules, perhaps classes. The units are related by the uses relation, 
a specialized form of dependency. A unit of software uses another if the 
correctness of the first requires the presence of a correctly functioning 
version (as opposed to a stub) of the second. The uses structure is used to 
engineer systems that can be extended to add functionality, or from which 
useful functional subsets can be extracted. The ability to easily create a 
subset of a system allows for incremental development.
