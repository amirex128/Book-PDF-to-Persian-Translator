168 
Part Two  Quality Attributes	
10—Testability
Also, systems that require complete data consistency at all times are of-
ten more complex than those that do not. If your requirements allow it, con-
sider building your system under the “eventual consistency” model, where 
sooner or later (but maybe not right now) your data will reach a consistent 
state. This often makes system design simpler, and therefore easier to test.
Finally, some architectural styles lend themselves to testability. In a 
layered style, you can test lower layers first, then test higher layers with 
confidence in the lower layers. 
■
■Limit nondeterminism. The counterpart to limiting structural complexity 
is limiting behavioral complexity, and when it comes to testing, 
nondeterminism is a very pernicious form of complex behavior. 
Nondeterministic systems are harder to test than deterministic systems. 
This tactic involves finding all the sources of nondeterminism, such as 
unconstrained parallelism, and weeding them out as much as possible. 
Some sources of nondeterminism are unavoidable—for instance, in multi-
threaded systems that respond to unpredictable events—but for such 
systems, other tactics (such as record/playback) are available. 
Figure 10.4 provides a summary of the tactics used for testability.
Testability Tactics
Control and Observe
System State
Limit Complexity
Specialized
Interfaces
Limit Structural
Complexity
Limit
Nondeterminism
Tests
Executed
Faults
Detected
Record/
Playback
Localize State
Storage
Sandbox
Executable
Assertions
Abstract Data
Sources
Figure 10.4  Testability tactics
