216 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
do synthesis across data derived from different sensors. The final filter typically 
passes its data to an application, for example providing input to modeling or 
visualization tools. 
Other systems that use pipe-and-filter include those built using UNIX pipes, 
the request processing architecture of the Apache web server, the map-reduce 
pattern (presented later in this chapter), Yahoo! Pipes for processing RSS feeds, 
many workflow engines, and many scientific computation systems that have to 
process and analyze large streams of captured data. Figure 13.8 shows a UML 
diagram of a pipe-and-filter system.
Table 13.4  Pipe-and-Filter Pattern Solution
Overview
Data is transformed from a system’s external inputs to its external 
outputs through a series of transformations performed by its filters 
connected by pipes.
Elements
Filter, which is a component that transforms data read on its input 
port(s) to data written on its output port(s). Filters can execute 
concurrently with each other. Filters can incrementally transform 
data; that is, they can start producing output as soon as they start 
processing input. Important characteristics include processing rates, 
input/output data formats, and the transformation executed by the 
filter.
Pipe, which is a connector that conveys data from a filter’s output 
port(s) to another filter’s input port(s). A pipe has a single source 
for its input and a single target for its output. A pipe preserves the 
sequence of data items, and it does not alter the data passing 
through. Important characteristics include buffer size, protocol of 
interaction, transmission speed, and format of the data that passes 
through a pipe.
Relations
The attachment relation associates the output of filters with the input 
of pipes and vice versa. 
Constraints
Pipes connect filter output ports to filter input ports. 
Connected filters must agree on the type of data being passed along 
the connecting pipe.
Specializations of the pattern may restrict the association of 
components to an acyclic graph or a linear sequence, sometimes 
called a pipeline.
Other specializations may prescribe that components have certain 
named ports, such as the stdin, stdout, and stderr ports of UNIX 
filters.
Weaknesses
The pipe-and-filter pattern is typically not a good choice for an 
interactive system.
Having large numbers of independent filters can add substantial 
amounts of computational overhead.
Pipe-and-filter systems may not be appropriate for long-running 
computations.
