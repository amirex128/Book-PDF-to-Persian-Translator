66 
Part Two  Quality Attributes	
4—Understanding Quality Attributes
Functional Requirements
After more than 15 years of writing and discussing the distinction between 
functional requirements and quality requirements, the definition of func-
tional requirements still eludes me. Quality attribute requirements are well 
defined: performance has to do with the timing behavior of the system, 
modifiability has to do with the ability of the system to support changes in 
its behavior or other qualities after initial deployment, availability has to do 
with the ability of the system to survive failures, and so forth.
Function, however, is much more slippery. An international standard 
(ISO 25010) defines functional suitability as “the capability of the software 
product to provide functions which meet stated and implied needs when 
the software is used under specified conditions.” That is, functionality is the 
ability to provide functions. One interpretation of this definition is that func-
tionality describes what the system does and quality describes how well 
the system does its function. That is, qualities are attributes of the system 
and function is the purpose of the system.
This distinction breaks down, however, when you consider the nature 
of some of the “function.” If the function of the software is to control engine 
behavior, how can the function be correctly implemented without consid-
ering timing behavior? Is the ability to control access through requiring a 
user name/password combination not a function even though it is not the 
purpose of any system?
I like much better the use of the word “responsibility” to describe com-
putations that a system must perform. Questions such as “What are the 
timing constraints on that set of responsibilities?”, “What modifications are 
anticipated with respect to that set of responsibilities?”, and “What class of 
users is allowed to execute that set of responsibilities?” make sense and 
are actionable.
The achievement of qualities induces responsibility; think of the user 
name/password example just mentioned. Further, one can identify respon-
sibilities as being associated with a particular set of requirements.
So does this mean that the term “functional requirement” shouldn’t be 
used? People have an understanding of the term, but when precision is 
desired, we should talk about sets of specific responsibilities instead.
Paul Clements has long ranted against the careless use of the term 
“nonfunctional,” and now it’s my turn to rant against the careless use of the 
term “functional”—probably equally ineffectually.
—LB
Quality attributes have been of interest to the software community at least 
since the 1970s. There are a variety of published taxonomies and definitions, and 
many of them have their own research and practitioner communities. From an 
