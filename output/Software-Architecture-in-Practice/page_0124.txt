103
6
Interoperability
With Liming Zhu
The early bird (A) arrives and catches worm (B), pulling 
string (C) and shooting off pistol (D). Bullet (E) bursts 
balloon (F), dropping brick (G) on bulb (H) of atomizer 
(I) and shooting perfume (J) on sponge (K). As sponge 
gains in weight, it lowers itself and pulls string (L), 
raising end of board (M). Cannon ball (N) drops on nose 
of sleeping gentleman. String tied to cannon ball releases 
cork (O) of vacuum bottle (P) and ice water falls on 
sleeper’s face to assist the cannon ball in its good work.
—Rube Goldberg, instructions for “a simple alarm clock”
Interoperability is about the degree to which two or more systems can usefully 
exchange meaningful information via interfaces in a particular context. The defi-
nition includes not only having the ability to exchange data (syntactic interoper-
ability) but also having the ability to correctly interpret the data being exchanged 
(semantic interoperability). A system cannot be interoperable in isolation. Any 
discussion of a system’s interoperability needs to identify with whom, with what, 
and under what circumstances—hence, the need to include the context.
Interoperability is affected by the systems expected to interoperate. If we 
already know the interfaces of external systems with which our system will in-
teroperate, then we can design that knowledge into the system. Or we can design 
our system to interoperate in a more generic fashion, so that the identity and the 
services that another system provides can be bound later in the life cycle, at build 
time or runtime.
Like all quality attributes, interoperability is not a yes-or-no proposition but 
has shades of meaning. There are several characterizing frameworks for interop-
erability, all of which seem to define five levels of interoperability “maturity” 
(see the “For Further Reading” section at the end of this chapter for a pointer). 
The lowest level signifies systems that do not share data at all, or do not do so 
