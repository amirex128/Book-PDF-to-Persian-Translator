15.1  How Much Architecture?
279
system being developed is a large one, then emphasis on delivering features early 
will cause massive coordination problems. In an architecture-centric project, a 
layered architecture is a way to solve this problem, with features on upper layers 
using shared functionality of the lower layers, but that requires up-front planning 
and design and feature analysis. 
Successful projects clearly need a successful blend of the two approaches. For 
the vast majority of nontrivial projects, this is not and never should be an either/or 
choice. Too much up-front planning and commitment can stifle creativity and the 
ability to adapt to changing requirements. Too much agility can be chaos. No one 
would want to fly in an aircraft where the flight control software had not been rig-
orously planned and thoroughly analyzed. Similarly, no one would want to spend 
18 months planning an e-commerce website for their latest cell-phone model, or 
video game, or lipstick (all of which are guaranteed to be badly out of fashion in 
18 months). What we all want is the sweet spot—what George Fairbanks calls “just 
enough architecture.” This is not just a matter of doing the right amount of architec-
ture work, but also doing it at the right time. Agile projects tend to want to evolve the 
architecture, as needed, in real time, whereas large software projects have tradition-
ally favored considerable up-front analysis and planning. 
An Analytic Perspective on Up-front Work vs. Agility
Boehm and Turner, analyzing historical data from 161 industrial projects, 
examine the effects of up-front architecture and risk resolution effort. This 
corresponds to the COnstructive COst MOdel II (COCOMO II) scale factor 
called “RESL.” There are two activities that can add time to the basic 
project schedule:
■
■
Up-front design work on the architecture and up-front risk identification, 
planning, and resolution work
■
■
Rework due to fixing defects and addressing modification requests. 
Intuitively, these two trade off against each other: The more we invest in 
planning, the less (we hope) rework is needed. 
So Boehm and Turner synthesized a model that allowed them to plot 
these two values against each other. The axes of their graph (Figure 15.1) 
show percent of time added for RESL and percent of time added to the 
schedule. The amount of architecture and risk resolution effort is plotted 
as the dashed line, moving up and to the right from near the origin, and 
ranges from 5 to 50 percent of project effort. This effort is plotted against 
three hypothetical projects, measured in thousands of source lines of code 
(KSLOC):
■
■
One project of 10 KSLOC 
■
■
One project of 100 KSLOC
■
■
One project of 10,000 KSLOC
