15.3  A Brief Example of Agile Architecting
285
1.	
First, the WebArrow team quickly created and crudely analyzed an initial 
software and system architecture concept, and then they implemented and 
fleshed it out incrementally, starting with the most critical functionality that 
could be shown to a customer.
2.	
They adapted the architecture and refactored the design and code whenever 
new requirements popped up or a better understanding of the problem do-
main emerged. 
3.	
Continuous experimentation, empirical evaluation, and architecture analysis 
were used to help determine architectural decisions as the product evolved.
For example, incremental improvement in the scalability and fault-tolerance 
of WebArrow was guided by significant experimentation. The sorts of questions 
that our experiments (spikes) were designed to answer were these:
■
■Would moving to a distributed database from local flat files negatively im-
pact feedback time (latency) for users?
■
■What (if any) scalability improvement would result from using mod_perl 
versus standard Perl? How difficult would the development and quality as-
surance effort be to convert to mod_perl?
■
■How many participants could be hosted by a single meeting server?
■
■What was the correct ratio between database servers and meeting servers?
Questions like these are difficult to answer analytically. The answers rely 
on the behavior and interactions of third-party components, and on performance 
characteristics of software for which no standard analytic models exist. The Web­
Arrow team’s approach was to build an extensive testing infrastructure (including 
both simulation and instrumentation), and to use this infrastructure to compare 
the performance of each modification to the base system. This allowed the team 
to determine the effect of each proposed improvement before committing it to the 
final system. 
The lesson here is that making architecture processes agile does not require 
a radical re-invention of either Agile practices or architecture methods. The Web­
Arrow team’s emphasis on experimentation proved the key factor; it was our 
way of achieving an agile form of architecture conception, implementation, and 
evaluation. 
This approach meant that the WebArrow architecture development approach 
was in line with many of the twelve principles, including:
■
■Principle 1, providing early and continuous delivery of working software
■
■Principle 2, welcoming changing requirements
■
■Principle 3, delivering working software frequently
■
■Principle 8, promoting sustainable development at a constant pace 
■
■Principle 9, giving continuous attention to technical excellence and good 
design
