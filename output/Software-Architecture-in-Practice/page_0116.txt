5.2  Tactics for Availability
95
as memory leaks, fragmentation, or soft errors in an unprotected cache) be-
fore the accumulation of faults affects service (resulting in system failure). 
Another term for this tactic is software rejuvenation.
■
■Transactions. Systems targeting high-availability services leverage transac-
tional semantics to ensure that asynchronous messages exchanged between 
distributed components are atomic, consistent, isolated, and durable. These 
four properties are called the “ACID properties.” The most common realiza-
tion of the transactions tactic is “two-phase commit” (a.k.a. 2PC) protocol. 
This tactic prevents race conditions caused by two processes attempting to 
update the same data item.
■
■Predictive model. A predictive model, when combined with a monitor, is 
employed to monitor the state of health of a system process to ensure that 
the system is operating within its nominal operating parameters, and to take 
corrective action when conditions are detected that are predictive of likely 
future faults. The operational performance metrics monitored are used to 
predict the onset of faults; examples include session establishment rate (in 
an HTTP server), threshold crossing (monitoring high and low water marks 
for some constrained, shared resource), or maintaining statistics for process 
state (in service, out of service, under maintenance, idle), message queue 
length statistics, and so on.
■
■Exception prevention. This tactic refers to techniques employed for the pur-
pose of preventing system exceptions from occurring. The use of exception 
classes, which allows a system to transparently recover from system excep-
tions, was discussed previously. Other examples of exception prevention 
include abstract data types, such as smart pointers, and the use of wrappers 
to prevent faults, such as dangling pointers and semaphore access violations 
from occurring. Smart pointers prevent exceptions by doing bounds check-
ing on pointers, and by ensuring that resources are automatically deallocat-
ed when no data refers to it. In this way resource leaks are avoided.
■
■Increase competence set. A program’s competence set is the set of states in 
which it is “competent” to operate. For example, the state when the denom-
inator is zero is outside the competence set of most divide programs. When 
a component raises an exception, it is signaling that it has discovered itself 
to be outside its competence set; in essence, it doesn’t know what to do and 
is throwing in the towel. Increasing a component’s competence set means 
designing it to handle more cases—faults—as part of its normal operation. 
For example, a component that assumes it has access to a shared resource 
might throw an exception if it discovers that access is blocked. Another 
component might simply wait for access, or return immediately with an 
indication that it will complete its operation on its own the next time it does 
have access. In this example, the second component has a larger compe-
tence set than the first. 
