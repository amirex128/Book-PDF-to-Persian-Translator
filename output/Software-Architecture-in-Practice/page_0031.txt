10 
Part One  Introduction	
1—What Is Software Architecture?
Structures and Views
We will be using the related terms structure and view when discussing architec-
ture representation. 
■
■A view is a representation of a coherent set of architectural elements, as 
written by and read by system stakeholders. It consists of a representation 
of a set of elements and the relations among them. 
■
■A structure is the set of elements itself, as they exist in software or 
hardware.
In short, a view is a representation of a structure. For example, a module 
structure is the set of the system’s modules and their organization. A module view 
is the representation of that structure, documented according to a template in a 
chosen notation, and used by some system stakeholders. 
So: Architects design structures. They document views of those structures.
Three Kinds of Structures
As we saw in the previous section, architectural structures can be divided into 
three major categories, depending on the broad nature of the elements they show. 
These correspond to the three broad kinds of decisions that architectural design 
involves: 
1.	
Module structures embody decisions as to how the system is to be struc-
tured as a set of code or data units that have to be constructed or procured. 
In any module structure, the elements are modules of some kind (perhaps 
classes, or layers, or merely divisions of functionality, all of which are units 
of implementation). Modules represent a static way of considering the sys-
tem. Modules are assigned areas of functional responsibility; there is less 
emphasis in these structures on how the resulting software manifests itself 
at runtime. Module structures allow us to answer questions such as these: 
■
■What is the primary functional responsibility assigned to each module? 
■
■What other software elements is a module allowed to use? 
■
■What other software does it actually use and depend on? 
■
■What modules are related to other modules by generalization or special-
ization (i.e., inheritance) relationships? 
Module structures convey this information directly, but they can also be 
used by extension to ask questions about the impact on the system when the 
responsibilities assigned to each module change. In other words, examining 
a system’s module structures—that is, looking at its module views—is an 
excellent way to reason about a system’s modifiability. 
2.	
Component-and-connector structures embody decisions as to how the 
system is to be structured as a set of elements that have runtime behav-
ior (components) and interactions (connectors). In these structures, the 
