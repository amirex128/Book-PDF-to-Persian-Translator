15.5  Summary
287
What is our advice? 
1.	
If you are building a large and complex system with relatively stable and 
well-understood requirements, it is probably optimal to do a large amount 
of architecture work up front (see Figure 15.1 for some sample values for 
“large”).
2.	
On big projects with vague or unstable requirements, start by quickly de-
signing a complete candidate architecture even if it is just a “PowerPoint 
architecture,” even if it leaves out many details, and even if you design it 
in just a couple of days. Alistair Cockburn has introduced a similar idea 
in his Crystal Clear method, called a “walking skeleton,” which is enough 
architecture to be able to demonstrate end-to-end functionality, linking 
together the major system functions. Be prepared to change and elaborate 
this architecture as circumstances dictate, as you perform your spikes and 
experiments, and as functional and quality attribute requirements emerge 
and solidify. This early architecture will help guide development, help with 
early problem understanding and analysis, help in requirements elicitation, 
help teams coordinate, and help in the creation of coding templates and oth-
er project standards.
3.	
On smaller projects with uncertain requirements, at least try to get agree-
ment on the central patterns to be employed, but don’t spend too much time 
on construction, documentation, or analysis up front. In Chapter 21 we will 
show how analysis can be done in a relatively lightweight and “just-in-
time” fashion. 
15.5  Summary
The Agile software movement is emblemized by the Agile Manifesto and a set 
of principles that assign high value to close-knit teams and continuous and fre-
quent delivery of working software. Agile processes were initially employed on 
small- to medium-sized projects with short time frames and enjoyed considerable 
success. They were not often used for larger projects, particularly those with dis-
tributed development. 
Although there might appear to be an inherent tension between being ag-
ile and architecture practices of the sort prescribed in this book, the underlying 
philosophies are not at odds and can be married to great effect. Successful proj-
ects need a successful blend of the two approaches. Too much up-front planning 
and commitment can be stifling and unresponsive to customers’ needs, whereas 
too much agility can simply result in chaos. Agile architects tend to take a middle 
ground, proposing an initial architecture and running with that, until its technical 
debt becomes too great, at which point they need to refactor.
