228 
Part Two  Quality Attributes	
13—Architectural Tactics and Patterns
There are some specific refinements of this pattern that are in common use. 
We will describe several of these later in this section.
The computational model for the publish-subscribe pattern is best thought of 
as a system of independent processes or objects, which react to events generated 
by their environment, and which in turn cause reactions in other components as 
a side effect of their event announcements. An example of the publish-subscribe 
pattern, implemented on top of the Eclipse platform, is shown in Figure 13.12.
Typical examples of systems that employ the publish-subscribe pattern are 
the following:
■
■Graphical user interfaces, in which a user’s low-level input actions are 
treated as events that are routed to appropriate input handlers
■
■MVC-based applications, in which view components are notified when the 
state of a model object changes
■
■Enterprise resource planning (ERP) systems, which integrate many compo-
nents, each of which is only interested in a subset of system events
■
■Extensible programming environments, in which tools are coordinated 
through events
■
■Mailing lists, where a set of subscribers can register interest in specific 
topics 
Key:
Eclipse UI event manager
Register 
action
handlers
UI
event
handle 
UI event
CRUD
fact data
assert/modify/
retract fact
SEI.ArchE.UI
plug-in config
views and
editors
Fact
data in
memory
ArchE
core
listener
action
handler
ArchE
core
façade
Jess
new or
setField()
notify data
change
register views as 
observer of facts
register to fact 
data changes
notify fact
data change
Action
handler
object
UI screen
object
Java
object
External
program
XML file
Event manager
(part of Eclipse
platform)
Register to
listen for event
Event send/
receive
Java method
call
Figure 13.12  A typical publish-subscribe pattern realization
