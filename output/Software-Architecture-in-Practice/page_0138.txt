117
7
Modifiability
Adapt or perish, now as ever, is 
nature’s inexorable imperative.
—H.G. Wells
Change happens.
Study after study shows that most of the cost of the typical software system 
occurs after it has been initially released. If change is the only constant in the uni-
verse, then software change is not only constant but ubiquitous. Changes happen 
to add new features, to change or even retire old ones. Changes happen to fix de-
fects, tighten security, or improve performance. Changes happen to enhance the 
user’s experience. Changes happen to embrace new technology, new platforms, 
new protocols, new standards. Changes happen to make systems work together, 
even if they were never designed to do so. 
Modifiability is about change, and our interest in it centers on the cost and 
risk of making changes. To plan for modifiability, an architect has to consider 
four questions: 
■
■What can change? A change can occur to any aspect of a system: the 
functions that the system computes, the platform (the hardware, operating 
system, middleware), the environment in which the system operates 
(the systems with which it must interoperate, the protocols it uses to 
communicate with the rest of the world), the qualities the system exhibits 
(its performance, its reliability, and even its future modifications), and its 
capacity (number of users supported, number of simultaneous operations). 
■
■What is the likelihood of the change? One cannot plan a system for all 
potential changes—the system would never be done, or if it was done 
it would be far too expensive and would likely suffer quality attribute 
problems in other dimensions. Although anything might change, the 
architect has to make the tough decisions about which changes are likely, 
and hence which changes are to be supported, and which are not.
