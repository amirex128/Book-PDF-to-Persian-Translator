98 
Part Two  Quality Attributes	
5—Availability
Table 5.4  Checklist to Support the Design and Analysis Process for 
Availability, continued
Category
Checklist
Binding Time
Determine how and when architectural elements are bound. 
If late binding is used to alternate between components 
that can themselves be sources of faults (e.g., processes, 
processors, communication channels), ensure the chosen 
availability strategy is sufficient to cover faults introduced by 
all sources. For example:
■
■
If late binding is used to switch between artifacts such 
as processors that will receive or be the subject of faults, 
will the chosen fault detection and recovery mechanisms 
work for all possible bindings?
■
■
If late binding is used to change the definition or toler-
ance of what constitutes a fault (e.g., how long a process 
can go without responding before a fault is assumed), 
is the recovery strategy chosen sufficient to handle all 
cases? For example, if a fault is flagged after 0.1 millisec-
onds, but the recovery mechanism takes 1.5 seconds to 
work, that might be an unacceptable mismatch.
■
■
What are the availability characteristics of the late bind-
ing mechanism itself? Can it fail?
Choice of Technology
Determine the available technologies that can (help) detect 
faults, recover from faults, or reintroduce failed components. 
Determine what technologies are available that help the 
response to a fault (e.g., event loggers). 
Determine the availability characteristics of chosen 
technologies themselves: What faults can they recover 
from? What faults might they introduce into the system? 
5.4  Summary
Availability refers to the ability of the system to be available for use, especially 
after a fault occurs. The fault must be recognized (or prevented) and then the 
system must respond in some fashion. The response desired will depend on the 
criticality of the application and the type of fault and can range from “ignore it” 
to “keep on going as if it didn’t occur.”
Tactics for availability are categorized into detect faults, recover from faults 
and prevent faults. Detection tactics depend, essentially, on detecting signs of life 
from various components. Recovery tactics are some combination of retrying an 
operation or maintaining redundant data or computations. Prevention tactics de-
pend either on removing elements from service or utilizing mechanisms to limit 
the scope of faults.
