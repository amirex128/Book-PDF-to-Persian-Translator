8.2  Tactics for Performance
137
With this background, we turn to our tactic categories. We can either reduce 
demand for resources or make the resources we have handle the demand more 
effectively: 
■
■Control resource demand. This tactic operates on the demand side to 
produce smaller demand on the resources that will have to service the 
events.
■
■Manage resources. This tactic operates on the response side to make the re-
sources at hand work more effectively in handling the demands put to them.
Control Resource Demand
One way to increase performance is to carefully manage the demand for re-
sources. This can be done by reducing the number of events processed by en-
forcing a sampling rate, or by limiting the rate at which the system responds to 
events. In addition, there are a number of techniques for ensuring that the re-
sources that you do have are applied judiciously:
■
■Manage sampling rate. If it is possible to reduce the sampling frequency 
at which a stream of environmental data is captured, then demand can be 
reduced, typically with some attendant loss of fidelity. This is common 
in signal processing systems where, for example, different codecs can be 
chosen with different sampling rates and data formats. This design choice 
is made to maintain predictable levels of latency; you must decide whether 
having a lower fidelity but consistent stream of data is preferable to losing 
packets of data.
■
■Limit event response. When discrete events arrive at the system (or element) 
too rapidly to be processed, then the events must be queued until they can 
be processed. Because these events are discrete, it is typically not desirable 
to “downsample” them. In such a case, you may choose to process events 
only up to a set maximum rate, thereby ensuring more predictable process-
ing when the events are actually processed. This tactic could be triggered 
by a queue size or processor utilization measure exceeding some warning 
level. If you adopt this tactic and it is unacceptable to lose any events, then 
you must ensure that your queues are large enough to handle the worst case. 
If, on the other hand, you choose to drop events, then you need to choose a 
policy for handling this situation: Do you log the dropped events, or simply 
ignore them? Do you notify other systems, users, or administrators?
■
■Prioritize events. If not all events are equally important, you can impose a 
priority scheme that ranks events according to how important it is to service 
them. If there are not enough resources available to service them when they 
arise, low-priority events might be ignored. Ignoring events consumes min-
imal resources (including time), and thus increases performance compared 
to a system that services all events all the time. For example, a building 
