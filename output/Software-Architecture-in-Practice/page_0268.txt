13.5  Summary
247
Applying successive tactics is like moving through a game space, and it’s a 
little like chess: Good players are able to see the consequences of the move they’re 
considering, and the very good players are able to look several moves ahead. In 
Chapter 17 we’ll see the activity of design treated as an exercise of “generate and 
test”: propose a design and test it to see if it’s satisfactory. Applying tactics to 
an existing design solution, such as a pattern, is one technique for generating a 
design for subsequent testing.
13.5  Summary
An architectural pattern
■
■is a package of design decisions that is found repeatedly in practice,
■
■has known properties that permit reuse, and 
■
■describes a class of architectures. 
Because patterns are (by definition) found repeatedly in practice, one does 
not invent them; one discovers them. 
Tactics are simpler than patterns. Tactics typically use just a single structure 
or computational mechanism, and they are meant to address a single architectural 
force. For this reason they give more precise control to an architect when 
making design decisions than patterns, which typically combine multiple design 
decisions into a package. Tactics are the “building blocks” of design from which 
architectural patterns are created. Tactics are atoms and patterns are molecules. 
An architectural pattern establishes a relationship between:
■
■A context. A recurring, common situation in the world that gives rise to a 
problem.
■
■A problem. The problem, appropriately generalized, that arises in the given 
context. 
■
■A solution. A successful architectural resolution to the problem, 
appropriately abstracted. 
Complex systems exhibit multiple patterns at once. 
Patterns can be categorized by the dominant type of elements that they show: 
module patterns show modules, component-and-connector patterns show compo-
nents and connectors, and allocation patterns show a combination of software 
elements (modules, components, connectors) and nonsoftware elements. Most 
published patterns are C&C patterns, but there are module patterns and allocation 
patterns as well. This chapter showed examples of each type.
A pattern is described as a solution to a class of problems in a general con-
text. When a pattern is chosen and applied, the context of its application becomes 
very specific. A documented pattern is therefore underspecified with respect to 
