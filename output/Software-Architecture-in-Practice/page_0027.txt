6 
Part One  Introduction	
1—What Is Software Architecture?
how the elements relate to each other. This means that architecture specifically 
omits certain information about elements that is not useful for reasoning about 
the system—in particular, it omits information that has no ramifications outside 
of a single element. Thus, an architecture is foremost an abstraction of a system 
that selects certain details and suppresses others. In all modern systems, elements 
interact with each other by means of interfaces that partition details about an el-
ement into public and private parts. Architecture is concerned with the public 
side of this division; private details of elements—details having to do solely with 
internal implementation—are not architectural. Beyond just interfaces, though, 
the architectural abstraction lets us look at the system in terms of its elements, 
how they are arranged, how they interact, how they are composed, what their 
properties are that support our system reasoning, and so forth. This abstraction 
is essential to taming the complexity of a system—we simply cannot, and do not 
want to, deal with all of the complexity all of the time. 
Every Software System Has a Software Architecture
Every system can be shown to comprise elements and relations among them to 
support some type of reasoning. In the most trivial case, a system is itself a single 
element—an uninteresting and probably non-useful architecture, but an architec-
ture nevertheless. 
Even though every system has an architecture, it does not necessarily follow 
that the architecture is known to anyone. Perhaps all of the people who designed 
the system are long gone, the documentation has vanished (or was never pro-
duced), the source code has been lost (or was never delivered), and all we have is 
the executing binary code. This reveals the difference between the architecture of 
a system and the representation of that architecture. Because an architecture can 
exist independently of its description or specification, this raises the importance 
of architecture documentation, which is described in Chapter 18, and architec-
ture reconstruction, discussed in Chapter 20.
Architecture Includes Behavior
The behavior of each element is part of the architecture insofar as that behavior 
can be used to reason about the system. This behavior embodies how elements 
interact with each other, which is clearly part of our definition of architecture. 
This tells us that box-and-line drawings that are passed off as architectures 
are in fact not architectures at all. When looking at the names of the boxes (da-
tabase, graphical user interface, executive, etc.), a reader may well imagine the 
functionality and behavior of the corresponding elements. This mental image 
approaches an architecture, but it springs from the imagination of the observ-
er’s mind and relies on information that is not present. This does not mean that 
the exact behavior and performance of every element must be documented in 
all circumstances—some aspects of behavior are fine-grained and below the 
