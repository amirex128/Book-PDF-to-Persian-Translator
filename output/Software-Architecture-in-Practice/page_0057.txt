36 
Part One  Introduction	
2—Why Is Software Architecture Important?
Commercial off-the-shelf components, open source software, publicly avail-
able apps, and networked services are all modern-day software instantiations of 
Whitney’s basic idea. Whitney’s musket parts had “interfaces” (having to do with 
fit and durability) and so do today’s interchangeable software components.
For software, the payoff can be 
■
■Decreased time to market (it should be easier to use someone else’s ready 
solution than build your own)
■
■Increased reliability (widely used software should have its bugs ironed out 
already)
■
■Lower cost (the software supplier can amortize development cost across 
their customer base)
■
■Flexibility (if the component you want to buy is not terribly special-
purpose, it’s likely to be available from several sources, thus increasing 
your buying leverage)
2.12  Restricting the Vocabulary of Design Alternatives
As useful architectural patterns are collected, it becomes clear that although soft-
ware elements can be combined in more or less infinite ways, there is something 
to be gained by voluntarily restricting ourselves to a relatively small number of 
choices of elements and their interactions. By doing so we minimize the design 
complexity of the system we are building. 
A software engineer is not an artiste, whose creativity and freedom are 
paramount. Engineering is about discipline, and discipline comes in part by re-
stricting the vocabulary of alternatives to proven solutions. Advantages of this 
approach include enhanced reuse, more regular and simpler designs that are more 
easily understood and communicated, more capable analysis, shorter selection 
time, and greater interoperability. Architectural patterns guide the architect and 
focus the architect on the quality attributes of interest in large part by restricting 
the vocabulary of design alternatives to a relatively small number.
Properties of software design follow from the choice of an architectural pat-
tern. Those patterns that are more desirable for a particular problem should im-
prove the implementation of the resulting design solution, perhaps by making it 
easier to arbitrate conflicting design constraints, by increasing insight into poorly 
understood design contexts, or by helping to surface inconsistencies in require-
ments. We will discuss architectural patterns in more detail in Chapter 13.
