200 
Part Two  Quality Attributes	
12—Other Quality Attributes
12.6  For Further Reading
For most of the quality attributes we discussed in this chapter, the Internet is your 
friend. You can find reasonable discussions of scalability, portability, and deploy-
ment strategies using your favorite search engine. Mobility is harder to find be-
cause it has so many meanings, but look under “mobile computing” as a start.
Distributed development is a topic covered in the International Conference 
on Global Software Engineering, and looking at the proceedings of this confer-
ence will give you access to the latest research in this area (www.icgse.org).
Release It! [Nygard 07] has a good discussion of monitorability (which he 
calls transparency) as well as potential problems that are manifested after ex-
tended operation of a system. The book also includes various patterns for dealing 
with some of the problems.
To gain an appreciation for the importance of software safety, we suggest 
reading some of the disaster stories that arise when software fails. A vener-
able source is the ACM Risks Forum newsgroup, known as comp.risks in the 
USENET community, available at www.risks.org. This list has been moderated 
by Peter Neumann since 1985 and is still going strong.
Nancy Leveson is an undisputed thought leader in the area of software and 
safety. If you’re working in safety-critical systems, you should become familiar 
with her work. You can start small with a paper like [Leveson 04], which dis-
cusses a number of software-related factors that have contributed to spacecraft 
accidents. Or you can start at the top with [Leveson 11], a book that treats safety 
in the context of today’s complex, sociotechnical, software-intensive systems. 
The Federal Aviation Administration is the U.S. government agency charged 
with oversight of the U.S. airspace system, and the agency is extremely concerned 
about safety. Their 2000 System Safety Handbook is a good practical overview of 
the topic [FAA 00].
IEEE STD-1228-1994 (“Software Safety Plans”) defines best practices for 
conducting software safety hazard analyses, to help ensure that requirements and 
attributes are specified for safety-critical software [IEEE 94]. The aeronautical 
standard DO-178B (due to be replaced by DO-178C as this book goes to publica-
tion) covers software safety requirements for aerospace applications.
A discussion of safety tactics can be found in the work of Wu and Kelly 
[Wu 06]. 
In particular, interlocks are an important tactic for safety. They enforce some 
safe sequence of events, or ensure that a safe condition exists before an action is 
taken. Your microwave oven shuts off when you open the door because of a hard-
ware interlock. Interlocks can be implemented in software also. For an interesting 
case study of this, see [Wozniak 07]. 
