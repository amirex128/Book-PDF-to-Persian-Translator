46 
Part One  Introduction	
3—The Many Contexts of Software Architecture
Making a Business Case for the System
A business case is, briefly, a justification of an organizational investment. It is a 
tool that helps you make business decisions by predicting how they will affect 
your organization. Initially, the decision will be a go/no-go for pursuing a new 
business opportunity or approach. After initiation, the business case is reviewed 
to assess the accuracy of initial estimates and then updated to examine new or al-
ternative angles on the opportunity. By documenting the expected costs, benefits, 
and risks, the business case serves as a repository of the business and market-
ing data. In this role, management uses the business case to determine possible 
courses of action. 
Knowing the business goals for the system—Chapter 16 will show you how 
to elicit and capture them in a systematic way—is also critical in the creation of a 
business case for a system. 
Creating a business case is broader than simply assessing the market need 
for a system. It is an important step in shaping and constraining any future re-
quirements. How much should the product cost? What is its targeted market? 
What is its targeted time to market and lifetime? Will it need to interface with 
other systems? Are there system limitations that it must work within?
These are all questions about which the system’s architects have specialized 
knowledge; they must contribute to the answers. These questions cannot be de-
cided solely by an architect, but if an architect is not consulted in the creation of 
the business case, the organization may be unable to achieve its business goals. 
Typically, a business case is created prior to the initiation of a project, but it also 
may be revisited during the course of the project for the organization to deter-
mine whether to continue making investments in the project. If the circumstances 
assumed in the initial version of the business case change, the architect may be 
called upon to establish how the system will change to reflect the new set of 
circumstances.
Understanding the Architecturally Significant Requirements
There are a variety of techniques for eliciting requirements from the stakeholders. 
For example, object-oriented analysis uses use cases and scenarios to embody 
requirements. Safety-critical systems sometimes use more rigorous approaches, 
such as finite-state-machine models or formal specification languages. In Part II 
of this book, which covers quality attributes, we introduce a collection of quality 
attribute scenarios that aid in the brainstorming, discussion, and capture of qual-
ity attribute requirements for a system. 
One fundamental decision with respect to the system being built is the extent 
to which it is a variation on other systems that have been constructed. Because 
it is a rare system these days that is not similar to other systems, requirements 
