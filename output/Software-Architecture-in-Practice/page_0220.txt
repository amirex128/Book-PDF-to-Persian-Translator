12.5  Dealing with “X-ability”: Bringing a New Quality Attribute into the Fold
199
These are the only parameters that can affect latency within this model. This 
is what gives the model its power. Furthermore, each of these parameters can be 
affected by various architectural decisions. This is what makes the model useful 
for an architect. For example, the routing algorithm can be fixed or it could be a 
load-balancing algorithm. A scheduling algorithm must be chosen. The topology 
can be affected by dynamically adding or removing new servers. And so forth.
The process of generating tactics based on a model is this:
■
■Enumerate the parameters of the model
■
■For each parameter, enumerate the architectural decisions that can affect 
this parameter
What results is a list of tactics to, in the example case, control performance 
and, in the more general case, to control the quality attribute that the model is 
concerned with. This makes the design problem seem much more tractable. This 
list of tactics is finite and reasonably small, because the number of parameters of 
the model is bounded, and for each parameter, the number of architectural deci-
sions to affect the parameter is limited.
Deriving tactics from models is fine as long as the quality attribute in ques-
tion has a model. Unfortunately, the number of such models is limited and is a 
subject of active research. There are no good architectural models for usability or 
security, for example. In the cases where we had no model to work from, we did 
four things to catalog the tactics: 
1.	
We interviewed experts in the field, asking them what they do as architects 
to improve the quality attribute response. 
2.	
We examined systems that were touted as having high usability (or testabil-
ity, or whatever tactic we were focusing on). 
3.	
We scoured the relevant design literature looking for common themes in 
design. 
4.	
We examined documented architectural patterns to look for ways they 
achieved the quality attribute responses touted for them.
Construct Design Checklists for the New Quality Attribute
Finally, examine the seven categories of design decisions in Chapter 4 and ask 
yourself (or your experts) how to specialize your new quality of interest to these 
categories. In particular, think about reviewing a software architecture and trying 
to figure out how well it satisfies your new qualities in these seven categories. 
What questions would you ask the architect of that system to understand how 
the design attempts to achieve the new quality? These are the basis for the design 
checklist.
