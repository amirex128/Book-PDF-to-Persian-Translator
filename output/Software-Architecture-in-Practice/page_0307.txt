286 
Part Three  Architecture in the Life Cycle	
15—Architecture in Agile Projects
15.4  Guidelines for the Agile Architect
Barry Boehm and colleagues have developed the Incremental Commitment 
Model—a hybrid process model framework that attempts to find the balance 
between agility and commitment. This model is based upon the following six 
principles:
1.	
Commitment and accountability of success-critical stakeholders
2.	
Stakeholder “satisficing” (meeting an acceptability threshold) based on suc-
cess-based negotiations and tradeoffs
3.	
Incremental and evolutionary growth of system definition and stakeholder 
commitment
4.	
Iterative system development and definition
5.	
Interleaved system definition and development allowing early fielding of 
core capabilities, continual adaptation to change, and timely growth of 
complex systems without waiting for every requirement and subsystem to 
be defined
6.	
Risk management—risk-driven anchor point milestones, which are key to 
synchronizing and stabilizing all of this concurrent activity
Grady Booch has also provided a set of guidelines for an agile architecture 
(which in turn imply some duties for the agile architect). Booch claims that all 
good software-intensive architectures are agile. What does he mean by this? He 
means that a successful architecture is resilient and loosely coupled. It is com-
posed of a core set of well-reasoned design decisions but still contains some 
“wiggle room” that allows modifications to be made and refactorings to be done, 
without ruining the original structure. 
Booch also notes that an effective agile process will allow the architecture to 
grow incrementally as the system is developed and matures. The key to success 
is to have decomposability, separation of concerns, and near-independence of the 
parts. (Sound familiar? These are all modifiability tactics.)
Finally, Booch notes that to be agile, the architecture should be visible and 
self-evident in the code; this means making the design patterns, cross-cutting 
concerns, and other important decisions obvious, well communicated, and de-
fended. This may, in turn, require documentation. But whatever architectural de-
cisions are made, the architect must make an effort to “socialize” the architecture.
Ward Cunningham has coined the term “technical debt.” Technical debt is 
an analogy to the normal debt that we acquire as consumers: we purchase some-
thing now and (hope to) pay for it later. In software the equivalent of “purchas-
ing something now” is quick-and-dirty implementation. Such implementation 
frequently leaves technical debt that incurs penalties in the future, in terms of 
increased maintenance costs. When technical debt becomes unacceptably high, 
projects need to pay down some of this debt, in the form of refactoring, which is 
a key part of every agile architecting process.
