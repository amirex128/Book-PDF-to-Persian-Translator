3. Read models and view models
// Inside the controller:
/*
* `price()` returns a `Price` object now,
* so we have to convert it to an integer before multiplying it:
*/
$orderAmountInCents = (int)$request->get('quantity')
* $ebook->price()->asInt();
Getting data in and out of a value object is the least interesting feature of
value objects. If we don’t even validate the raw value, we might as well not
use a value object in the first place. So the next step should be to make the
Price object really useful for its clients. In this case, it would be helpful if
the client didn’t need to take the integer out of the value object, but could
multiply the price with a given quantity directly. Listing 3.11 shows how to
do that by adding a multiply() method to the Price class.
Listing 3.11. Adding multiplication behavior to Price.
final class Price
{
// ...
public function multipliedBy(int $quantity): int
{
return $this->priceInCents * $quantity;
}
}
$orderAmountInCents = $ebook->price()->multipliedBy(
(int)$request->get('quantity')
);
The order amount is still an integer and would definitely benefit from a value
object called Amount, which represents a quantity multiplied by a price. Maybe
you could even use a generic Money value object. But for now, we’ll leave it
at this. We’ve seen how you can improve a read model by adjusting it to the
needs of the client that uses it. An added benefit is that using value objects
allows you to decouple from the infrastructure. Clients can keep using value
objects even if the underlying data type changes.
69
