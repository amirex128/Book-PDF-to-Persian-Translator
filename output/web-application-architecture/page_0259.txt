9. Conclusion
This leaves the secondsPassed() method unchanged: clients won’t have to
provide the current timestamp themselves. It does allow us to get rid of calls
to time(), and replace them by calls to Timer::currentTimestamp(). But that
doesn’t make Stopwatch pure yet. Although the call to time() now only hap-
pens inside Timer, calling Stopwatch::secondsPassed() will inevitably call
Timer::currentTimestamp(), which is impure.
This indirectly makes
Stopwatch::secondsPassed() impure as well.
We can fix this by applying a technique we’ve already seen several times
now: dependency inversion. We should introduce a proper abstraction for
“retrieving the current time”. We already have a separate object for it (Timer),
now we only need an interface for it. Let’s turn Timer into an interface, and
define a standard implementation for it that uses the system clock to get the
current timestamp (see Listing 9.7).
Listing 9.7. The Timer interface and its standard implementation.
interface Timer
{
public function currentTimestamp(): int;
}
final class TimerUsesSystemClock implements Timer
{
public function currentTimestamp(): int
{
return time();
}
}
final class Stopwatch
{
private Timer $timer;
public function __construct(Timer $timer)
{
$this->timer = $timer;
}
public function secondsPassed(int $previousTimestamp): int
239
