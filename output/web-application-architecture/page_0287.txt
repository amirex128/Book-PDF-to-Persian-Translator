11. Key design patterns
11.5. Event subscribers
After saving an entity the event dispatcher should receive all the recorded do-
main events. The event dispatcher will then notify all the event subscribers
that have been registered for that particular event. Listing 11.18 shows how
a simple event dispatcher would do that. All subscribers in this example are
provided as a constructor argument. Each subscriber is supposed to be a
callable.
Listing 11.18. An EventDispatcher interface with a simple implementation.
interface EventDispatcher
{
public function dispatchAll(array $events): void;
}
final class SimpleEventDispatcher implements EventDispatcher
{
private array $subscribers;
public function __construct(array $subscribersByEventType)
{
$this->subscribers = $subscribersByEventType;
}
public function dispatchAll(array $events): void
{
foreach ($events as $event) {
foreach (
$this->subscribersForEvent($event) as $subscriber
) {
$subscriber($event);
}
}
}
private function subscribersForEvent(object $event): array
{
return $this->subscribers[get_class($event)] ?? [];
}
267
