2. The domain model
If you are able to read between the lines (and see through the SQL state-
ments), you’ll learn a few things. As a user you can order an e-book by its ID.
You have to provide your email address, and your order will be persisted as a
record in the orders table. The orders table itself has an auto-incrementing
identifier column. After inserting a new record into the orders table, the con-
troller fetches the automatically assigned ID for it and stores it in the session.
It may already be obvious to you that this is bad code. Nonetheless, I’ll briefly
mention the disadvantages here:
1. It’s really hard to find out what the story, or scenario of this action is.
What does the use case of ordering an e-book entail? Which steps are
involved? What is the outcome?
2. Implementation details obscure the view on the higher level steps of the
scenario. For instance, one step would be to save the new order. The
code doesn’t say “save order” though. It simply shows how that saving
is done. We have to analyze the SQL statement and notice that it’s an
INSERT statement, from which we can derive that this is the code for
saving a new order.
3. Mixing high-level steps with low-level implementation details directly
couples the use case itself to any related technological decisions. This
makes it very difficult to change directions later on. For instance, we
would have a hard time migrating to a different database. We would
also have a hard time replacing the web form with a JSON API for this
use case.
In this chapter we’ll focus on the second problem. We want to save the order
in one step, and hide the details of how exactly that’s done. In Chapter 3 and
Chapter 4 we’ll work on the remaining issues.
17
