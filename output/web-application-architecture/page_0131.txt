5. Service locators
inject actual services instead of the service container the application service
will only be coupled to our own core interfaces and classes. Any client that
can provide implementations for the required dependencies can instantiate
the service and call methods on it. So injecting actual dependencies is an
important part of making the service usable in different contexts, by different
clients.
5.2. Depending on global state
Let’s take a look at a similar situation where the service container doesn’t
get injected but where dependencies can be instantiated upon request, any-
where in the code. Listing 5.1 shows an example using helper functions1 from
the Laravel framework. Can this code run in any context? How is it tied to
its surrounding infrastructure?
Listing 5.1. Code that uses static calls to load dependencies and configura-
tion.
final class SendIpConfirmationEmail
{
public function send(): void
{
$message = EmailMessage::create()
->to(Auth::user()->email())
->from(
config('mail.default_sender')
)
->text(
trans(
'Add your :ip to the whitelist',
[
'ip' => request()->ip()
]
)
);
1 https://advwebapparch.com/laravel-helper-functions
111
