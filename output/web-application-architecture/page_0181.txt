6. External services
1. A unit test
2. An integration test
aCorrect answer: 3. An HTTP client abstraction is useful, but still forces the client
to deal with low-level details, like where to make the request to, or what the
response looks like. An abstract class is a step in the right direction, but only an
interface is abstract enough to give you the flexibility you need.
bCorrect answer: 2. Being able to create a test double is a requirement for test-
ing the client of the abstraction in isolation. Often the need for isolated testing
is actually the reason we introduce an abstraction. But the true test for an ab-
straction is when you imagine or actually write an alternative implementation
where the underlying technology is a completely different one. For instance
when you switch from a remote service to a locally stored JSON file. If the ab-
straction survives such a switch and still works, it’s a good one.
cCorrect answer: 2. A unit test is an isolated test. Given that the object connects to
an external service, if you write a unit test for it, you somehow have to prevent
it from actually communicating with the external service. But then you don’t
know if your code works well with the actual service. You need an integration
test to prove that.
161
