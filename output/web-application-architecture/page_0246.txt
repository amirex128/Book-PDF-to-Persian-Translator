9. Conclusion
This chapter covers:
• A deeper discussion on the distinction between
core and infrastructure code
• A summary of the strategy for pushing infrastruc-
ture to the sides
• A recommendation for using a domain- and test-
first approach to software development
• A closer look at the concept of “pure” object-oriented
programming
9.1. Core code and infrastructure code
In Chapter 1 we’ve looked at definitions for the terms core code and infras-
tructure code. What I personally find useful about these definitions is that
you can look at a piece of code and find out if the definitions apply to it. You
can then decide if it’s either core or infrastructure code. But there are other
ways of applying these terms to software. One way is to consider the bigger
picture of the application and its interactions with actors. You’ll find the term
actor in books about user stories and use cases by authors like Ivar Jacobson
and Alistair Cockburn, who make a distinction between:
1. Primary actors, which act upon our system
2. Secondary or supporting actors, upon which our system acts
As an example, a primary actor could be a person using their web browser
226
