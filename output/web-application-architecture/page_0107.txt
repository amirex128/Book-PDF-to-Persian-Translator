4. Application services
}
Once Symfony knows about this command, you can run it like this: bin/console
create-order "21" "2" "info@matthiasnoback.nl". But how do we do the
actual work, creating an order based on the provided command-line argu-
ments? Of course, we could simply copy all the code from the controller, and
I know applications where this has happened. What’s the result of copying
use case code?
• If we actually copy the code there are now two places that contain the
code for this use case. As you probably know, this gets very confusing
and quickly becomes a maintenance nightmare. A developer changes
something in one location, and forgets to update the other location too.
Or they change it in a special undocumented way and nobody under-
stands what’s going on for what reason anymore.
• If we don’t actually copy the code but move it to the new location and
we remove the old code, we’re still looking at the same problem that
we started with: the core use case of ordering an e-book is now tied to
other infrastructure and can only run in the context of a command-line
application.
So we should neither move the code to the command class, nor copy it. Could
we somehow run the same controller code from the command-line instead?
Since a command line application can’t deal with HTTP requests, responses,
or sessions, we’d have to forge a Request object and define a stand-in session
service in the container. Finally you would be able to call the controller, as
shown in Listing 4.3.
Listing 4.3. The command calls the controller action.
final class CreateOrderCommand extends Command
{
// ...
protected function execute(
InputInterface $input,
OutputInterface $output
): int {
87
