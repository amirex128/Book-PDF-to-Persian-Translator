6. External services
you want to decouple core code from infrastructure. How does introducing
abstractions benefit the resulting application architecture?
In the first place, depending on a dependency for which we have defined our
own specific interface, allows us to replace its default implementation with
a minimum amount of work. If we want to switch to an alternative VAT rate
API, maybe taxtools.io, we can easily do so. We just include their SDK in
our project (or write our own little API client), and we provide a new imple-
mentation of a VatRateProvider which uses that new client (see Listing 6.10
and Figure 6.3).
Listing 6.10. Switching to taxtools.io is easy.
final class TaxTools
{
public function rates(string $countryCode): Rates
{
// ...
}
}
final class VatRateProviderUsingTaxToolsIO
implements VatRateProvider
{
private TaxTools $taxTools;
public function __construct(TaxTools $taxTools)
{
$this->taxTools = $taxTools;
}
public function vatRateForSellingEbooksInCountry(
string $countryCode
): VatRate {
return $this->taxTools->rates($countryCode)
->rateFor('ebooks');
}
}
We don’t even need to touch EbookOrderService. It wouldn’t notice anything
about the change in the background, since it depends on the interface, and
148
