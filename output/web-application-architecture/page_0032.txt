1. Introduction
also find the ORM, which facilitates communication with the database, and
helps you save your objects in tables. All of this code doesn’t comply with
the definition of core code provided in this chapter. To run this code, you
usually need external systems like the database or the web server to be
available. The code has been designed to run in a specific context, like the
terminal, or as part of a web request/response cycle. So most of the code in
/vendor should be considered infrastructure code.
However, being in a particular directory doesn’t determine whether or not
something is infrastructure code. The rules don’t say anything about that.
What matters is what the code does, and what it needs to do that. This
means that some, or maybe a lot of the code in /vendor could be consid-
ered core code after all, even though it’s not written by you or for your
application specifically.
1.4. Summary
Throughout this book we make a distinction between core and infrastruc-
ture code, which will be the foundation of some architectural decisions later
on. Core code is code that can be executed in any context, without any spe-
cial setup, or external systems that need to be available. For infrastructure
code the opposite is the case: it needs external systems, special setup, or is
designed to run in a specific context only.
In the next chapters we’ll look at how to refactor mixed code into properly
separated core and infrastructure code which follows the rules provided in
this chapter.
Exercises
1. Should the code below be considered infrastructure code?a
$now = new DateTimeImmutable('now');
$expirationDate = $now->modify('+2 days');
12
