9. Conclusion
replace the implementation of OrderRepository. We could experiment with
a repository that uses MongoDB to store orders. And we can easily define a
faster stand-in replacement when we write tests for the service.
Figure 9.6 shows what dependency inversion looks like in terms of core code
versus infrastructure code. The repository interface and the service are core
code. The repository implementation is infrastructure code. The dependency
arrows stay inside the core area (from EbookOrderService to OrderRepository),
or
they
go
from
the
infrastructure
area
to
the
core
area
(from
OrderRepositoryUsingSql to OrderRepository).
Figure 9.6. This diagram shows how applying dependency inversion helps
separating core from infrastructure code.
Because core code never depends on infrastructure code, we can completely
replace the infrastructure code and the core would not be influenced by it.
9.2.2. Make use cases universally invokable
Many applications hide important use cases in their controllers. As we saw
in Chapter 4, with a few extra steps you can extract the code that represents
the actual use case, independent of infrastructure code. We started in that
231
