8. Validation
not a very healthy one. They always have to be used together and they will
evolve together, in other words: they are coupled to each other. Coupling
isn’t bad per se, but when there is a rule that one object (the validator) has to
be used before the other one (the entity) can be used, it’s a problem. In this
case it means the entity isn’t safe to use at all, because who knows if it has
been validated.
This problem can be solved quite easily. We can make the entity self-validating.
Whenever a client tries to create a new instance of the entity, it can enforce a
minimum of required data to be provided as constructor arguments. When-
ever a client wants to provide some more data or modify existing data, the
entity can again validate the provided arguments before assigning any new
values to its properties. You could say that this isn’t validation, it’s more like
protection. We don’t assign a value to a property, then validate it; we protect
the object from ending up in an incorrect state.
This relieves us from having to use a validator before we save our entity.
Any method (including the constructor) that assigns values to properties will
ensure that the resulting state of the entity is always valid. We can’t make
a mistake like calling these methods with missing or invalid arguments, be-
cause the entity will tell us loudly what we did wrong. Listing 8.3 shows how
this works in the case of the Order entity. Every method that accepts data will
validate this data and throw exceptions to indicate any problem as soon as
possible.
Listing 8.3. The Order entity only accepts valid data.
final class Order
{
private string $emailAddress;
/**
* @var array<Line>
*/
private array $lines;
public function __construct(string $emailAddress)
{
// Before assigning, we verify that the email address is valid
if (!filter_var($emailAddress, FILTER_VALIDATE_EMAIL)) {
196
