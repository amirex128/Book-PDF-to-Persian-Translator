13. Ports and adapters
final class Ebook
{
private string $title;
public function __construct(
string $title
// ...
) {
$this->title = $title;
// ...
}
public function title(): string
{
return $this->title;
}
// ...
}
Provided that there is an implementation for this interface which is able to
retrieve e-book records from the database and generate a list of Ebook objects,
we also need a controller which can transform those objects into a format
that an actor can deal with. Let’s say the actor that needs this information
is a JavaScript frontend application. In that case, it would be useful if the
adapter for the port “for listing available e-books” would take the data from
the Ebook objects and generate a JSON response based on it (see Listing 13.7)
Listing 13.7. Part of the adapter “for listing available e-books”.
final class EbookController
{
private ListAvailableEbooksRepository $ebooksRepository;
public function __construct(
ListAvailableEbooksRepository $ebooksRepository
) {
$this->ebooksRepository = $ebooksRepository;
}
307
