14. A testing strategy for decoupled applications
}
}
In Chapter 6 we kept using curl_*() functions inside the VatApi class. A
more realistic approach is to inject an HTTP client into the VatApi class, so it
doesn’t have deal with those low-level implementation details itself. Inject-
ing an HTTP client as a dependency makes it clear that this class is going to
make a network connection. In Listing 14.4 it even shows the base URL for
the requests. I’ve made this change to the example to make the point of this
adapter test more clear: everything should be as real as possible.
When communicating with external services that are not managed by you or
your team this can be really hard to do without sacrificing some test stability.
Here’s what I usually try:
1. Write the test against the real service
2. Write the test against a sandbox environment the third party offers
3. Write the test against a fake server that I run
4. Write the test against a fake or mock HTTP client offered by the client
library that I use
5. Write the test against a fake or mock of the HTTP client interface that I
use
Option 1 and 2 give you the most confidence, but the test may sometimes
fail for reasons that you can’t do anything about. Option 3 is great because
it shows that you are using your HTTP client correctly: it can make actual
HTTP requests. You can verify inside the fake server that the right requests
are made. Option 4 is less optimal since it puts some trust in your library.
You assume that it’s able to talk to the particular server you’re working with
(but that assumption might be safe to make). Option 5 is even less optimal,
since you might make some bad assumptions about how to use the library
correctly. This is closely related to the testing rule “don’t mock what you
don’t own”. I think this could be generalized as “don’t mock an interface
whose contract is bigger than the interface itself can describe”. But that’s
something for another day.
328
