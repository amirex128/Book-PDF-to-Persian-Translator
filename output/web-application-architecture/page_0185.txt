7. Time and randomness
your code integrates well with third-party or standard libraries and is able
to connect to the relevant system devices. For domain objects we’d want unit
tests, which are fast, deterministic, don’t rely on external dependencies, and
don’t require a special context to run.
How can we turn this test back into a unit test? By making Order a “pure”
object again. We have to make sure that its behavior doesn’t depend on any-
thing else than its constructor arguments, its own implementation, and the
method arguments provided to it. We should make the object no longer use
the actual current time, or a truly random number. Instead, we should allow
clients to pass the current time or random data to it as method arguments.
7.1. Passing current time and random data as method
arguments
The example in Listing 7.3 shows the result of passing randomness and cur-
rent time as constructor arguments, instead of letting Order retrieve this in-
formation itself.
Listing 7.3. Time and random data are passed to Order as constructor argu-
ments.
final class Order
{
private Uuid $id;
private DateTimeImmutable $orderDate;
private function __construct()
{
}
public static function create(
Uuid $id,
DateTimeImmutable $orderDate
): self {
$order = new self();
$order->id = $id;
165
