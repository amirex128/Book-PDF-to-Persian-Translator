14. A testing strategy for decoupled applications
expectations for it. We then prepare an HTTP request and invoke the con-
troller. But should we directly invoke the controller ourselves, as shown in
Listing 14.6?
Listing 14.6. Invoking the controller directly.
public function it_correctly_invokes_createOrder(): void
{
$application = $this->createMock(ApplicationInterface::class);
$application->expects($this->once())
->method('createOrder')
->with(new CreateOrder(/* ... */));
$request = new Request('/create-order', /* ... */);
$controller = new OrderController($application);
$controller->createOrderAction($request);
}
I think this would leave too many things untested. We manually instantiate
a Request object, but it’s likely that the Request object created by the frame-
work based on a real HTTP request will look very different. We manually
instantiate the OrderController, but we don’t know if the framework will be
able to instantiate it too. We don’t even know if the framework will correctly
dispatch the request to the OrderController based on the '/create-order'
request URI. All of these are currently unverified assumptions.
So instead of invoking the controller in isolation we should embed it in its
natural environment and invoke it in a more realistic way. We’re lucky that
most frameworks offer tooling for creating controller tests that allow us to do
so. I only have experience with Symfony’s built-in tools2 and Panther3. List-
ing 14.7 shows an example using Symfony’s WebTestCase and related tools
that show the equivalent of the test in Listing 14.6, while also testing the
framework integration part.
Listing 14.7. Using the WebTestCase to test createOrderAction().
2 https://advwebapparch.com/symfony-testing
3 https://advwebapparch.com/panther
331
