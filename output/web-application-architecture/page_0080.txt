3. Read models and view models
Listing 3.5. The Ebook read model and repository interface.
interface GetPrice
{
/**
* @throws CouldNotFindEbook
*/
public function ofEbook(EbookId $ebookId): int;
}
// usage in the controller
$ebookPrice = $this->getPrice->ofEbook(
EbookId::fromString($request->request->get('ebook_id'))
);
As you can see in the usage example, the second approach could lead to code
that is nicer to read (or more exotic, depending on your taste). But whether or
not you should take the first or second approach depends on your situation.
3.3. Read model repository implementations
For now let’s stick with the first option: an Ebook read model and an EbookRepository
interface. Whenever a new Ebook entity gets created by an administrator,
there should also be a corresponding Ebook read model object that can ex-
pose the e-book’s price to the clients that need this information. Whenever
the entity changes, the corresponding read model should also be updated to
reflect those changes.
3.3.1. Sharing the underlying data source
The simplest solution to align the write with the read model would be to let
the read model use the underlying data source of the entity. In our case, the
data of an Ebook entity will be saved in the ebooks table. We could provide
an implementation of the read model’s repository interface that gets its data
from the very same table (see Listing 3.6).
60
