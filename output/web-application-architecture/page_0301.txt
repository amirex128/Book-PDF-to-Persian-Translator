12. Architectural layers
This chapter covers:
• The Domain, Application, and Infrastructure layer
• The Dependency rule
• Using namespaces as a way to make layers visible
• Verifying layer conventions with tools
12.1. MVC
Web frameworks often suggest something like an “MVC architecture” for your
web applications. MVC stands for Model View Controller. Yes, you’ll need
each of these things in a typical web application. You need a controller to
process an incoming web request, and you need a view to present some in-
formation to the user. A good web framework should offer some nice tools
for doing these things. It may offer convenient ways of extracting relevant
data from the request, it may manage the session for you, and it may offer a
cool templating engine that makes rendering HTML responses a breeze.
This is all great, and frameworks usually do a good job at this. But when it
comes to making the jump from the controller to the model, things are likely
to go wrong. As we saw in Chapter 4, controllers end up containing all the
business logic for a given use case, and the model is likely going to be a simple
data holder (see Figure 12.1).
Often developers have realized the shortcomings of this approach, and started
moving business logic into services. In several projects that I’ve seen so far
281
