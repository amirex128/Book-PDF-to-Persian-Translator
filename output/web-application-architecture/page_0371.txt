14. A testing strategy for decoupled applications
ConfirmationEmail() method. Again, this method gets executed. It contains
two assertions which might cause exceptions to be thrown. Whether or not
this happens determines the success of the scenario.
Using Gherkin to describe use cases has many advantages in my opinion. To
mention just a few:
1. It’s easier to write in more abstract, high-level terms about the features
of your application, leaving out the implementation details.
2. It’s easier to specify what the behavior of the application should be in
slightly different situations.
3. Scenarios can be written without the underlying code, so you can val-
idate your understanding of the features with other stakeholders who
may not know anything about programming.
4. The scenarios are documentation of what your application can do, they
specify what it should do, and because there’s automation behind them,
they can verify that what is documented and specified is actually true
about your application. This makes it a form of Living documentation7.
Figure 14.6 shows what parts of the application have now been covered with
tests.
There’s much more to say about Behat, writing scenarios, and automating
them, but it’s beyond the scope of this book. If you’re interested, you can find
some more examples of use case tests in the demo project8 that accompanies
this book.
14.6. End-to-end tests
Looking at Figure 14.6 it’s clear that we have tests for all the relevant parts
of the application: the use cases themselves, some unit tests zooming in on a
couple of domain objects, and integration tests for the port adapters. Some-
7My favorite work on this topic is by Cyrille Martraire, “Living Documentation”, Addison-
Wesley Professional (2019).
8 https://advwebapparch.com/repository
351
