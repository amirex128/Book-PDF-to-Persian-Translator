Introduction
2. Why is decoupling from infrastructure so important?
Separating infrastructure concerns from your core application logic leads to
a domain model that can be developed in a domain-driven way. It also leads
to application code that is very easy to test, and to develop in a test-driven
way. Finally, tests tend to be more stable and run faster than your average
framework-inspired functional test.
Supporting both Domain-Driven Design (DDD) and Test-Driven Development
(TDD) is already a great attribute of any software system. But separating in-
frastructure from domain concerns by applying these design patterns gives
you two more advantages. Without a lot of extra work you can start using a
standard set of layers (which we’ll call Domain, Application, and Infrastruc-
ture). On top of that, you can easily mark your decoupled use cases as Ports
and the supporting implementation code as Adapters.
Using layers, ports, and adapters is a great way of standardizing your high-
level architecture, making it easier for everybody to understand the code, to
take care of it, and to continue developing it. And the big surprise that I’ll
spoil to you now is that by decoupling core code from infrastructure code
you get all of this for free.
If your application is supposed to live longer than, say, two years, then de-
coupling from infrastructure is a safe bet. Surrounding infrastructure like
frameworks, remote web services, storage systems, etc. are likely to change
at a different rate than your domain model and use cases. Whatever hap-
pens in the world of the technology surrounding your application, your pre-
cious core code won’t be disturbed by it. Both can evolve at their own speed.
Upgrading to the next version of your framework, migrating to a different
storage backend, or switching to a different payment provider won’t cost as
much as it would if core and infrastructure code were still mixed together.
Dependencies on external code or systems will always be isolated and if a
change has to be made, you’ll know immediately where to make it.
If on the other hand your application is not supposed to live longer than two
years, that might be a good reason not to care about the approach presented
in this book. That said, I have only seen such an application once or twice in
my life.
xi
