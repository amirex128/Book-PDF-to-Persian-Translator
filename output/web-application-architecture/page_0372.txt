14. A testing strategy for decoupled applications
Figure 14.6. Test coverage after adding use case tests.
thing is missing here: a test that verifies that all these parts work well to-
gether once the application runs in a production environment. It turns out
there’s always the risk that something falls between the cracks and you de-
ploy a broken application. The solution is to write a couple of end-to-end tests
that show the application works, from one end of the deployed application to
the other end. That is, if you’d draw another coverage diagram, you’d get a
coverage cloud wrapping the entire application, including all of its secondary
actors.
Ideally you’d run your end-to-end tests against the thing you’re going to de-
ploy. If (almost) everything is the same in your end-to-end test environment
as it is in your production environment, then you can reduce the chance that
once again a mistake slips past quality assurance and gets deployed to the
production server.
An end-to-end test should treat the application as a black box. It should have
no idea what’s going on inside and only talk to it through public channels.
In the case of a web application, it may only send HTTP requests and inspect
responses. It should not take a peek inside the database or anything.
352
