6. External services
$vatRate = $this->vatRateProvider
->vatRateForSellingEbooksInCountry('NL');
// ...
}
}
This may come in handy the moment we realize that the service we currently
use is actually not that good. Or when it turns out it can’t give us all the
answers we need. Or maybe, you’ll realize that calling an external service is
a real danger for the responsiveness of your own application, and you want
to keep a local list of VAT rates. In this sense, introducing abstractions is an
architectural tool. Using it, you can build in flexibility for years to come. You
can start with a cheap-to-implement solution, whether that be an external
service that does the trick for now, or a locally stored JSON file. You can
always “upgrade” when the time is there.
Think about other possible implementations
When you are introducing abstractions for your service dependencies, make
sure to actually consider possible alternative implementations. Sometimes
the interface you have in mind is still too much tied to the implementation
you already have for it. Consider if the interface would still be useful if
you switch to a different web service, or when you’d start using a database
table instead of a remote service. Often little details about the underlying
implementation sneak into an interface, making it a less powerful abstrac-
tion. Consider for instance the alternative VatRateProvider interface in
Listing 6.12.
Listing 6.12. This interface offers a leaky abstraction.
interface VatRateProvider
{
public function vatRateForCountry(
string $countryCode,
string $filter
): VatRate;
}
150
