14. A testing strategy for decoupled applications
->withTitle('Advanced Web Application Architecture')
->build()
];
$application = $this->createMock(ApplicationInterface::class);
$application->expects($this->any())
->method('listAvailableEbooks')
->will($this->returnValue($ebooks));
$client = self::createClient();
$client->getContainer()->set(
ApplicationInterface::class,
$application
);
$crawler = $client->request('GET', '/list-available-ebooks');
self::assertStringContainsString(
'Advanced Web Application Architecture',
$crawler->filter('.ebook-title')->text()
);
}
}
The return value of request() is a so-called DomCrawler which you can use
to select certain elements from the HTML response body using CSS selectors.
You can then make assertions about their attributes or content.
To simplify the process of creating read model objects, I usually introduce
a builder that allows me to focus only on the relevant values. The builder
will add any other required data so you donâ€™t have to worry about that. List-
ing 14.10 shows what the builder looks like.
Listing 14.10. A builder for Ebook read model objects.
final class EbookBuilder
{
private string $id = 'ad5075f1-be24-4ae1-8ba8-9efec6f4933b';
private int $price = 2500;
private string $title = 'The title';
336
