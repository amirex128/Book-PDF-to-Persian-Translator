2. The domain model
2.2. Trying to fix it with a table data gateway
A traditional solution for pushing SQL statements outside of regular code is
to use the Table Data Gateway (or table gateway for short) design pattern1. It
hides the SQL statements and other implementation details behind a single
interface per database table. Listing 2.2 shows what the controller action
looks like when we’d start using table gateways.
Listing 2.2. orderEbookAction uses Table gateways for interacting with the
database.
public function orderEbookAction(Request $request): Response
{
$ebooksGateway = $this->container->get('ebooks_gateway');
$ebookPrice = $ebooksGateway->select(
[
'id' => $request->request->get('ebook_id')
]
)[0]['price'];
$orderAmount = (int)$request->get('quantity')
* (int)$ebookPrice;
$ordersGateway = $this->container->get('orders_gateway');
$lastInsertedId = $ordersGateway->insert(
[
'email' => $request->get('email_address'),
'quantity' => (int)$request->get('quantity'),
'amount' => $orderAmount
]
);
$this->container->get('session')->set(
'currentOrderId',
$lastInsertedId
);
1Martin Fowler, “Patterns of Enterprise Application Architecture”, Addison-Wesley Profes-
sional (2003).
18
