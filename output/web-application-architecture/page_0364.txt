14. A testing strategy for decoupled applications
Listing 14.14. An event subscriber that will send the confirmation email.
final class TestServiceContainer
{
// ...
public function eventDispatcher(): EventDispatcher
{
if ($this->eventDispatcher === null) {
$this->eventDispatcher = new ConfigurableEventDispatcher();
// Register the event subscriber here:
$this->eventDispatcher->addSubscriber(
OrderWasCreated::class,
[$this->sendOrderConfirmationEmail(), 'whenOrderWasCreated']
);
}
return $this->eventDispatcher();
}
private function sendOrderConfirmationEmail(): SendOrderConfirmationEmail
{
return new SendOrderConfirmationEmail($this->mailer());
}
private function mailer(): Mailer
{
// TODO return a Mailer
}
}
A use case test should only cover core code, so we should never actually send
emails. Still, we want to verify that the SendOrderConfirmationEmail will ask
the Mailer to send that confirmation email. The trick is once more to define
a Mailer abstraction so we can replace the actual mailer with a test double
when testing. Listing 14.15 shows the Mailer interface I had in mind for this,
and how the SendOrderConfirmationEmail event subscriber calls it.
Listing 14.15.
344
