3. Read models and view models
model should only return primitive-type values.
We know what our view model object should look like, and we have defined
an interface method Ebooks::listAvailableEbooks() which will return an
array of these view model objects. Now we only need an implementation
of that Ebooks interface which can query the database and use actual data to
return the list of available e-books. Just like with the read model in Section 3.3
there are different options, but let’s go with querying the database that’s used
by the write model. We can reuse the existing SQL query.
Listing 3.16. An implementation for the Ebooks interface.
final class EbooksUsingSql implements Ebooks
{
private Connection $connection;
public function __construct(Connection $connection)
{
$this->connection = $connection;
}
public function listAvailableEbooks(): array
{
$query = <<<EOD
SELECT
e.*,
(
SELECT COUNT(*)
FROM orders o
WHERE o.ebook_id = ebooks.ebook_id
) AS number_of_times_sold
FROM ebooks e
WHERE e.is_hidden = 0
ORDER BY number_of_times_sold DESC
EOD;
$records = $this->connection
->execute($query)
->fetchAllAssoc();
// Instantiate an Ebook view model for every record
75
