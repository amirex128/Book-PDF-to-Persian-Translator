3. Read models and view models
{
return Price::fromInt($this->price)
->asFormattedAmount();
}
}
There are many alternatives here. Maybe you don’t like to have a method
for string formatting directly on your value object. In that case create a sepa-
rate number formatter object or utility class. Maybe you want to change the
$price constructor argument to be a Price value object already. In that case,
let the repository implementation do the conversion from int to Price.
“I’m afraid we’ll end up with too many classes…”
Good point. You will definitely have more classes and interfaces when you
separate core from infrastructure code. We can even see some kind of pat-
tern emerge here. When we want to rewrite a query (like listAvailableEbooks()
or getById()), we start with a single “mixed” class, but end up with a new
interface and two new classes (Figure 3.2). The interface represents the
query, one of the classes represents the answer, and the other class is an
implementation of the query interface.
Figure 3.2. After decoupling a query from underlying infrastructure, you
will have three elements.
If you want to decouple from infrastructure, this is the way to go. But there
are several ways too keep the number of elements in your system manage-
able.
77
