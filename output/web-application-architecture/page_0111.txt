4. Application services
// ...
return new Response(/* ... */);
}
Except for a few usages of the service locator ($this->container->get()), a
large part of the controller action is starting to look like core code; indepen-
dent of the infrastructure that connects it to its users, and independent of
underlying storage, etc. It isn’t officially core code yet, because the method
itself is still coupled to its web context.
4.3. Extracting an application service
The next step will be to move all the code that is not web-specific and move
it to its own class. This is another standard refactoring step called Extract
Class3. To accomplish this we need to:
• Create a new class. Let’s call it EbookOrderService.
• Add a public method to it. Let’s call it create().
• Move the infrastructure-independent code from the controller to the
new method.
• Inject the necessary dependencies (EbookRepository and OrderRepository)
as constructor arguments.
• Use the new service inside the controller.
• Provide the data we extracted into variables as method arguments of
the service’s create() method.
The resulting service class and its usage in the controller are shown in List-
ing 4.5. Such a service is often called an Application service. It’s used to model
a use case that has side-effects (like saving a new entity) in a reusable way.
We’ll discuss the pattern in more detail in Section 11.4.
3 https://advwebapparch.com/extract-class
91
