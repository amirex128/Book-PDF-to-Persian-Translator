15. Conclusion
15.1. Is a decoupled architecture the right choice for all
projects?
Does something apply to all situations without any qualification? I think that
question should always be answered with “No”. In the famous words often
used by software developers: “There’s no silver bullet”. Still, there are some
practices that are demonstrably better than others. And we’re lucky to have
some research confirming that1. When it comes to decoupled architecture, I
didn’t do extensive research but I know that it definitely shouldn’t be applied
everywhere. For instance I find that a single job application like the one that
extracts URLs from the manuscript of this book and sets up a link registry for
it, really doesn’t deserve to be decoupled. Maybe it’s the fact that its work is
purely related to infrastructure anyway. Maybe it’s because it’s too small to
deserve the effort.
Let’s take a look at some other types of applications that may not be better
off with a decoupled architecture.
15.2. My application is not supposed to live longer than
two years
One reason to ignore my advice is if your application isn’t supposed to live
longer than, say, two years. I realize that learning a new style of architecture,
teaching it to the entire team, and implementing it in a short-lived project,
may take some more time than if you just keep doing everything the way
you’re doing it now. In other words, the costs don’t outweigh the benefits for
such a project. If you’re absolutely certain the project will be discarded within
a couple of years, I agree. But you can’t always predict how long an applica-
tion will live. It may start as a so-called “proof of concept”. Badly designed,
programmed sloppily, just to help the project stakeholders prove some point.
Then the business starts making money with it and the project has to survive
a little longer. At some point, adding new functionality becomes really prob-
1See for example Nicole Forsgren, Jez Humble, Gene Kim, “Accelerate”, IT Revolution Press
(2018).
359
