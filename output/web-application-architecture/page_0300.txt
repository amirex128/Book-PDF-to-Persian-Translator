11. Key design patterns
implemented by others also becomes easier, because you recognize the same
patterns in their work.
Finally, because these design patterns are decoupled from infrastructure by
design, they will come in very handy when you start specifying and testing
your use cases using scenarios. We’ll see how this works in Chapter 14.
11.8. Summary
In this chapter we took a closer look at some of the design patterns we dis-
covered in Part I: entities, repositories, application services, read and view
models, domain events, and event subscribers. Using these patterns in your
application will automatically make it easier to keep core and infrastructure
code separated. They allow you to clearly define all the use cases of your
application, without mixing in any infrastructural concerns. These use cases
are represented in code by:
1. Application services, which create or manipulate an entity, save it to the
entity’s repository, and dispatch domain events produced by the entity.
2. View models, which provide a useful representation of the application’s
data.
Event subscribers act as a bridge between a primary change, and any number
of intended effects of that change.
You can use these design patterns in a process modelling session to find out
which elements you need to build.
280
