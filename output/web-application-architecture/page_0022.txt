1. Introduction
This part covers:
• Decoupling your domain model from the database
• Decoupling the read model from the write model
(and from the database)
• Extracting an application service from a controller
• Rewriting calls to service locators
• Splitting a call to external systems into the “what”
and “how” of the call
• Inverting dependencies on system devices for re-
trieving the current time, and randomness
The main goal of the architectural style put forward in this book is to make
a clear distinction between the core code of your application and the infras-
tructure code that supports it. This so-called infrastructure code connects the
core logic of your application to its surrounding systems, like the database,
the web server, the file system, and so on. Both types of code are equally
important, but they shouldn’t live together in the same classes. The reasons
for doing so will be discussed in detail in the conclusion of this part, but the
quick summary is that separating core from infrastructure…
• provides a strong technical foundation for doing domain-first develop-
ment, and
• enables a rich and effective set of testing possibilities, making test-first
development easier
To help you develop an eye for the distinction between core and infrastruc-
2
