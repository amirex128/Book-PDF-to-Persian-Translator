8. Validation
$line = new Line();
$line->setEbookId($request->get('ebook_id'));
$line->setQuantity($request->get('quantity'));
$errors = $this->validator->validate($order);
if (count($errors) === 0) {
$this->orderRepository->save($order);
/*
* Redirect to the "thank you" page
*/
} else {
/*
* Render the form again including the validation errors
*/
}
}
}
The validator will have to reach into the object, inspect its data, and verify
certain rules. This means that the validator will contain lots of knowledge
about what a valid order is. It needs to validate the email address, the num-
ber of lines, the ordered quantity, whether the provided e-book ID refers to
an actual e-book, etc. There are validator libraries that can make this easy
for you by allowing you to use configuration instead of code. I doubt that’s
any better though, since it’s so easy to make a mistake in validator config-
uration which would let bad data go through. Whether you write the code
yourself or use a validator library, effectively it’s the same thing. The val-
idator would have to call getters on the Order object to get the data out of
the object and analyze it. If anything is wrong, it will add a message to a
list of validation errors. If you’d have to write this code yourself, it would
look something like Listing 8.2.
Note that I’m using translation keys (e.g.
'create_order.invalid_email_address') instead of full text messages, so I
can later translate these messages into the user’s language.
Listing 8.2. Validating an order by inspecting its data from the outside
final class OrderValidator
{
194
