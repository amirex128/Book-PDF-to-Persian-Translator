15. Conclusion
15.3. My application offers only CRUD functionality
Another reason to ignore this book is if your application only offers CRUD
functionality. That is, if your application can be generated based on a config-
uration file which describes the models, their fields and types, and the form
field types and validation rules that apply to them. These applications ex-
ist. In fact, I’ve built many of them and I totally agree: they don’t deserve a
decoupled architecture.
However, I’ve also seen several applications that started as pure CRUD appli-
cations, but very soon CRUD turned out to be a very limited way of modelling
the application’s business domain. CRUD models don’t protect their domain
invariants very well. They often don’t have any kind of actions defined on
them. They don’t protect themselves against invalid state transitions, and
they don’t produce domain events. But domain and process logic still has to
be implemented somewhere, so a lot of this logic ends up inside controllers
and framework or ORM-specific event listeners. The project becomes a mess,
and soon enough you wish you had actually designed everything in a decou-
pled way. All I’m saying is: take a long and hard look before you decide that
the project is CRUD-only and doesn’t deserve a decoupled architecture.
15.4. My application is a legacy application
Another common objection to applying the architectural style described in
this book is: we are living in a brownfield project, we can never achieve this.
I have a lot of experience with legacy projects too, and I sometimes find it
hard to stay positive. The force that’s pulling you down is just so very strong.
It’s hard to resist the claim for bankruptcy. At the same time, I know there’s
always room for improvement. And my secret suggestion for you is to not ask
permission for everything. If it helps make your work more bearable, and if it
helps you deliver better things faster, be sure to spend a little time improving
some aspects of the code base you’re working with. Make it easier to write
tests. Make it easier to move and rename classes, add parameter and return
types to make your code more discoverable. Just don’t spend hours or days
in a row. Also, don’t make too many changes at once, breaking everything,
361
