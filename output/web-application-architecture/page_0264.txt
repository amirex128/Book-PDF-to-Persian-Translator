10. Introduction
This part covers:
• Framework-independent object types
• Architectural layering
• Hexagonal architecture, or: ports and adapters
In the previous part we covered many techniques for separating core from
infrastructure code. Doing so is great for the future of your application. After
some time though, maintaining these large buckets of code is still going to be
a trouble. We need some more detailed organizing principles. In this part
we’ll discuss some of those principles, which have proven to be very effective.
Combined, these principles result in an application that:
1. Is built around a standardized, recognizable catalog of object types (Chap-
ter 11),
2. Uses layers for separating concerns at a higher level, which assist the
developer in deciding where to put things (Chapter 12), and
3. Decouples application use cases from the way clients connect to the ap-
plication using an architectural pattern called Ports and Adapters (Chap-
ter 13).
244
