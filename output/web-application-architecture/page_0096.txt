3. Read models and view models
return array_map(
fn (array $record) => new Ebook(
// ...
),
$records
);
}
}
Now we need to connect the dots and make sure the data from the database
record ends up in the correct properties of the Ebook instance.
Also, we
have to make sure each getter returns the right information, with the correct
type. ebookId(), title() and numberOfTimesSold() are straight-forward, but
price() needs some additional work. The value that comes from the database
is an int, but the return value of price() should be a formatted price. Inside
the price() method we can easily make that conversion though, and we can
even use the Price value object as an intermediate data type if we like (see
Listing 3.17). It will never escape the view model object, so it remains an
implementation detail.
Listing 3.17. Converting between types inside the view model.
final class Ebook
{
// ...
private int $price;
public function __construct(
// ...
int $price
) {
// ...
$this->price = $price;
}
// ...
public function price(): string
76
