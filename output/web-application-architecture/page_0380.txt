15. Conclusion
lematic. This is a known issue with software, and it has led me to believe that
it’s better not to let go of certain practices because you think that the type of
project may not live long enough to deserve them.
For instance, I think automated testing should never be considered “optional”.
What is up to you is which type of tests you’ll create. In Chapter 14 we dis-
cussed a strategy for testing decoupled applications that may not apply to
these POC projects. If you don’t care (for now) about having a decoupled
Domain and Application layer, or clearly distinguishable ports and adapters,
then you don’t even have the possibility to test these elements in isolation. In
that case you should still write end-to-end tests to have at least some kind of
confidence in your application, now and in the future.
However, just be aware of the classic issues with end-to-end tests: they are
slow and fragile, and within a couple of years they will become a real main-
tenance burden. So my advice is to start decoupling the application at some
point, even if the business has been successfully running the software for a
couple of years. You have to make sure every stakeholder is aware of the need
to work hard, and keep working hard, to keep the software maintainable in
the long term (see the totally unscientific Figure 15.1).
Figure 15.1. Effort needed from developers vs. the effect they produce.
360
