8. Validation
doesn’t mean it’s a valid EbookId. The only thing EbookId itself can do is vali-
date its own input data, verify that the string provided to it when instantiated
matches the pattern of a UUID.
Because the Order entity itself can’t validate the provided EbookId, the service
that calls addLine() should do it instead. A nice way to do this is to use the
entity repository for the related entity and fetch the entity from it. If it doesn’t
exist, the repository will throw an exception, stopping us from using the ID
of an entity that doesn’t exist.
In many cases the relation is there for a reason, and we actually need more
information from the related entity than just the fact that it exists. In our
current situation, we need to know that the Ebook exists, and we also need the
e-book’s price. So it makes sense to validate the relation between order line
and e-book by fetching the Ebook read model from its read model repository,
like we did in Chapter 3.
Listing 8.7 shows how that works in an application service. By fetching the
Ebook read model by the provided ID we verify its existence. If it doesn’t exist,
getById() will throw a CouldNotFindEbook exception.
Listing 8.7. Validating the e-book ID by loading a corresponding read model.
$ebook = $this->ebookRepository->getById(
EbookId::fromString($ebookId)
);
$order = new Order(/* ... */);
$order->addLine(
$ebook->ebookId(),
$quantity,
$ebook->price()
);
Couldn’t we pass the entire Ebook object as an argument to the addLine()
method? Yes, I think we can. It allows addLine() to be less passive. Instead
of providing only separate values (the EbookId and the price), we could give
it the Ebook read model. This ensures that the price and the EbookId on the
line actually belong to the same e-book. As a bonus, the code of the addLine()
202
