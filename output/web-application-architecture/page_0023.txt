1. Introduction
ture concerns, each of the following chapters starts with some common ex-
amples of “mixed” code in a legacy web application. After pointing out the
problems with this kind of code we take a number of refactoring steps to sep-
arate the core part from the infrastructure part. After six of these iterations
you will have seen all the programming techniques that can save you from
having mixed code in your classes.
But before we start refactoring and improving the code samples, let’s estab-
lish a definition of the terms “core” and “infrastructure” code. We’ll define
core code by introducing two rules for it. Any other code that doesn’t follow
the rules for core code should be considered infrastructure code.
1.1. Rule no 1: No dependencies on external systems
Let’s start with the first rule:
Core code doesn’t directly depend on external systems, nor does
it depend on code written for interacting with a specific type of
external system.
An external system is something that lives outside your application, like a
database, some remote web service, the system’s clock, the file system, and
so on. Core code should be able to run without these external dependencies.
Listing 1.1 shows a number of class methods that don’t follow this first rule,
and should therefore be considered infrastructure code. You can’t call any of
these methods without their external dependencies being actually available.
Listing 1.1. Examples of code that needs external dependencies to run.
final class NeedsExternalDependencies
{
public function callARemoteService(): void
{
/*
* To run this code, we need an internet connection,
* and the API of remoteservice.com should be responsive.
*/
$ch = curl_init('https://remoteservice.com/api');
3
