2. The domain model
assertions from one of the available assertion libraries (e.g. beberlei/assert2),
or using native assertions3 if you like. See Listing 2.4 which shows how pre-
defined assertion functions can be used to prevent bad data from being as-
signed to properties of an Order instance.
Listing 2.4. The Order entity validates its constructor arguments using asser-
tions.
use Assert\Assertion;
final class Order
{
// ...
public function __construct(
int $ebookId,
string $emailAddress,
int $quantityOrdered,
int $pricePerUnitInCents,
int $orderAmountInCents
) {
Assertion::greaterThan($ebookId, 0);
Assertion::email($emailAddress);
Assertion::greaterThan($quantityOrdered, 0);
Assertion::greaterThan($pricePerUnitInCents, 0);
Assertion::greaterThan($orderAmountInCents, 0);
$this->ebookId = $ebookId;
$this->emailAddress = $emailAddress;
$this->quantityOrdered = $quantityOrdered;
$this->pricePerUnitInCents = $pricePerUnitInCents;
$this->orderAmountInCents = $orderAmountInCents;
}
}
The code in Assertion::greaterThan() will throw an exception if the $ebookId
is 0 or less. Likewise, if $emailAddress is a string, but doesnâ€™t look like an
2 https://advwebapparch.com/beberlei-assert
3 https://advwebapparch.com/native-assertions
21
