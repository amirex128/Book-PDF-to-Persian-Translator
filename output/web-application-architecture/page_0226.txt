8. Validation
try {
new EmailAddress($request->get('email'));
} catch (InvalidArgumentException $exception) {
$formErrors['email'][] = 'create_order.invalid_email_address';
}
// ...
}
What about validating the e-book ID that the user submitted? We could do
a similar thing here, that is: try to fetch the Ebook from its repository and if
that fails, add a form error (see Listing 8.11).
Listing 8.11. Validating an ID using the repository.
public function createOrderAction(Request $request): Response
{
$formErrors = [];
try {
new EmailAddress($request->get('email'));
} catch (InvalidArgumentException $exception) {
$formErrors['email'][] = 'create_order.invalid_email_address';
}
try {
$this->ebookRepository->getById(
EbookId::fromString($request->get('ebook_id'))
);
} catch (CouldNotFindEbook $exception) {
$formErrors['ebook_id'][] = 'create_order.could_not_find_ebook';
}
// ...
}
If I’d find this code in a real project, I would have two comments:
1. All of this validation code clutters the view on what this controller really
does. Let’s move it out of the controller.
206
