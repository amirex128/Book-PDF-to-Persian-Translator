2. The domain model
Listing 2.23. save() should return void now.
interface OrderRepository
{
public function save(Order $order): void;
}
As a bonus, this will make the save() method conform to the Command Query
Separation principle.11
2.6.1. Using UUIDs instead of (auto-)incrementing integer IDs
A good alternative to using incrementing integers would be to use a so-called
Universally Unique Identifier (UUID). A UUID is often represented as a string,
but it can be converted to a big integer, and back again. When you encounter
it as a string, it will look like this: eb13b0b9-d320-4a45-84f1-62adfc5e0a8e.
A UUID is based on two elements: the current time, and a random number
generated by the system’s random device. Listing 2.24 shows an implemen-
tation of OrderRepository::nextIdentity() which uses the ramsey/uuid12
library for generating a random UUID.
Listing 2.24. nextIdentity() returns a UUID.
use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\UuidInterface;
final class SqlOrderRepository implements OrderRepository
{
// ...
public function nextIdentity(): UuidInterface
{
return Uuid::uuid4();
11Although
the
term
was
coined
by
Bertrand
Meyer,
there’s
a
useful
summary
by
Martin
Fowler:
“CommandQuerySeparation”,
https://advwebapparch.com/
command-query-separation .
I discuss this topic in detail in “Style Guide for Object
Design”, Manning (2019).
12 https://advwebapparch.com/ramsey-uuid
39
