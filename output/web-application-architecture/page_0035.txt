2. The domain model
This chapter covers:
• Extracting an entity and a repository from database
interaction code
• Using an entity to protect the model against in-
consistent data
• Mapping the entity to a database table inside a
repository implementation
• Providing an entity with identity before saving it
2.1. SQL statements all over the place
In this chapter we work with an imaginary web application that allows users
to browse through a catalog of e-books, select one, and order it. It’s a legacy
application that’s becoming hard to maintain. It’s difficult to find out what
the code does, what concepts it deals with, and what business rules are appli-
cable. Also, nobody wrote tests because it’s hard to write them for this kind
of code.
Let’s take a look at the code that our application runs when the user selects
an e-book from our catalog and orders it (see Listing 2.1).
Listing 2.1. The original orderEbookAction().
public function orderEbookAction(Request $request): Response
{
$connection = $this->container->get('connection');
15
