9. Conclusion
Figure 9.8. The use case is now fully represented as core code.
them. Figure 9.9 shows how the only thing a test runner has to do is call
the use case service, and use stand-in dependencies, to prevent the test from
actually saving data to the database. Doing so, the test can verify that the use
case scenarios have been implemented correctly, when it comes to domain
objects, the domain invariants they protect, the interaction between them,
and the way the use case is related to things outside the core.
9.3. Focus on the domain
An application’s code base is a codification of the team’s collective knowl-
edge. It shows their understanding of the business domain. It also shows
their understanding of the tools they work with. There’s a big difference be-
tween the two: the tools (frameworks, libraries, protocols, and so on) have a
much shorter life expectancy than the business domain itself. A framework
that is great today, will be deprecated in a year, maybe two. An ORM may
be “rad” today, but considered a pain in just a couple of months from now.
You’ll want to get rid of everything, but you don’t want to throw away the
domain knowledge that is represented by your code. If you mix infrastruc-
tural details with your domain model, it’ll be really hard to let both evolve in
different directions, or at a different speed.
233
