11. Key design patterns
3. Code that’s coupled to the framework.
In Part I we’ve already seen many techniques to overcome these problems.
We were able to extract a use case from a controller by modeling it as a
framework-independent service. We extracted an entity from database in-
teraction code. And we decoupled code from the framework by using de-
pendency injection everywhere, and by passing contextual information as
method arguments.
In this chapter we take a closer look at the types of objects that were the result
of decoupling from infrastructure. Knowing more about the typical aspects
of these objects will help you use them as building blocks instead of merely
the result of refactoring activities. By using these objects as “primitives” you
can implement all of the application’s use cases, without even choosing a
framework. The framework will just be the finishing touch, the bridge be-
tween your application’s core and the outside world.
11.2. Entities
The first pattern to cover is the Entity pattern. In this book the concept of an
entity is the same as the concept of an aggregate in Domain-Driven Design lit-
erature. An aggregate is an entity, including any of its child entities, and any
of the value objects used inside of it. In my experience the term “aggregate”
leads to a lot of confusion so I decided to use the word “entity” in this book.
We have talked about entity design in Chapter 2, and I’ve already mentioned
several design rules for it there. Still, I want this chapter to be a reference
guide to the standard design patterns you’ll need in decoupled application
development, so I’ll briefly summarize the rules here. I’ll just declare the
rules without defending them in detail1
Entities are objects that preserve the state of your application. They are the
only type of objects in your application that have persistent state. Most of
1You can always look up the reasoning in Eric Evans’ “Domain-Driven Design – Tackling
complexity in the heart of software”, Addison-Wesley Professional (2003). A quick and
accurate primer on the topic is Vaughn Vernon’s article series “Effective Aggregate Design”,
https://advwebapparch.com/effective-aggregate-design .
246
