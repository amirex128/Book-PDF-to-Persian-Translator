4. Application services
1. Creating the order and saving it
2. Sending a confirmation email
You could say that the first step actually consists of two more steps, but cre-
ating the order isn’t useful without also saving it, you can’t save an order
without creating it first. So this really is a single step. It’s not uncommon for
a use case scenario to consist of multiple steps, but I also find that it works
best if the application service only performs the first step, and leaves the
other steps to other services, In our case, the application service will only
create the order and save it. It then produces an event that indicates that
the order was created. Other services can respond to that event, for instance
by sending the order confirmation email. We’ve seen the setup already in
Section 3.3.2, and we’ll discuss the details of the pattern in Section 11.5. As
a sneak preview, Listing 4.16 will give you an idea of how this would work.
Figure 4.2 shows the relations between these objects in a single view. Note
that the EbookOrderService is no longer in charge of sending the confirma-
tion email. The event subscriber takes care of this, and the only thing that
the EbookOrderService has to do is dispatch the recorded domain events to
the EventDispatcher service.
Listing 4.16. Sending the email after receiving a OrderWasCreated event.
// This is a domain event:
final class OrderWasCreated
{
private OrderId $orderId;
private string $emailAddress;
public function __construct(OrderId $orderId, string $emailAddress)
{
$this->orderId = $orderId;
$this->emailAddress = $emailAddress;
}
public function orderId(): OrderId
{
return $this->orderId;
}
103
