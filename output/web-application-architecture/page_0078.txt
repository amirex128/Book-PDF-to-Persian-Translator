3. Read models and view models
public function rollBack(BookingPeriods $bookingPeriods): void
{
if ($bookingPeriods->isClosed($this->bookingPeriod) {
throw CouldNotRollBack::becauseBookingPeriodIsClosed();
}
// ...
}
Regardless of design alternatives and rules of thumb, there’s no need to be
afraid of getters. And they certainly aren’t forbidden.
3.2. Creating a separate read model
In any situation where you need information you can introduce a read model.
You frame the question in such a way that it’s easy for you to ask, and you
design the type of answer you want to retrieve. In our case, the question
would be: give me the price of an e-book with ID […]. The answer will be an
object that represents the price of the e-book.
Generally there are two options for modeling the question with code. You
could use the repository pattern once more, and create classes with the same
or a similar name as the entity classes themselves (see Listing 3.4). In that
case, you have to put the code in a different namespace to make it easy to
distinguish between the read and the write model.
Listing 3.4. The Ebook read model and read model repository interface.
interface EbookRepository
{
/**
* @throws CouldNotFindEbook
*/
public function getById(EbookId $ebookId): Ebook;
}
final class Ebook
{
58
