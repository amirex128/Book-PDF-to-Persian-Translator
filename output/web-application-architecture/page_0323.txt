13. Ports and adapters
Figure 13.2 shows the updated diagram with the two adapters of the port “for
saving an order”.
Figure 13.2. The hexagon with two adapters for the port “for saving an or-
der”.
Besides providing an alternative adapter for testing purposes we can also
experiment with alternative technologies. If you want to migrate from a
relational database to a document database you can implement the same
OrderRepository interface and see how that works without rewriting all the
code inside the hexagon.
To show that two outgoing adapters (sometimes called “drivers”) are fully
exchangeable, you’d need to write a contract test for the port. In such a test
you specify how any implementation of the interface should behave. You can
then run this test against each of the implementations you have. We’ll see an
example of a contract test in Section 14.3.
13.4. Adapters for incoming ports
On the other side of the hexagon are the incoming ports. These are meant to
accept incoming messages from users or external systems. They need code
that facilitates this communication. In the case of the port “for creating an
order” the web server needs to accept the incoming HTTP request, then for-
ward it to PHP. PHP extracts relevant data and context from the request and
then our web framework starts to further process it. Finally, it will call one of
303
