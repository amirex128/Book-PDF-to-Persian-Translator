11. Key design patterns
the other objects should be designed to be immutable and stateless. Being
mutable, entities should not be passed to clients that don’t intend to change
their state. When a client needs to retrieve information from an entity, in
most cases they should rely on a different type of object, that is, a Read model
(see Section 11.6). The only type of client that is supposed to modify an entity
is an Application service (see Section 11.4).
You shouldn’t be able to traverse from one entity to the other, e.g.
$this->getLine(1)->getProduct()->getProductGroup()->getProducts();
Changes should always be limited to a single entity. If you need to modify
another entity, fetch it from its own repository. Don’t make changes to mul-
tiple entities in the same transaction. Make a clear distinction between the
primary change and secondary effects. Handle these effects using Event sub-
scribers (see Section 11.5).
11.2.1. Protect invariants
An entity should always protect its domain invariants (the things that are al-
ways true about it) and make sure that it’s in a consistent state. It should
never contain invalid, incomplete, or meaningless data. Entities are meant
to establish a basic level of consistency for your application, as well as pro-
tecting it against data corruption.
An entity’s constructor should be a named constructor and it should force
clients to provide the minimum set of required data (see Listing 11.1). The
constructor needs to verify that the data provided is valid, for instance that
values are within the allowed range, have the minimum length, etc. You can
use a standard set of assertions, or throw your own exceptions in case some-
thing is wrong.
An entity has a unique identity from the start. Provide it when calling the
constructor (as discussed in Section 2.6).
Relations between entities should be establish by their IDs, not by providing
the entire object reference.
Listing 11.1. An Order always has an ID and a relation with a Customer entity.
247
