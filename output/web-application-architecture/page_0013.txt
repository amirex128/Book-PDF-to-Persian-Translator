Introduction
3. Who is this book for?
This book is for you:
• If you have some experience with “framework-inspired” development,
that is, following a framework’s documentation to structure a web ap-
plication, or
• If you have seen some legacy code, with every part of the code base
knowing about every other part, and different concerns being completely
mixed together, or
• If you’ve seen both, which is quite likely since these things are often
related.
I imagine you’re reading this book because you’re looking for better ways
to structure things and escape the mess that a software project inevitably
becomes. Here’s my theory: software always becomes a mess, even if you
follow all the known best practices for software design. But I’m convinced
that if you follow the practices explained in this book it will take more time
to become a mess, and this is already a huge competitive advantage.
4. Overview of the contents
This book is divided into three parts. In Part I (“Decoupling from infrastruc-
ture”) we look at different code samples from a legacy application where core
and infrastructure code are mixed together. We find out how to:
• Extract a domain model from code that mixes SQL queries with business
decisions (Chapter 2)
• Extract a reusable application service from a controller that mixes form
handling, business logic, and database queries (Chapter 4).
• Separate a read model from its underlying data storage (Chapter 3)
• Rewrite classes that use service location to classes that rely on depen-
dency injection (Chapter 5)
xii
