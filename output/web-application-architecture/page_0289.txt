11. Key design patterns
11.5.1. Move subscribers to the module where they produce their
effect
The class name of an event subscriber should describe what it’s going to do,
e.g. “create an invoice” (Listing 11.19). The methods of the event subscriber
should describe when it’s going to do this. Doing so allows you to move event
subscribers to the area where they produce their effect. For instance, in-
voicing might be handled in a completely different part of the application. It
would damage the ability to decouple modules from each other if the order
module would reach out to the invoicing module and start calling methods
there. Figure 11.3 shows how doing so establishes a dependency from the
order module to the invoicing module.
Figure 11.3. The CreateInvoice subscriber, which lives in the Orders mod-
ule, uses the the InvoicingService from the Invoicing module,
establishing a dependency from the Orders module to the In-
voicing module.
The order comes first, and determines what needs to be invoiced. The in-
voice comes second, and it’s based on data from the order. So the order
module is upstream, the invoicing module is downstream. We should reflect
that in the way we set up the event subscribers too. The CreateInvoice sub-
scriber should live in the invoicing module and subscribe itself to events that
are produced inside the order module. Whenever the OrderFullyDelivered
event occurs it starts creating the invoice, which is an entity managed by the
invoicing module. By arranging things that way the orders module doesn’t
have to know anything about the invoicing module. The invoicing module
269
