6. External services
we use here. Imagine switching to a different VAT API service. That would
be impossible without touching the code in EbookOrderService. Most likely
it has different endpoints which accept different types of query parameters
with different names.
This situation is pretty common in applications that talk to external systems.
Yes, implementation details are nicely hidden inside other objects. But these
objects don’t have the proper level of abstraction, making it impossible to
switch implementations, whether that be for testing purposes, or when you
actually want to switch to a different remote API.
6.2. Introducing an abstraction
A very powerful technique to make sure that levels of abstraction are cor-
rect, is to replace the dependency to an actual class with a dependency on an
interface. However, the interface should not simply be extracted from the
class. If the only thing we did was define all methods of VatApi in an inter-
face, the situation wouldn’t be much better. In fact, nothing would change
about the EbookOrderService and how it uses the injected VatApi instance
(see Listing 6.7).
Listing 6.7. Extracting an interface from the VatApi class is not the solution.
interface VatApi
{
public function vatRateCheck(
string $rateType,
string $countryCode,
?string $filter
): VatRateCheckResult;
}
final class ActualVatApi implements VatApi
{
public function vatRateCheck(
string $rateType,
string $countryCode,
?string $filter
144
