3. Read models and view models
go ahead and prevent problems by using separate objects for changing state
and retrieving information. This means we leave the Ebook entity as it is,
and we create a new object, an Ebook read model that serves the local need
to know the price of the e-book. This Ebook read model is going to be a read-
only object (also known as an immutable object). Clients that have access to
the read model won’t be able to (accidentally) change its state.
“Are getters on entities forbidden?”
I’ve been trying to make it clear that an entity shouldn’t be used in a place
where information is needed. Adding a getter to an entity is often a sign
that you’ve loaded the entity just to get data from it. You should consider
introducing a read model in such a scenario, just like we’re going to do in
the next section. It doesn’t mean you can never add a getter to an entity.
Usually I need at least a getter for the entity’s ID and a getter for retrieving
the internally recorded events (we’ll talk about that in Section 3.3.2). De-
pending on your situation, there might be other information that an entity
has to expose. But always consider alternative designs too. Here is an ex-
ample from a previous project where an entity was given an extra getter
to expose its “booking period”:
// $vatReturn is the entity, $bookingPeriods a service
/*
* We need to verify that the booking period of the VAT return wasn't
* closed yet, before we try to roll it back:
*/
if ($bookingPeriods->isClosed($vatReturn->bookingPeriod()) {
throw CouldNotRollBack::becauseBookingPeriodIsClosed();
}
$vatReturn->rollBack();
This is an alternative implementation where the entity wouldn’t need to
have that getter:
$vatReturn->rollBack($bookingPeriods);
// Inside the entity:
57
