11. Key design patterns
final class InvoicingService
{
private OrderRepository $orderRepository;
public function __construct(OrderRepository $orderRepository)
{
$this->orderRepository = $orderRepository;
}
public function createInvoiceForOrder(OrderId $orderId)
{
$order = $this->orderRepository->getById($orderId);
$invoice = Invoice::create(
$order->customerId(),
$order->billingAddress()
);
// ...
}
}
Separating the interface and the implementation gives you a lot of flexibility.
In a test scenario you can replace the OrderRepository dependency of the
InvoicingService with a simpler, faster version. We can let it return any
Order read model object we need.
Figure 11.5 shows the dependencies between the Order and Invoicing mod-
ules.
11.6.2. Choose a standard implementation for the repository
The read model repository implementation will fetch the required data and
create the desired Order read model objects. It can do this in several ways,
for example:
â€¢ The repository can use the same database as the one used by the write
274
