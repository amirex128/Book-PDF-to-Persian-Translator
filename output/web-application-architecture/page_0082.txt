3. Read models and view models
is to write integration tests for your read model repositories. Another thing
you could do to improve the situation is to have one class implement both
the write and the read model repository interface. That way, the knowledge
about the database table and the meaning of its columns is at least in a single
place, making it less likely that you’ll run into this kind of problem.
3.3.2. Using write model domain events
Another approach to keep the read model in sync with the write model would
be to dispatch a domain event for every important change inside the entity.
The read model is then able to update its own state based on the informa-
tion contained in those events. These are the ingredients you’ll need for this
approach:
1. An entity.
2. A domain event for every state change that is relevant to the read model.
3. A service that subscribes to these domain events and updates the read
model according to the changes indicated by the events.
Listing 3.7 shows how the entity can record domain events internally when
its state changes in a way that might be relevant to others.
Listing 3.7. An entity records domain events internally.
final class Ebook
{
/**
* @var array<object>
*/
private array $events;
private int $price;
// ...
public function changePrice(int $newPrice): void
{
$this->price = $newPrice;
62
