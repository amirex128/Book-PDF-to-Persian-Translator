3. Read models and view models
$this->render(
'list.html.twig', [
'ebooks' => $records
]
)
);
}
}
By now we quickly recognize the issue here: this code is coupled to the in-
frastructure. Being able to produce a list of available e-books is a crucial
use case for e-book shops. Yet, this use case isn’t recognizable in our code as
something separable from the application’s infrastructure.
I usually do a little thought experiment to find out if we even need to decou-
ple a particular functionality from its underlying infrastructure. It goes as
follows:
What if we would still be running the same business; we still want to sell
e-books to our customers. Except, from now on people will have to use the
command-line to order their e-books (I know, it’s silly, but hang on). The
question is: should our application still provide the functionality we’re con-
sidering to decouple? If not, the functionality was in fact justifiably tied to the
application’s infrastructure. Switching from a web frontend to a CLI frontend
makes the need for such a functionality disappear completely. If, however,
people would still need to be able to use that functionality, even from the
command line, it means we have to decouple it.
In our situation the more specific question is: should the user be able to look
at a list of available e-books before buying one? Of course they do. How
would they figure out which e-book to buy if they don’t even know which e-
books we sell? In other words, listing available e-books deserves to be more
than just a controller with a database query. It needs to be represented in
core code.
We need to do several things:
1. Model our query as a method on an interface.
2. Model the result of that query as an object that gives us the exact answer
71
