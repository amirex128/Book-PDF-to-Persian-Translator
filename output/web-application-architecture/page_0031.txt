1. Introduction
kinds of external changes, like a major framework upgrade, a switch to a
different database vendor, etc.
It’s not a coincidence that the classes in this example are domain-oriented.
In Chapter 12 we will discuss architectural layering and define rules for the
Domain and Application layers which naturally align with the rules for core
and infrastructure code. In short: all of the domain code and the application’s
use cases should be core code, and not rely on or be coupled to surrounding
infrastructure.
This also explains why I’m using the words “core” and “infrastructure”. In-
frastructure is a common term used to describe the technical aspects of an
interaction. In a web application, infrastructure supports the communica-
tion between your application and the outside world. The core is the center
of your application, the infrastructure is around it, both protecting the core
and connecting it to external systems and users (Figure 1.1).
Figure 1.1. Connecting the core to external systems and users through in-
frastructure
“Is all code in my vendor directory infrastructure code?”
Great question. In /vendor you’ll find your web framework, which facili-
tates communication with browsers and external systems using HTTP. You’ll
11
