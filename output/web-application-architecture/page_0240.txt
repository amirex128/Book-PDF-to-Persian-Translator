8. Validation
}
$command = OrderEbook::fromRequestData($emptyRequestData = []);
/*
* `emailAddress()` returns an empty string.
* `fromString()` will throw an exception.
*/
$emailAddress = EmailAddress::fromString($command->emailAddress());
There are ways in which we could improve this code even more. For instance,
methods like fromRequestData() are really hard to read, and it’s really easy
to make programming mistakes as well. That’s why I like to introduce a few
helper functions that can help us remove some of the duplication and adds
some meaning to all those isset() calls and ternary operators. Listing 8.20
shows how you can use a trait for that, but you could also use a utility class
with public static methods if you like.
Listing 8.20. A trait that helps with mapping.
trait Mapping
{
private static function getString(array $data, string $key): string
{
if (!isset($data[$key])) {
return '';
}
return (string)$data[$key];
}
private static function getInt(array $data, string $key): int
{
if (!isset($data[$key])) {
return 0;
}
return (int)$data[$key];
}
private static function getNonEmptyStringOrNull(
220
