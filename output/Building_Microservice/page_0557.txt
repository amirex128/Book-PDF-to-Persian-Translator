happens inside a zone and more about what happens between the zones. That means
we need to spend time thinking about how our microservices talk to each other and
ensuring that we can properly monitor the overall health of our system. From an
architecture space, this is how we create our own universal space—by defining some
specific boundaries, we highlight to our colleagues building the system those areas
where changes can be made more freely without breaking some fundamental aspect
of our architecture.
To look at a very simple example, in Figure 16-1 we see the Recommendations micro‐
service accessing information from the Promotions and Sales microservices. As
we’ve already covered at length, we are free to change the functionality hidden inside
these three microservices without worrying about breaking the overall system—I can
change whatever I want in Sales or Promotions as long as I continue to maintain the
expectations that Recommendations has about how it will interact with these down‐
stream microservices.
Figure 16-1. Changes inside a microservice boundary are easy to make, as long as the
interactions between microservices don’t change
We can create space for change at larger-scope levels as well. In Figure 16-2, we see
the microservices from Figure 16-1 actually exist in a marketing zone that maps to a
specific team’s responsibility. We’ve defined an expected behavior in terms of how
the marketing functionality interacts with the larger system. Inside the marketing
zone, we can make any changes we like, as long as compatibility with the larger sys‐
tem is maintained. Coming back to the idea of understanding what things are hard to
change, organizational structures often fall into this category, and as such existing
team structures can help define these zones for you. Coordinating changes within a
Defining System Boundaries 
| 
531
