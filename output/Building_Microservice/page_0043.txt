7 Leslie Lamport, email message to a DEC SRC bulletin board at 12:23:29 PDT on May 28, 1987.
Figure 1-8. A modular monolith with a decomposed database
The Distributed Monolith
A distributed system is one in which the failure of a computer you didn’t even know existed
can render your own computer unusable.7
—Leslie Lamport
A distributed monolith is a system that consists of multiple services, but for whatever
reason, the entire system must be deployed together. A distributed monolith might
well meet the definition of an SOA, but all too often, it fails to deliver on the promises
of SOA. In my experience, a distributed monolith has all the disadvantages of a dis‐
tributed system, and the disadvantages of a single-process monolith, without having
enough of the upsides of either. Encountering a number of distributed monoliths in
my work has in large part influenced my own interest in microservice architecture.
Distributed monoliths typically emerge in an environment in which not enough
focus was placed on concepts like information hiding and cohesion of business
functionality. Instead, highly coupled architectures cause changes to ripple across
service boundaries, and seemingly innocent changes that appear to be local in scope
break other parts of the system.
Monoliths and Delivery Contention
As more and more people work in the same place, they get in one another’s way—for
example, different developers wanting to change the same piece of code, different
teams wanting to push functionality live at different times (or to delay deployments),
and confusion around who owns what and who makes decisions. A multitude of
The Monolith 
| 
17
