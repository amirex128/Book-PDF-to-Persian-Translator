Make Your Interface Explicit
It is important that the interface that a microservice exposes to the outside world is
explicit. This means that it is clear to a consumer of a microservice as to what func‐
tionality that microservice exposes. But it also means that it is clear to a developer
working on the microservice what functionality needs to remain intact for external
parties—we want to avoid a situation in which a change to a microservice causes an
accidental breakage in compatibility.
Explicit schemas can go a long way in helping ensure that the interface a microservice
exposes is explicit. Some of the technology we can look at requires the use of a
schema; for other technology, the use of a schema is optional. Either way, I strongly
encourage the use of an explicit schema, as well as there being enough supporting
documentation to be clear about what functionality a consumer can expect a micro‐
service to provide.
Keep Your APIs Technology Agnostic
If you have been in the IT industry for more than 15 minutes, you don’t need me to
tell you that we work in a space that is changing rapidly. The one certainty is change.
New tools, frameworks, and languages are coming out all the time, implementing
new ideas that can help us work faster and more effectively. Right now, you might be
a .NET shop. But what about a year from now, or five years from now? What if you
want to experiment with an alternative technology stack that might make you more
productive?
I am a big fan of keeping my options open, which is why I am such a fan of microser‐
vices. It is also why I think it is very important to ensure that you keep the APIs used
for communication between microservices technology agnostic. This means avoiding
integration technology that dictates what technology stacks we can use to implement
our microservices.
Make Your Service Simple for Consumers
We want to make it easy for consumers to use our microservice. Having a beautifully
factored microservice doesn’t count for much if the cost of using it as a consumer is
sky high! So let’s think about what makes it easy for consumers to use our wonderful
new service. Ideally, we’d like to allow our clients full freedom in their technology
choice; on the other hand, providing a client library can ease adoption. Often, how‐
ever, such libraries are incompatible with other things we want to achieve. For exam‐
ple, we might use client libraries to make it easy for consumers, but this can come at
the cost of increased coupling.
122 
| 
Chapter 5: Implementing Microservice Communication
