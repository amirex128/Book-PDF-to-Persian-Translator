1 This concept was first outlined by David Parnas in “Information Distribution Aspects of Design Methodol‐
ogy”, Information Processing: Proceedings of the IFIP Congress 1971 (Amsterdam: North-Holland, 1972),
1:339–44.
API, as shown in Figure 1-1), over whatever protocols are most appropriate. Con‐
sumers, whether they’re other microservices or other sorts of programs, access this
functionality via these networked endpoints. Internal implementation details (such as
the technology the service is written in or the way data is stored) are entirely hidden
from the outside world. This means microservice architectures avoid the use of
shared databases in most circumstances; instead, each microservice encapsulates its
own database where required.
Figure 1-1. A microservice exposing its functionality over a REST API and a topic
Microservices embrace the concept of information hiding.1 Information hiding means
hiding as much information as possible inside a component and exposing as little as
possible via external interfaces. This allows for clear separation between what can
change easily and what is more difficult to change. Implementation that is hidden
from external parties can be changed freely as long as the networked interfaces the
microservice exposes don’t change in a backward-incompatible fashion. Changes
inside a microservice boundary (as shown in Figure 1-1) shouldn’t affect an upstream
4 
| 
Chapter 1: What Are Microservices?
