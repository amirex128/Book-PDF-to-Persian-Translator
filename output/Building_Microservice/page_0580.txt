Figure A-2. A microservice exposing its functionality over a REST API and a topic
Event-driven collaboration can make it easier to build more loosely coupled architec‐
tures, but it can require more work to understand how the system is behaving. This
type of communication also often requires the use of specialist technology such as
message brokers, which can further complicate matters. If you can use a fully man‐
aged message broker, that can help lower the cost of these types of systems.
Request-response and event-driven interaction models both have their place, and
often which one you use will be a personal preference. Some problems just fit one
model more than another, and it’s common for a microservice architecture to have a
mix of styles.
Workflow
When looking to get multiple microservices collaborating to perform some overarch‐
ing operation, look to explicitly model the process using sagas, a topic we explored in
Chapter 6.
In general, distributed transactions should be avoided in situations where you can use
a saga instead. Distributed transactions add significant complexity to systems, have
problematic failure modes, and often don’t deliver what you expect even when they
554 
| 
Afterword: Bringing It All Together
