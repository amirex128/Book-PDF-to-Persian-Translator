Distributed Transactions—Two-Phase Commits
The two-phase commit algorithm (sometimes shortened to 2PC) is frequently used in
an attempt to give us the ability to make transactional changes in a distributed sys‐
tem, where multiple separate processes may need to be updated as part of the overall
operation. Distributed transactions, and two-phased commits more specifically, are
frequently considered by teams moving to microservice architectures as a way of
solving challenges they face. But as we’ll see, they might not solve your problems and
may bring even more confusion to your system.
The 2PC is broken into two phases (hence the name two-phase commit): a voting
phase and a commit phase. During the voting phase, a central coordinator contacts all
the workers who are going to be part of the transaction and asks for confirmation as
to whether or not some state change can be made. In Figure 6-3, we see two requests:
one to change a customer status to VERIFIED, and another to remove a row from our
PendingEnrollments table. If all workers agree that the state change they are asked
for can take place, the algorithm proceeds to the next phase. If any worker says the
change cannot take place, perhaps because the requested state change violates some
local condition, the entire operation aborts.
Figure 6-3. In the first phase of a two-phase commit, workers vote to decide if they can
carry out some local state change
It’s important to highlight that the change does not take effect immediately after a
worker indicates that it can make the change. Instead, the worker is guaranteeing that
it will be able to make that change at some point in the future. How would the worker
Distributed Transactions—Two-Phase Commits 
| 
179
