Fundamentally, what all these techniques have at their heart is a simple shift in how
we think about shipping software. Namely, that we can separate the concept of
deployment from that of release.
Separating Deployment from Release
Jez Humble, coauthor of Continuous Delivery, makes the case for separating these
two ideas, and he makes this a core principle for low-risk software releases:
Deployment is what happens when you install some version of your software into a
particular environment (the production environment is often implied). Release is
when you make a system or some part of it (for example, a feature) available to users.
Jez argues that by separating these two ideas, we can ensure that our software works
in its production setting without failures being seen by our users. Blue-green deploy‐
ment is one of the simplest examples of this concept in action—you have one version
of your software live (blue), and then you deploy a new version alongside the old ver‐
sion in production (green). You check to make sure that the new version is working
as expected, and if it is, you redirect customers to see the new version of your soft‐
ware. If you find a problem before the switchover, no customer is impacted.
While blue-green deployments are among the simplest examples of this principle,
there are a number of more sophisticated techniques we can use when we embrace
this concept.
On to Progressive Delivery
James Governor, cofounder of developer-focused industry analyst firm RedMonk,
first coined the term progressive delivery to cover a number of different techniques
being used in this space. He has gone on to describe progressive delivery as “continu‐
ous delivery with fine-grained control over the blast radius”—so it’s an extension of
continuous delivery but also a technique that gives us the ability to control the poten‐
tial impact of our newly released software.
Picking up this theme, Adam Zimman from LaunchDarkly describes how progressive
delivery impacts “the business.” From that point of view, we require a shift in think‐
ing about how new functionality reaches our customers. It’s no longer a single rollout
—it can now be a phased activity. Importantly, though, progressive delivery can
empower the product owner by, as Adam puts it, “delegating the control of the fea‐
ture to the owner that is most closely responsible for the outcome.” For this to work,
however, the product owner in question needs to understand the mechanics of the
progressive delivery technique being used, implying a somewhat technically savvy
product owner, or else support from a suitably savvy set of people.
We’ve already touched on blue-green deployments as one progressive delivery tech‐
nique. Let’s briefly take a look at a few more.
270 
| 
Chapter 8: Deployment
