Figure A-3. Enabling teams support multiple stream-aligned teams
Making these stream-aligned teams as autonomous as possible means that they need
self-service tools to avoid having to constantly ask other teams to do things for them.
As part of this, a platform can be incredibly useful. It’s important, though, that we see
a platform as a type of paved road—that is, as something that makes it easy to do the
right thing, without requiring that it must be used. Making a platform optional
ensures that making the platform easy to use remains a key focus of the team owning
it, while also allowing teams to make a different choice when warranted.
Architecture
It’s important that we don’t see the architecture of our system as fixed and unchang‐
ing. Instead, we should view our system architecture as something that should be able
to continually change as circumstances require. For you to get the most out of micro‐
service architectures, moving to an organization where more autonomy is pushed
into teams means that responsibility for the technical vision needs to become a more
collaborative process. The architect sitting in an ivory tower will either be a signifi‐
cant blocker to a microservice architecture or else will become an ignored
irrelevance.
The role of shepherding the architecture of a system can be entirely distributed into
the teams, and at a certain level of scale this can work well. However, as the organiza‐
tion grows, having people with dedicated time to look across the system as a whole
becomes essential. Call them principal engineers, technical product owners, or archi‐
tects, it doesn’t really matter—the role that they need to play is the same. As I showed
in Chapter 16, architects in a microservice organization need to support teams, con‐
nect people, spot patterns emerging, and spend enough time embedded with teams to
see how the big picture stuff plays out in reality.
560 
| 
Afterword: Bringing It All Together
