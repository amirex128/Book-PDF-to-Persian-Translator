Secondly, the focus on defining a common, ubiquitous language helps greatly when it
comes to defining microservice endpoints. It neatly gives us a shared vocabulary to
draw on when coming up with APIs, event formats, and the like. It also helps solve
the problem of how far the standardization of APIs needs to go in terms of allowing
language to change within bounded contexts—change inside a boundary impacting
that boundary itself.
The changes we implement to our system are often about changes the business wants
to make in how the system behaves. We are changing functionality—capabilities—
that are exposed to our customers. If our systems are decomposed along the bounded
contexts that represent our domain, any changes we want to make are more likely to
be isolated to a single microservice boundary. This reduces the number of places we
need to make a change and allows us to deploy that change quickly.
Fundamentally, DDD puts the business domain at the heart of the software we are
building. The encouragement that it gives us to pull the language of the business into
our code and service design helps improve domain expertise among the people who
build the software. This in turn helps build understanding and empathy for the users
of our software and builds greater communication among technical delivery, product
development, and the end users. If you are interested in moving toward stream-
aligned teams, DDD fits in neatly as a mechanism to help align the technical architec‐
ture with the wider organizational structure. In a world in which we are increasingly
trying to tear down the silos between IT and “the business,” this is no bad thing.
Alternatives to Business Domain Boundaries
As I’ve outlined, DDD can be incredibly useful when building microservice architec‐
tures, but it would be a mistake to think that this is the only technique you should
consider when finding microservice boundaries. In fact, I often use multiple methods
in conjunction with DDD to help identify how (and if) a system should be split. Let’s
look at some of the other factors we might consider when finding boundaries.
Volatility
I’ve increasingly heard of pushback against domain-oriented decomposition, often by
advocates for volatility being the primary driver for decomposition. Volatility-based
decomposition has you identify the parts of your system going through more fre‐
quent change and then extract that functionality into their own services, where they
can be more effectively worked on. Conceptually, I don’t have a problem with this,
but promoting it as the only way to do things isn’t helpful, especially when we con‐
sider the different drivers that might be pushing us toward microservices. If my big‐
gest issue is related to the need to scale my application, for example, a volatility-based
decomposition is unlikely to deliver much of a benefit.
62 
| 
Chapter 2: How to Model Microservices
