of immediate review you get as part of pair programming. You and another devel‐
oper write the code together and discuss the changes with each other. It gets reviewed
before you check in.
You don’t have to take my word for it. Coming back to Accelerate, a book we’ve
already referenced a number of times now:
We found that approval only for high-risk changes was not correlated with software
delivery performance. Teams that reported no approval process or used peer review
achieved higher software delivery performance. Finally, teams that required approval
by an external body achieved lower performance.
Here we see a distinction drawn between peer-review and external change review. A
peer change review is done by someone who is in all likelihood in the same team as
you, and who works on the same codebase as you. They are obviously better placed to
assess what makes for a good change and are also likely to carry out the review more
quickly (more on that shortly). An external review, though, is always more fraught.
As the individual is external to your team, they will likely be assessing the change
against a list of criteria that may or may not make sense, and as they are in a separate
team, they might not get to your changes for a while. As the authors of Accelerate
note:
What are the chances that an external body, not intimately familiar with the internals
of a system, can review tens of thousands of lines of code change by potentially hun‐
dreds of engineers and accurately determine the impact on a complex production
system?
So, in general, we want to make use of peer change reviews and avoid the need for
external code reviews.
Synchronous versus asynchronous code reviews
With pair programming, the code review happens inline at the time the code is being
written. In fact, it’s more than that. When pairing, you have the driver (the person at
the keyboard) and the navigator (who is acting as a second pair of eyes). Both partici‐
pants are in a constant dialogue about the changes they are making—the act of review
and the act of making the changes are happening at the same time. The review
becomes an implicit, continual aspect of the pairing relationship. That means that as
things are spotted, they are immediately fixed.
If you aren’t pairing, the ideal would be for the review to happen very quickly after
writing the code. Then you’d like the review itself to be as synchronous as possible.
You want to be able to discuss directly with the reviewer any issues they have, agree
together on a way forward, make the changes, and move on.
The faster you get feedback on a code change, the faster you can look at the feedback,
assess it, ask for clarification, discuss the issue further if needed, and ultimately make
any necessary changes. The longer it takes between submitting the code change for
516 
| 
Chapter 15: Organizational Structures
