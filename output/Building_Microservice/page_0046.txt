that you didn’t know you would want to ask in the first place. Open source tools can
provide some of these features. One example is Jaeger, which focuses on the dis‐
tributed tracing side of the equation.
But products like Lightstep and Honeycomb (shown in Figure 1-9) take these ideas
further. They represent a new generation of tools that move beyond traditional moni‐
toring approaches, making it much easier to explore the state of your running system.
You might already have more conventional tools in place, but you really should look
at the capabilities these products provide. They’ve been built from the ground up to
solve the sorts of problems that operators of microservice architectures have to deal
with.
Figure 1-9. A distributed trace shown in Honeycomb, allowing you to identify where
time is being spent for operations that can span multiple microservices
Containers and Kubernetes
Ideally, you want to run each microservice instance in isolation. This ensures that
issues in one microservice can’t affect another microservice—for example, by gob‐
bling up all the CPU. Virtualization is one way to create isolated execution environ‐
ments on existing hardware, but normal virtualization techniques can be quite heavy
when we consider the size of our microservices. Containers, on the other hand, pro‐
vide a much more lightweight way to provision isolated execution for service instan‐
ces, resulting in faster spin-up times for new container instances, along with being
much more cost effective for many architectures.
20 
| 
Chapter 1: What Are Microservices?
