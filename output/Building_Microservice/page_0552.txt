1 For several reasons, not the least of which is that I have a degree in software engineering…
Our industry is a young one. We seem to forget sometimes that we have been creat‐
ing programs that run on what we recognize as computers for only 75 years or so.
Our profession doesn’t fit into a nice neat box that society as a whole understands.
We aren’t like electricians, plumbers, medical doctors, or engineers. How many times
have you told someone what you do at a party, only for the conversation to stop? The
world as a whole struggles to understand software development—as I’ve outlined
multiple times throughout this book, we frequently don’t seem to understand it
ourselves.
So we borrow from other professions. We call ourselves software “engineers,” or
“architects.” But we aren’t architects or engineers in the way that society understands
those professions. Architects and engineers have a rigor and discipline we could only
dream of, and their importance in society is well understood. I remember talking to a
friend of mine the day before he became a qualified architect. “Tomorrow,” he said,
“if I give you advice down at the pub about how to build something and it’s wrong, I
get held to account. I could get sued, as in the eyes of the law I am now a qualified
architect and I should be held responsible if I get it wrong.” The importance of these
jobs to society means that there are required qualifications people have to meet. In
the UK, for example, a minimum of seven years’ study is required before you can be
called an architect. But these jobs are also based on a body of knowledge going back
thousands of years. And software architects? Not quite. Which is partly why I view
many forms of IT certification as worthless, as we know so little about what “good”
looks like.
I don’t say this to belittle the term software engineering,1 coined back in the 1960s by
Margaret Hamilton, but it was as much aspirational as it was about the current real‐
ity. The term emerged as a call to improve the quality of the software being created,
and in recognition of the fact that software projects often failed and yet were increas‐
ingly being used in vital mission- and safety-critical fields. Much work has been done
to improve the situation since then, but my own take after 20 years in the industry is
that we’ve still got a lot to learn about doing a good (or at least a better) job.
Part of us wants recognition, so we borrow names from other professions that already
have the recognition we crave. But this can prove problematic, if we borrow working
practices from those professions without understanding the mindset behind them or
taking into account how software development is different from, say, civil engineer‐
ing. None of this should be taken as an argument that we shouldn’t aim to have more
rigor in our work—just that we cannot simply borrow ideas from elsewhere and
assume they will work for us. Our industry is very young, and the challenge is that we
have far fewer absolutes around which we agree as an industry.
526 
| 
Chapter 16: The Evolutionary Architect
