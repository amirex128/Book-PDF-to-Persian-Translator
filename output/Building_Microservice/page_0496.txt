Figure 14-6. Interactions between the recommendation micro frontend and supporting
microservices
Generally speaking, you’ll need a “container” application that defines things like the
core navigation for the interface and which widgets need to be included. If we were
thinking in terms of end-to-end stream-oriented teams, we could imagine a single
team providing the recommendation widget and also being responsible for a support‐
ing Recommendations microservice.
This pattern is found a lot in the real world. The Spotify user interface, for example,
makes heavy use of this pattern. One widget might hold a playlist, another might
hold information about an artist, and a third widget might hold information about
the artists and other Spotify users that you follow. These widgets are combined in dif‐
ferent ways in different situations.
You still need some sort of assembly layer to pull these parts together. This could be
as simple as making use of server-side or client-side templates, though.
Implementation
How to splice a widget into your UI will depend largely on how your UI is created.
With a simple website, including widgets as HTML fragments using either client-side
or server-side templating can be pretty straightforward, although you can incur prob‐
lems if the widgets have more complex behavior. As an example, if our recommenda‐
tion widget contains lots of JavaScript functionality, how would we ensure that this
470 
| 
Chapter 14: User Interfaces
