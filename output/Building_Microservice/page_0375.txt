3 I recommend Jonny’s Understanding Design Thinking, Lean, and Agile (O’Reilly) for more of his insights.
Automation
A recurring theme of this book is automation. As we have so many more moving
parts with microservice architectures, automation becomes key to helping us manage
the growing complexity of our system. At the same time, we have a drive toward
increasing the speed of delivery, and automation is essential here. Computers are way
better at doing the same thing over and over again than humans are—they do it faster
and more efficiently than we can (and with less variability as well). They can also
reduce human error and make it easier to implement the principle of least privilege—
we can assign specific privileges to specific scripts, for example.
As we’ll see throughout this chapter, automation can help us recover in the wake of
an incident. We can use it to revoke and rotate security keys and also make use of
tooling to help detect potential security issues more easily. As with other aspects of
microservice architecture, embracing a culture of automation will help you
immensely when it comes to security.
Build Security into the Delivery Process
Like so many other aspects of software delivery, security is all too often considered an
afterthought. Historically at least, addressing security aspects of a system is some‐
thing that is done after the code has been written, potentially leading to significant
reworking later on. Security has often been looked at as something of a blocker to
getting software out the door.
Over the last 20 years, we’ve seen similar issues with testing, usability, and operations.
These aspects of software delivery were frequently delivered in siloed fashion, often
after the bulk of the code was finished. An old colleague of mine, Jonny Schneider,
once likened the approach toward usability of software in terms of a “Do you want
fries with that?” mentality. In other words, usability is an afterthought—something
you sprinkle on top of the “main meal.”3
The reality, of course, is that software that isn’t usable, isn’t secure, can’t operate
properly in production, and is riddled with bugs isn’t in any way shape or form a
“main meal”—it’s a flawed offering at best. We’ve gotten better at pulling testing for‐
ward into the main delivery process, as we’ve done with operational aspects (DevOps,
anyone?) and usability—security should be no different. We need to ensure that
developers have a more general awareness of security-related concerns, that special‐
ists find a way to embed themselves into delivery teams when required, and that tool‐
ing improves to allow us to build security-related thinking into our software.
Core Principles 
| 
349
