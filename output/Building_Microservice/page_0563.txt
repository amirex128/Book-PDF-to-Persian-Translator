You probably don’t want loads of these. Fewer than 10 principles is a good number—
small enough for people to remember them, or to fit on small posters. The more
principles you have, the greater the chance that they overlap or contradict each other.
Heroku’s Twelve Factors is a set of design principles structured around the goal of
helping you create applications that work well on the Heroku platform. These princi‐
ples may also make sense in other contexts. Some of them are actually constraints
based on behaviors your application needs to exhibit in order to work on Heroku. A
constraint is really something that is very hard (or virtually impossible) to change,
whereas principles are things we decide to choose. You may decide to explicitly call
out those things that are principles versus those that are constraints to help highlight
those things you really can’t change. Personally, I think there can be some value in
keeping them in the same list, to encourage challenging constraints every now and
then and see if they really are immovable!
Practices
Our practices are how we ensure our principles are being carried out. They are a set
of detailed, practical guidelines for performing tasks. They will often be technology
specific and should be low level enough that any developer can understand them.
Practices could include coding guidelines, the fact that all log data needs to be cap‐
tured centrally, or the fact that HTTP/REST is the standard integration style. Due to
their technical nature, practices will typically change more often than principles.
As with principles, sometimes practices reflect constraints within your organization.
For example, if you have decided to pick Azure as your cloud platform, this will need
to be reflected in your practices.
Practices should underpin your principles. A principle stating that delivery teams
control the full life cycle of their systems may mean you have a practice stating that
all microservices are deployed into isolated AWS accounts, providing self-service
management of the resources and isolation from other teams.
Combining Principles and Practices
One person’s principles are another’s practices. You might decide to call the use of
HTTP/REST a principle rather than a practice, for example. And that would be fine.
The key point is that there is value in having overarching ideas that guide how the
system evolves, and in having enough detail so that people know how to implement
those ideas. For a small enough group, perhaps a single team, combining principles
and practices might be OK. However, for larger organizations, where the technology
and working practices may differ from place to place, you may want a different set of
practices in different places, as long as they all map to a common set of principles.
A .NET team, for example, might have one set of practices, and a Java team another.
The principles, though, could be the same for both.
A Principled Approach 
| 
537
