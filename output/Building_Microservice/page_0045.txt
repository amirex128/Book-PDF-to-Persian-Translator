issues caused by your increasingly distributed system, and then for technology that
might help.
That said, technology has played a large part in the adoption of microservices as a
concept. Understanding the tools that are available to help you get the most out of
this architecture is going to be a key part of making any implementation of microser‐
vices a success. In fact, I would go as far to say that microservices require an under‐
standing of the supporting technology to such a degree that previous distinctions
between logical and physical architecture can be problematic—if you are involved in
helping shape a microservice architecture, you’ll need a breadth of understanding of
these two worlds.
We’ll be exploring a lot of this technology in detail in subsequent chapters, but before
that, let’s briefly introduce some of the enabling technology that might help you if
you decide to make use of microservices.
Log Aggregation and Distributed Tracing
With the increasing number of processes you are managing, it can be difficult to
understand how your system is behaving in a production setting. This can in turn
make troubleshooting much more difficult. We’ll be exploring these ideas in more
depth in Chapter 10, but at a bare minimum, I strongly advocate the implementation
of a log aggregation system as a prerequisite for adopting a microservice architecture.
Be cautious about taking on too much new technology when you
start off with microservices. That said, a log aggregation tool is so
essential that you should consider it a prerequisite for adopting
microservices.
These systems allow you to collect and aggregate logs from across all your services,
providing you a central place from which logs can be analyzed, and even made part of
an active alerting mechanism. Many options in this space cater to numerous situa‐
tions. I’m a big fan of Humio for several reasons, but the simple logging services pro‐
vided by the main public cloud vendors might be good enough to get you started.
You can make these log aggregation tools even more useful by implementing correla‐
tion IDs, in which a single ID is used for a related set of service calls—for example,
the chain of calls that might be triggered due to user interaction. By logging this ID as
part of each log entry, isolating the logs associated with a given flow of calls becomes
much easier, which in turn makes troubleshooting much easier.
As your system grows in complexity, it becomes essential to consider tools that allow
you to better explore what your system is doing, providing the ability to analyze
traces across multiple services, detect bottlenecks, and ask questions of your system
Enabling Technology 
| 
19
