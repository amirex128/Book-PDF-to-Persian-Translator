CHAPTER 14
User Interfaces
So far, we haven’t really touched on the world of the user interface. A few of you out
there might just be providing a cold, hard, clinical API to your customers, but many
of us find ourselves wanting to create beautiful, functional user interfaces that will
delight our customers. The user interface, after all, is where we’ll be pulling all these
microservices together into something that makes sense to our customers.
When I first started computing, we were mostly talking about big, fat clients that ran
on our desktops. I spent many hours with Motif and then Swing trying to make my
software as nice to use as possible. Often these systems were just for the creation and
manipulation of local files, but many of them had a server-side component. My first
job at Thoughtworks involved creating a Swing-based electronic point-of-sale system
that was just one of a large number of moving parts, most of which were on the
server.
Then came the web. We instead started thinking of our UIs as being “thin,” with
more logic on the server side. In the beginning, our server-side programs rendered
the entire page and sent it to the client browser, which did very little. Any interac‐
tions were handled on the server side via GETs and POSTs triggered by the user
clicking on links or filling in forms. Over time, JavaScript became a more popular
option to add dynamic behavior to the browser-based UI, and some applications
could arguably be as “fat” as the old desktop clients. We subsequently had the rise of
the mobile application, and today we have a varied landscape for delivering graphical
user interfaces to our users—different platforms, and different technologies for those
platforms. This range of technologies gives us a host of options for how we can make
effective user interfaces backed by microservices. We’ll be exploring all of this and
more in this chapter.
455
