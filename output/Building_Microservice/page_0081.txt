13 Phil Calçado, “Pattern: Using Pseudo-URIs with Microservices,” https://oreil.ly/xOYMr.
Figure 2-13. An example of how a relationship between two aggregates in different
microservices can be implemented
The benefits of this approach are twofold. The nature of the relationship is explicit,
and in a REST system we could directly dereference this URI to look up the associ‐
ated resource. But what if you aren’t building a REST system? Phil Calçado describes
a variation of this approach in use at SoundCloud,13 where they developed a pseudo-
URI scheme for cross-service references. For example, soundcloud:tracks:123
would be a reference to a track with the ID of 123. This is much more explicit for a
human looking at this identifier, but it is also a useful enough scheme that it would be
easy to imagine creating code that could ease cross-microservice aggregate lookups if
needed.
There are lots of ways to break a system into aggregates, with some choices being
highly subjective. You may decide, for performance reasons or for ease of implemen‐
tation, to reshape aggregates over time. I consider implementation concerns to be
secondary, however; I begin by letting the mental model of the system users be my
guiding light on initial design until other factors come into play.
Just Enough Domain-Driven Design 
| 
55
