6 Nicole Forsgren, Jez Humble, and Gene Kim, Accelerate: The Science of Building and Scaling High Performing
Technology Organizations (Portland, OR: IT Revolution, 2018).
platform may need a deeper dive. Katacoda has some great online tutorials for com‐
ing to grips with the core concepts, and the CNCF helps put out a lot of training
materials in this space. Make sure the people who will actually use this stuff get to
play with it before you make up your mind.
Don’t get trapped into thinking that you have to have Kubernetes “because everyone
else is doing it.” This is just as dangerous a justification for picking Kubernetes as it is
for picking microservices. As good as Kubernetes is, it isn’t for everyone—carry out
your own assessment. But let’s be frank—if you’ve got a handful of developers and
only a few microservices, Kubernetes is likely to be huge overkill, even if using a fully
managed platform.
Progressive Delivery
Over the last decade or so, we’ve become smarter at deploying software to our users.
New techniques have emerged that were driven by a number of different use cases
and came from many different parts of the IT industry, but primarily they were all
focused around making the act of pushing out new software much less risky. And if
releasing software becomes less risky, we can release software more frequently.
There are a host of activities we carry out before sending our software live that can
help us pick up problems before they impact real users. Preproduction testing is a
huge part of this, although, as we’ll discuss in Chapter 9, this can only take us so far.
In their book Accelerate,6 Nicole Forsgren, Jez Humble, and Gene Kim show clear
evidence drawn from extensive research that high-performing companies deploy
more frequently than their low-performing counterparts and at the same time have
much lower change failure rates.
The idea that you “go fast and break stuff” doesn’t really seem to apply when it comes
to shipping software—shipping frequently and having lower failure rates goes hand
in hand, and organizations that have realized this have changed how they think about
releasing software.
These organizations make use of techniques like feature toggles, canary releases, par‐
allel runs, and more, which we’ll detail in this section. This shift in how we
think about releasing functionality falls under the banner of what is called progressive
delivery. Functionality is released to users in a controlled manner; instead of a big-
bang deployment, we can be smart about who sees what functionality—for example,
by rolling out a new version of our software to a subset of our users.
Progressive Delivery 
| 
269
