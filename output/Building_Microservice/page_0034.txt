Figure 1-2. A traditional three-tiered architecture
We will come back to the interplay of domain-driven design and how it interacts with
organizational design later in this chapter.
Owning Their Own State
One of the things I see people having the hardest time with is the idea that microser‐
vices should avoid the use of shared databases. If a microservice wants to access data
held by another microservice, it should go and ask that second microservice for the
data. This gives the microservices the ability to decide what is shared and what is hid‐
den, which allows us to clearly separate functionality that can change freely (our
internal implementation) from the functionality that we want to change infrequently
(the external contract that the consumers use).
If we want to make independent deployability a reality, we need to ensure that we
limit backward-incompatible changes to our microservices. If we break compatibility
with upstream consumers, we will force them to change as well. Having a clean delin‐
eation between internal implementation detail and an external contract for a micro‐
service can help reduce the need for backward-incompatible changes.
Hiding internal state in a microservice is analogous to the practice of encapsulation
in object-oriented (OO) programming. Encapsulation of data in OO systems is an
example of information hiding in action.
8 
| 
Chapter 1: What Are Microservices?
