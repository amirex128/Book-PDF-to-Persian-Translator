Summary
Microservice architectures can give you a huge degree of flexibility in choosing tech‐
nology, handling robustness and scaling, organizing teams, and more. This flexibility
is in part why many people are embracing microservice architectures. But microser‐
vices bring with them a significant degree of complexity, and you need to ensure that
this complexity is warranted. For many, they have become a default system architec‐
ture, to be used in virtually all situations. However, I still think that they are an archi‐
tectural choice whose use must be justified by the problems you are trying to solve;
often, simpler approaches can deliver much more easily.
Nonetheless, many organizations, especially larger ones, have shown how effective
microservices can be. When the core concepts of microservices are properly under‐
stood and implemented, they can help create empowering, productive architectures
that can help systems become more than the sum of their parts.
I hope this chapter has served as a good introduction to these topics. Next, we’re
going to look at how we define microservice boundaries, exploring the topics of
structured programming and domain-driven design along the way.
34 
| 
Chapter 1: What Are Microservices?
