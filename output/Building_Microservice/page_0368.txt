record all downstream calls in logs. Get correlation IDs into your logs from the start.
Log other major steps in your business processes. This will require that you have at
least a basic metric and log aggregation toolchain in place.
I’d hesitate to say that you need to start with a dedicated distributed tracing tool. If
you have to run and host the tool yourself, this can add significant complexity. On
the other hand, if you can make use of a fully managed service offering easily, instru‐
menting your microservices from the start can make a lot of sense.
For key operations, strongly consider creating synthetic transactions as a way of bet‐
ter understanding if the vital aspects of your system are working properly. Build your
system with this capability in mind.
All of this is just the basic information gathering. More importantly, you need to
make sure you can sift this information to ask questions of the running system. Are
you able to say with confidence that the system is properly working for your users?
Over time, you’ll need to collect more information and improve your tooling (and
the way you use it) to better improve the observability of your platform.
Summary
Distributed systems can be complicated to understand, and the more distributed they
are, the more difficult the task of production troubleshooting becomes. When the
pressure is on, alerts are blazing, and customers are screaming, it’s important you
have the right information available to you to work out what the hell is going on and
what you need to do to fix it.
As your microservice architecture becomes more complex, it becomes less easy to
know in advance what problems may happen. Instead, you will frequently be sur‐
prised by the types of problems you will encounter. It thus becomes essential to shift
your thinking away from the mostly (passive) activity of monitoring and toward
actively making your system observable. This involves not just potentially changing
your toolset but also shifting away from static dashboards to more dynamic slicing
and dicing activities.
With a simple system, the basics will get you a long way. Get log aggregation in from
the start, and get correlation IDs in your log lines too. Distributed tracing can follow
later, but be on the lookout for when the time comes to put that into place.
Shift your understanding of system or microservice health away from a binary state
of “happy” or “sad”; realize instead that the truth is always more nuanced than that.
Switch from having every little problem generating an alert to thinking more holisti‐
cally about what is acceptable. Strongly consider embracing SLOs and alerting based
on these precepts to reduce alert fatigue and properly focus attention.
342 
| 
Chapter 10: From Monitoring to Observability
