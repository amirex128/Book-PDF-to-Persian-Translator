1 True story.
2 Maarten van Steen and Andrew S. Tanenbaum, Distributed Systems, 3rd ed. (Scotts Valley, CA: CreateSpace
Independent Publishing Platform, 2017).
Changing Interfaces
When we consider changes to an interface inside a process, the act of rolling out the
change is straightforward. The code implementing the interface and the code calling
the interface are all packaged together in the same process. In fact, if I change a
method signature using an IDE with refactoring capability, often the IDE itself will
automatically refactor calls to this changing method. Rolling out such a change can
be done in an atomic fashion—both sides of the interface are packaged together in a
single process.
With communication between microservices, however, the microservice exposing an
interface and the consuming microservices using that interface are separately deploy‐
able microservices. When making a backward-incompatible change to a microservice
interface, we either need to do a lockstep deployment with consumers, making sure
they are updated to use the new interface, or else find some way to phase the rollout
of the new microservice contract. We’ll explore this concept in more detail later in
this chapter.
Error Handling
Within a process, if I call a method, the nature of the errors tends to be pretty
straightforward. Simplistically, the errors either are expected and easy to handle, or
they are catastrophic to the point that we just propagate the error up the call stack.
Errors, on the whole, are deterministic.
With a distributed system, the nature of errors can be different. You are vulnerable to
a host of errors that are outside your control. Networks time out. Downstream
microservices might be temporarily unavailable. Networks get disconnected, contain‐
ers get killed due to consuming too much memory, and in extreme situations, bits of
your data center can catch fire.1
In their book Distributed Systems,2 Andrew Tanenbaum and Maarten Steen break
down the five types of failure modes you can see when looking at an inter-process
communication. Here’s a simplified version:
Crash failure
Everything was fine till the server crashed. Reboot!
From In-Process to Inter-Process 
| 
91
