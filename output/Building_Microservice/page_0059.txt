Where They Work Well
In my experience, probably the single biggest reason that organizations adopt micro‐
services is to allow for more developers to work on the same system without getting
in each other’s way. Get your architecture and organizational boundaries right, and
you allow more people to work independently of each other, reducing delivery con‐
tention. A five-person startup is likely to find a microservice architecture a drag. A
hundred-person scale-up that is growing rapidly is likely to find that its growth is
much easier to accommodate with a microservice architecture properly aligned
around its product development efforts.
Software as a Service (SaaS) applications are, in general, also a good fit for a microser‐
vice architecture. These products are typically expected to operate 24-7, which creates
challenges when it comes to rolling out changes. The independent releasability of
microservice architectures is a huge boon in this area. Furthermore, the microservi‐
ces can be scaled up or down as required. This means that as you establish a sensible
baseline for your system’s load characteristics, you get more control over ensuring
that you can scale your system in the most cost-effective way possible.
The technology-agnostic nature of microservices ensures that you can get the most
out of cloud platforms. Public cloud vendors provide a wide array of services and
deployment mechanisms for your code. You can much more easily match the
requirements of specific services to the cloud services that will best help you imple‐
ment them. For example, you might decide to deploy one service as a set of functions,
another as a managed virtual machine (VM), and another on a managed Platform as
a Service (PaaS) platform.
Although it’s worth noting that adopting a wide range of technology can often be a
problem, being able to try out new technology easily is a good way to rapidly identify
new approaches that might yield benefits. The growing popularity of FaaS platforms
is one such example. For the appropriate workloads, an FaaS platform can drastically
reduce the amount of operational overhead, but at present, it’s not a deployment
mechanism that would be suitable in all cases.
Microservices also present clear benefits for organizations looking to provide services
to their customers over a variety of new channels. A lot of digital transformation
efforts seem to involve trying to unlock functionality hidden away in existing sys‐
tems. The desire is to create new customer experiences that can support the needs of
users via whatever interaction mechanism makes the most sense.
Above all, a microservice architecture is one that can give you a lot of flexibility as
you continue to evolve your system. That flexibility has a cost, of course, but if you
want to keep your options open regarding changes you might want to make in the
future, it could be a price worth paying.
Should I Use Microservices? 
| 
33
