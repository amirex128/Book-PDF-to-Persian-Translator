2 Alistair Cockburn, “Hexagonal Architecture,” January 4, 2005, https://oreil.ly/NfvTP.
consumer, enabling independent releasability of functionality. This is essential in
allowing our microservices to be worked on in isolation and released on demand.
Having clear, stable service boundaries that don’t change when the internal imple‐
mentation changes results in systems that have looser coupling and stronger
cohesion.
While we’re talking about hiding internal implementation detail, it would be remiss
of me not to mention the Hexagonal Architecture pattern, first detailed by Alistair
Cockburn.2 This pattern describes the importance of keeping the internal implemen‐
tation separate from its external interfaces, with the idea that you might want to
interact with the same functionality over different types of interfaces. I draw my
microservices as hexagons partly to differentiate them from “normal” services, but
also as an homage to this piece of prior art.
Are Service-Oriented Architecture and Microservices Different Things?
Service-oriented architecture (SOA) is a design approach in which multiple services
collaborate to provide a certain end set of capabilities. (A service here typically means
a completely separate operating system process.) Communication between these serv‐
ices occurs via calls across a network rather than method calls within a process
boundary.
SOA emerged as an approach to combat the challenges of large, monolithic applica‐
tions. This approach aims to promote the reusability of software; two or more end-
user applications, for example, could use the same services. SOA aims to make it
easier to maintain or rewrite software, as theoretically we can replace one service with
another without anyone knowing, as long as the semantics of the service don’t change
too much.
SOA at its heart is a sensible idea. However, despite many efforts, there is a lack of
good consensus on how to do SOA well. In my opinion, much of the industry failed
to look holistically enough at the problem and present a compelling alternative to the
narrative set out by various vendors in this space.
Many of the problems laid at the door of SOA are actually problems with things like
communication protocols (e.g., SOAP), vendor middleware, a lack of guidance about
service granularity, or the wrong guidance on picking places to split your system. A
cynic might suggest that vendors co-opted (and in some cases drove) the SOA move‐
ment as a way to sell more products, and those selfsame products in the end under‐
mined the goal of SOA.
Microservices at a Glance 
| 
5
