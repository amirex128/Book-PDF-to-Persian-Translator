1 David D. Woods, “Four Concepts for Resilience and the Implications for the Future of Resilience Engineer‐
ing,” Reliability Engineering & System Safety 141 (September 2015): 5–9, doi.org/10.1016/j.ress.2015.03.018.
area of resilience engineering, which looks at the concept of resiliency as it applies to
a host of systems—from firefighting to air traffic control, biological systems, and
operating theaters. Drawing on this field, David D. Woods has attempted to catego‐
rize the different aspects of resilience to help us think more widely about what resil‐
iency actually means.1 These four concepts are:
Robustness
The ability to absorb expected perturbation
Rebound
The ability to recover after a traumatic event
Graceful extensibility
How well we deal with a situation that is unexpected
Sustained adaptability
The ability to continually adapt to changing environments, stakeholders, and
demands
Let’s look at each of these concepts in turn and examine how these ideas might (or
might not) translate into our world of building microservice architectures.
Robustness
Robustness is the concept whereby we build mechanisms into our software and pro‐
cesses to accommodate expected problems. We have an advanced understanding of
the kinds of perturbations we might face, and we put measures in place so that when
these issues arise, our system can deal with them. In the context of our microservice
architecture, we have a whole host of perturbations that we might expect: a host can
fail, a network connection can time out, a microservice might be unavailable. We can
improve the robustness of our architecture in a number of ways to deal with these
perturbations, such as automatically spinning up a replacement host, performing
retries, or handling failure of a given microservice in a graceful manner.
Robustness goes beyond software, though. It can apply to people. If you have a single
person on call for your software, what happens if that person gets sick or isn’t reacha‐
ble at the time of an incident? This is a fairly easy thing to consider, and the solution
might be to have a backup on-call person.
Robustness by definition requires prior knowledge—we are putting measures into
place to deal with known perturbations. This knowledge could be based on foresight:
we could draw on our understandings of the computer system we are building, its
388 
| 
Chapter 12: Resiliency
