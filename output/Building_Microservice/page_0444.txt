concepts, though, we also need to be constantly on the lookout for what we don’t
know.
You also have to work out how much resiliency you want—and this is nearly always
something defined by the users and business owners of your system. As a technolo‐
gist, you can be in charge of how things are done, but knowing what resiliency is
needed will require good, frequent close communication with users and product
owners.
Let’s come back to David Woods’s quote from earlier in the chapter, which we used
when discussing sustained adaptability:
No matter how good we have done before, no matter how successful we’ve been, the
future could be different, and we might not be well adapted. We might be precarious
and fragile in the face of that new future.
Asking the same questions over and over again doesn’t help you understand if you
are prepared for the uncertain future. You don’t know what you don’t know—adopt‐
ing an approach in which you are constantly learning, constantly questioning, is key
to building resiliency.
One type of stability pattern we looked at, redundancy, can be very effective. This
idea segues quite nicely into our next chapter, where we’ll look at different ways to
scale our microservices, which as well as helping us handle more load can also be an
effective way to help us implement redundancy in our systems, and therefore also
improve the robustness of our systems.
418 
| 
Chapter 12: Resiliency
