versus observability, 309-311, 557
real user monitoring, 334
semantic monitoring, 333-334
single microservice, single server design,
306
single service, multiple servers design, 307
standardization, 337
tool selection, 338-340
monolithic frontend pattern, 463-464
monolithic systems (see also decomposition)
advantages of, 18
coexisting with microservices, 73
defined, 14
delivery contention and, 17
distributed, 17
versus legacy architecture, 18
modular, 16
single-process, 15
monorepo approach, 210-216, 571
mountebank stub/mock server, 284
MTBF (mean time between failures), 299
MTTR (mean time to repair), 299
multirepo approach, 207-210, 571
multitenancy (Kubernetes), 262-263
mutual authentication, 371
mutual TLS, 371
N
National Institute of Standards and Technology
(NIST), 350
nonfunctional requirements, 300
notification-based invalidation, 444
O
observability (see also monitoring)
alerting, 329-333
building blocks for, 311
distributed tracing, 324-326
log aggregation, 312-321
metrics aggregation, 321-324
versus monitoring, 309-311, 557
semantic monitoring, 333-334
system health, 327-329
testing in production, 335-337
on-demand provisioning systems, 25
open source development, 200, 511
OpenAPI, 131, 147, 170
openapi-diff, 148
OpenID Connect, 377
Operator, 266
orchestrated sagas, 189-192, 194-195, 555
orchestration, 571
organizational alignment, 25, 66-67
organizational structures
benefits of autonomy, 498
benefits of loosely coupled organizations,
496
case study, 519-520
Conwayâ€™s law, 493-495
enabling teams, 503-509
geographical distribution, 521
human dynamics and, 523
impact of system design on organizations,
522
internal open source, 511-512
loosely coupled organizations, 491
orphaned services, 518
overview of, 559
pluggable, modular microservices, 513-518
shared microservices, 509-511
small teams, large organization, 496-497
strong versus collective ownership, 499-503
team size, 495
orphaned services, 518
ownership models
changing ownership, 513
overview of, 456-459
pair programming, 515-517
strong versus collective ownership, 569, 572
P
Pact testing tool, 294
page-based decomposition, 467-468
pair programming, 515-517
parallel run pattern, 80, 272, 337
parallel, versus sequential calls, 108
partition tolerance, 411
partitions, 426
pass-through coupling, 43-46
passwords, salted password hashing, 373
patching, 360-363
pathological coupling, 51
paved road concept, 507, 544-547
performance tests, 301
personally identifiable information (PII), 572
Platform as a Service (PaaS), 248
platform teams, 507
pods (Kubernetes), 260
582 
| 
Index
