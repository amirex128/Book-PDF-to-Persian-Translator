With a few successes and some lessons learned, you’ll be much better placed to tackle
more complex extractions, which may also be operating in more critical areas of
functionality.
Decomposition by Layer
So you’ve identified your first microservice to extract; what next? Well, we can break
that decomposition down into further, smaller steps.
If we consider the traditional three tiers of a web-based services stack, then we can
look at the functionality we want to extract in terms of its user interface, backend
application code, and data.
The mapping from a microservice to a user interface is often not 1:1 (this is a topic
we explore in a lot more depth in Chapter 14). As such, extracting user interface
functionality related to the microservice could be considered a separate step. I will
sound a note of caution here about ignoring the user interface part of the equation.
I’ve seen far too many organizations look only at the benefits of decomposing the
backend functionality, which often results in an overly siloed approach to any archi‐
tectural restructuring. Sometimes the biggest benefits can come from decomposition
of the UI, so ignore this at your peril. Often decomposition of the UI tends to lag
behind decomposition of the backend into microservices, since until the microservi‐
ces are available, it’s difficult to see the possibilities for UI decomposition; just make
sure it doesn’t lag too much.
If we then look at the backend code and related storage, it’s vital for both to be in
scope when extracting a microservice. Let’s consider Figure 3-2, where we are looking
to extract functionality related to managing a customer’s wishlist. There is some
application code that lives in the monolith, and some related data storage in the data‐
base. So which bit should we extract first?
76 
| 
Chapter 3: Splitting the Monolith
