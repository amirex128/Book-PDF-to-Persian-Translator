You won’t appreciate the true horror, pain, and suffering that a
microservice architecture can bring until you are running in
production.
The Monolith Is Rarely the Enemy
While I already made the case at the start of the book that some form of monolithic
architecture can be a totally valid choice, it warrants repeating that a monolithic
architecture isn’t inherently bad and therefore shouldn’t be viewed as the enemy.
Don’t focus on “not having the monolith”; focus instead on the benefits you expect
your change in architecture to bring.
It is common for the existing monolithic architecture to remain after a shift toward
microservices, albeit often in a diminished capacity. For example, a move to improve
the ability of the application to handle more load might be satisfied by removing the
10% of functionality that is currently bottlenecked, leaving the remaining 90% in the
monolithic system.
Many people find the reality of a monolith and microservices coexisting to be
“messy”—but the architecture of a real-world running system is never clean or pris‐
tine. If you want a “clean” architecture, by all means laminate a printout of an ideal‐
ized version of the system architecture you might have had, if only you had perfect
foresight and limitless funds. Real system architecture is a constantly evolving thing
that must adapt as needs and knowledge change. The skill is in getting used to this
idea, something I’ll come back to in Chapter 16.
By making your migration to microservices an incremental journey, you are able to
chip away at the existing monolithic architecture, delivering improvements along the
way, while also, importantly, knowing when to stop.
In surprisingly rare circumstances, the demise of the monolith might be a hard
requirement. In my experience, this is often limited to situations in which the exist‐
ing monolith is based on dead or dying technology, is tied to infrastructure that
needs to be retired, or is perhaps an expensive third-party system that you want to
ditch. Even in these situations, an incremental approach to decomposition is warran‐
ted for the reasons I’ve outlined.
The Dangers of Premature Decomposition
There is danger in creating microservices when you have an unclear understanding of
the domain. An example of the problems this can cause comes from my previous
company, Thoughtworks. One of its products was Snap CI, a hosted continuous inte‐
gration and continuous delivery tool (we’ll discuss those concepts in Chapter 7). The
The Monolith Is Rarely the Enemy 
| 
73
