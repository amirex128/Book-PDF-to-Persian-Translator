1 Alanna Brown, Nicole Forsgren, Jez Humble, Nigel Kersten, and Gene Kim, 2016 State of DevOps Report,
https://oreil.ly/YqEEh.
2 Nicole Forsgren, Dustin Smith, Jez Humble, and Jessie Frazelle, Accelerate: State of DevOps 2019, https://
oreil.ly/mfkIJ.
Quite aside from my own anecdotal experience, there is a growing body of research
that shows the efficacy of reducing the number of branches and adopting trunk-
based development. The 2016 State of DevOps report by DORA and Puppet1 carries
out rigorous research into the delivery practices of organizations around the world
and studies which practices are commonly used by high-performing teams:
We found that having branches or forks with very short lifetimes (less than a day)
before being merged into trunk, and less than three active branches in total, are impor‐
tant aspects of continuous delivery, and all contribute to higher performance. So does
merging code into trunk or master on a daily basis.
The State of DevOps report has continued to explore this topic in more depth in sub‐
sequent years, and has continued to find evidence for the efficacy of this approach.
A branch-heavy approach is still common in open source development, often
through adopting the “GitFlow” development model. It’s worth noting that open
source development is not the same as normal day-to-day development. Open source
development is characterized by a large number of ad hoc contributions from time-
poor “untrusted” committers, whose changes require vetting by a smaller number of
“trusted” contributors. Typical day-to-day closed source development is normally
done by a tight-knit team whose members all have commit rights, even if they decide
to adopt some form of code review process. So what might work for open source
development may not work for your day job. Even then, the State of DevOps report
for 2019,2 further exploring this topic, found some interesting insights into open
source development and the impact of “long lived” branches:
Our research findings extend to open source development in some areas:
• Committing code sooner is better: In open source projects, many have
observed that merging patches faster to prevent rebases helps developers
move faster.
• Working in small batches is better: Large “patch bombs” are harder and
slower to merge into a project than smaller, more readable patchsets
since maintainers need more time to review the changes.
Whether you are working on a closed-source code base or an open source project,
short-lived branches; small, readable patches; and automatic testing of changes make
everyone more productive.
200 
| 
Chapter 7: Build
