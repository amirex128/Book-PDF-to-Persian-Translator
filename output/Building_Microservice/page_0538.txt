adopt the same patterns used in normal open source internally too, which means sep‐
arating out trusted committers (the core team) from untrusted committers (people
from outside the team submitting changes).
The core ownership team needs to have some way of vetting and approving changes.
It needs to make sure changes are idiomatically consistent—that is, that they follow
the general coding guidelines of the rest of the codebase. The people doing the vetting
are therefore going to have to spend time working with submitters to make sure each
change is of sufficient quality.
Good gatekeepers put a lot of work into this, communicating clearly with submitters
and encouraging good behavior. Bad gatekeepers can use this as an excuse to exert
power over others or have religious wars about arbitrary technical decisions. Having
seen both sets of behavior, I can tell you one thing is clear: either way takes time.
When considering allowing untrusted committers to submit changes to your code‐
base, you have to decide if the overhead of being a gatekeeper is worth the trouble:
could the core team be doing better things with the time it spends vetting patches?
Maturity
The less stable or mature a service is, the harder it will be to allow people outside the
core team to submit patches. Before the key spine of a service is in place, the team
may not know what “good” looks like and therefore may struggle to know what a
good submission looks like. During this stage, the service itself is undergoing a high
degree of change.
Most open source projects tend to not take submissions from a wider group of
untrusted committers until the core of the first version is done. Following a similar
model for your own organization makes sense. If a service is pretty mature and is
rarely changed—for example, our cart service—then perhaps that is the time to open
it up for other contributions.
Tooling
To best support an internal open source model, you’ll need some tooling in place.
The use of a distributed version control tool with the ability for people to submit pull
requests (or something similar) is important. Depending on the size of the organiza‐
tion, you may also need tooling to allow for a discussion and evolution of patch
requests; this may or may not mean a full-blown code review system, but the ability
to comment inline on patches is very useful. Finally, you’ll need to make it very easy
for a committer to build and deploy your software and make it available for others.
Typically this involves having well-defined build and deployment pipelines and cen‐
tralized artifact repositories. The more standardized your technology stack is, the eas‐
ier it will be for people in other teams to make edits and provide patches to a
microservice.
512 
| 
Chapter 15: Organizational Structures
