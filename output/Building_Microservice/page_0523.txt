7 John Rossman, Think Like Amazon: 50 1/2 Ideas to Become a Digital Leader (New York: McGraw-Hill, 2019).
8 Matthew Skelton and Manuel Pais, Team Topologies (Portland, OR: IT Revolution, 2019).
the fact it causes us to fall into the trap of thinking we can throw more people at the
problem to go faster. The theory goes like this: if a piece of work will take a developer
six months, then if we add a second developer, it will only take three months. If we
add five developers, so we now have six in total, the work should be done in just one
month! Of course, software doesn’t work like that.
For you to be able to throw more people (or teams) at a problem to go faster, the
work needs to be able to be split apart into tasks that can be worked on, to some
degree, in parallel. If one developer is doing some work that another developer is
waiting for, the work cannot be done in parallel, it must be done sequentially. Even if
the work can be done in parallel, there is often a need to coordinate between the peo‐
ple doing the different streams of work, resulting in additional overhead. The more
intertwined the work, the less effective it is to add more people.
If you cannot break the work apart into subtasks that can be worked on independ‐
ently, then you cannot just throw people at the problem. Worse, doing so will likely
make you slower—adding new people or spinning up new teams has a cost. Time is
needed to help these people be fully productive, and often the developers who have
too much work to do are the same developers who will need to spend time helping
get people up to speed.
The biggest cost to working efficiently at scale in software delivery is the need for
coordination. The more coordination between teams working on different tasks, the
slower you will be. Amazon, as a company, has recognized this, and structures itself
in a way to reduce the need for coordination between its small two-pizza teams. In
fact there has been a conscious drive to limit the amount of coordination between
teams for this very reason, and restrict this coordination, where possible, to areas
where it was absolutely required—between teams that share a boundary between
microservices. From Think Like Amazon,7 by ex-Amazon executive John Rossman:
The Two-Pizza Team is autonomous. Interaction with other teams is limited, and
when it does occur, it is well documented, and interfaces are clearly defined. It owns
and is responsible for every aspect of its systems. One of the primary goals is to lower
the communications overhead in organizations, including the number of meetings,
coordination points, planning, testing, or releases. Teams that are more independent
move faster.
Working out how a team fits into the larger organization is essential. Team Topolo‐
gies defines the concept of a team API, which defines broadly how that team interacts
with the rest of the organization, not just in terms of microservice interfaces but also
in terms of working practices:8
Small Teams, Large Organization 
| 
497
