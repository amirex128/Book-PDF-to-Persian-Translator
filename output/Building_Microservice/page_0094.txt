Figure 2-19. A service boundary split across technical seams
Layering Inside Versus Layering Outside
As I hope you can see by now, I’m not a fan of horizontally layered architecture.
Layering can have its place, though. Within a microservice boundary, it can be totally
sensible to delineate between different layers to make the code easier to manage. The
problem occurs when this layering becomes the mechanism by which your microser‐
vice and ownership boundaries are drawn.
Mixing Models and Exceptions
As I hope is clear so far, I am not dogmatic in terms of how you find these bound‐
aries. If you follow the guidelines of information hiding and appreciate the interplay
of coupling and cohesion, then chances are you’ll avoid some of the worst pitfalls of
whatever mechanism you pick. I happen to think that by focusing on these ideas you
are more likely to end up with a domain-oriented architecture, but that is by the by.
The fact is, though, that there can often be reasons to mix models, even if “domain-
oriented” is what you decide to pick as your main mechanism for defining microser‐
vice boundaries.
The different mechanisms we’ve outlined so far also have a lot of potential interplay
between them. Being too narrow in your choices here will cause you to follow the
dogma rather than doing the right thing. Volatility-based decomposition can make a
68 
| 
Chapter 2: How to Model Microservices
