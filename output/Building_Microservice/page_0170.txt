Handling Change Between Microservices
Probably the most common question I get about microservices, after “How big
should they be?” is “How do you handle versioning?” When this question gets asked,
it’s rarely a query regarding what sort of numbering scheme you should use and more
about how you handle changes in the contracts between microservices.
How you handle change really breaks down into two topics. In a moment, we’ll look
at what happens if you need to make a breaking change. But before that, let’s look at
what you can do to avoid making a breaking change in the first place.
Avoiding Breaking Changes
If you want to avoid making breaking changes, there are a few key ideas worth
exploring, many of which we already touched on at the start of the chapter. If you can
put these ideas into practice, you’ll find it much easier to allow for microservices to
be changed independently from one another.
Expansion changes
Add new things to a microservice interface; don’t remove old things.
Tolerant reader
When consuming a microservice interface, be flexible in what you expect.
Right technology
Pick technology that makes it easier to make backward-compatible changes to
the interface.
Explicit interface
Be explicit about what a microservice exposes. This makes things easier for the
client and easier for the maintainers of the microservice to understand what can
be changed freely.
Catch accidental breaking changes early
Have mechanisms in place to catch interface changes that will break consumers
in production before those changes are deployed.
These ideas do reinforce each other, and many build on that key concept of informa‐
tion hiding that we’ve discussed frequently. Let’s look at each idea in turn.
144 
| 
Chapter 5: Implementing Microservice Communication
