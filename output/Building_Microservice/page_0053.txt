Extreme solutions can involve “developing in the cloud,” where developers move
away from being able to develop locally anymore. I’m not a fan of this, because feed‐
back cycles can suffer greatly. Instead, I think limiting the scope of which parts of a
system a developer needs to work on is likely to be a much more straightforward
approach. However, this might be problematic if you want to embrace more of a “col‐
lective ownership” model in which any developer is expected to work on any part of
the system.
Technology Overload
The sheer weight of new technology that has sprung up to enable the adoption of
microservice architectures can be overwhelming. I’ll be honest and say that a lot of
this technology has just been rebranded as “microservice friendly,” but some advan‐
ces have legitimately helped in dealing with the complexity of these sorts of architec‐
tures. There is a danger, though, that this wealth of new toys can lead to a form of
technology fetishism. I’ve seen so many companies adopting microservice architec‐
ture who decided that it was also the best time to introduce vast arrays of new and
often alien technology.
Microservices may well give you the option for each microservice to be written in a
different programming language, to run on a different runtime, or to use a different
database—but these are options, not requirements. You have to carefully balance the
breadth and complexity of the technology you use against the costs that a diverse
array of technology can bring.
When you start adopting microservices, some fundamental challenges are inescapa‐
ble: you’ll need to spend a lot of time understanding issues around data consistency,
latency, service modeling, and the like. If you’re trying to understand how these ideas
change the way you think about software development at the same time that you’re
embracing a huge amount of new technology, you’ll have a hard time of it. It’s also
worth pointing out that the bandwidth taken up by trying to understand all of this
new technology will reduce the time you have for actually shipping features to your
users.
As you (gradually) increase the complexity of your microservice architecture, look to
introduce new technology as you need it. You don’t need a Kubernetes cluster when
you have three services! In addition to ensuring that you’re not overloaded with the
complexity of these new tools, this gradual increase has the added benefit of allowing
you to gain new and better ways of doing things that will no doubt emerge over time.
Microservice Pain Points 
| 
27
