software that directly impacts the customer experience and have customer-oriented
key performance indicators (KPIs)—the success of a given team is driven less by how
many features it has shipped and more by helping to improve the experience of the
people using the software. It becomes very clear as to how a change can impact cus‐
tomers. This is only possible due to the fact that the majority of the teams have direct,
customer-facing responsibilities in terms of the software they deliver. When you are
more removed from the end user, it becomes harder to understand whether your
contributions are successful, and you can end up focusing on goals that are a long
way removed from things the people using your software care about.
Let’s revisit the reasons why dedicated frontend teams exist—specialists, consistency,
and technical challenges—and now let’s look at how these issues can be addressed.
Sharing Specialists
Good developers can be hard to find, and finding them is further complicated when
you need developers with a certain specialty. In the area of user interfaces, for exam‐
ple, if you are providing native mobile as well as web interfaces, you could find your‐
self needing people who are experienced with iOS and Android as well as with
modern web development. This is quite aside from the fact that you may want dedi‐
cated interaction designers, graphic designers, accessibility experts, and the like. Peo‐
ple with the right depth of skills for these more “narrow” fields may be thin on the
ground, and they may always have more work than there is time for.
As we’ve touched on previously, the traditional approach to organizational structures
would have you putting all the people who possess the same skill set in the same
team, allowing you to tightly control what they work on. But as we’ve also discussed,
this leads to siloed organizations.
Putting people with specialized skills in their own dedicated team also deprives you
of opportunities for other developers to pick up these in-demand skills. You don’t
need every developer to learn to become an expert iOS developer, for example, but it
can still be useful for some of your developers to learn enough skills in that area to
help out with the easy stuff, leaving your specialists free to tackle the really hard tasks.
Skill sharing can also be helped by establishing communities of practice—you might
consider having a UI community that cuts across your teams, enabling people to
share ideas and challenges with their peers.
I remember when all database changes had to be done by a central pool of database
administrators (DBAs). Developers had little awareness of how databases worked as a
result, and would more frequently create software that used the database poorly. Fur‐
thermore, much of the work the experienced DBAs were being asked to do consisted
of trivial changes. As more database work got pulled into delivery teams, developers
in general got a better appreciation for databases and could start doing the trivial
work themselves, freeing up the valuable DBAs to focus on more complex database
460 
| 
Chapter 14: User Interfaces
