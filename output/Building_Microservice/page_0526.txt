Strong Ownership
With strong ownership, the team owning the microservice calls the shots. At the
most basic level, it is in full control of what code changes are made. Taken further,
the team may be able to decide on coding standards, programming idioms, when to
deploy the software, what technology is used to build the microservice, the deploy‐
ment platform, and more. By having more responsibility for the changes that happen
to the software, teams with strong ownership will have a higher degree of autonomy,
with all the benefits that entails.
Strong ownership is ultimately all about optimizing for that team’s autonomy. Com‐
ing back to the Amazon way of doing things from Think Like Amazon:
When it comes to Amazon’s famous Two-Pizza Teams, most people miss the point.
It’s not about the team’s size. It’s about the team’s autonomy, accountability, and
entrepreneurial mindset. The Two-Pizza Team is about equipping a small team within
an organization to operate independently and with agility.
Strong ownership models can allow for more local variation. You may be relaxed, for
example, about one team deciding to create its microservice in a functional style of
Java, as that is a decision that should only impact them. Of course, this variation does
need to be tempered somewhat, as some decisions warrant a degree of consistency
around them. For example, if everyone else makes use of REST-over-HTTP-based
APIs for their microservice endpoints but you decide to use GRPC, you may be caus‐
ing some issues for other people who want to make use of your microservice. On the
other hand, if that GRPC endpoint was only used internally within your team, this
might not be problematic. So when making decisions locally that have impact on
other teams, coordination may still be needed. Working out when and how to engage
a wider organization is something we’ll explore shortly when we look at balancing
local versus global optimization.
Fundamentally, the stronger the ownership model a team can adopt, the less coordi‐
nation is needed, and therefore the more productive the team can be.
How far does strong ownership go?
Up until this stage, we’ve talked primarily about aspects like making code changes or
choosing technology. But the concept of ownership can go much deeper. Some
organizations adopt a model that I describe as full life-cycle ownership. With full life-
cycle ownership, a single team comes up with the design, makes the changes, deploys
the microservice, manages it in production, and ultimately decommissions the
microservice when it is no longer required.
This full life-cycle ownership model further increases the autonomy the team has, as
the requirements for external coordination are reduced. Tickets aren’t raised with
500 
| 
Chapter 15: Organizational Structures
