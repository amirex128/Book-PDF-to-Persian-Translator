of aid—firstly, it shares its expertise in delivering already-built components, and sec‐
ondly, it helps ensure that the UIs deliver a consistent user experience.
It’s worth noting, however, that the driver for consistency shouldn’t be considered
universally right. Some organizations make seemingly conscious decisions to not
require consistency in their user interfaces, because they feel that allowing for more
autonomy of teams is preferable. Amazon is one such organization. Earlier versions
of its main shopping site had large degrees of inconsistency, with widgets using quite
different styles of controls.
This is shown to an even greater degree when you look at the web control panel for
Amazon Web Services (AWS). Different products in AWS have massively different
interaction models, making the user interface quite bewildering. This, however,
seems to be a logical extension of Amazon’s drive to reduce internal coordination
between teams.
The increased autonomy of product teams in AWS appears to manifest itself in other
ways as well, not just in terms of an often disjointed user experience. There fre‐
quently are multiple different ways to achieve the same task (by running a container
workload, for example), with different product teams inside AWS often overlapping
with one another with similar but incompatible solutions. You might criticize the end
result, but AWS has shown that by having these highly autonomous product-oriented
teams, it has created a company that has a clear market lead. Speed of delivery trumps
a consistency of user experience, at least as far as AWS is concerned.
Working Through Technical Challenges
We’ve gone through some interesting evolutions when it comes to the development
of user interfaces—from green-screen terminal-based textual user interfaces to rich
desktop applications, the web, and now native mobile experiences. In many ways, we
have gone full circle and then some—our client applications are now built with such
complexity and sophistication that they absolutely rival the complexity of the rich
desktop applications that were the mainstay of user interface development well into
the first decade of the twenty-first century.
To some degree, the more things change, the more they stay the same. We often are
still working with the same UI controls as 20 years ago—buttons, checkboxes, forms,
combo boxes, and the like. We’ve added a few more components to this space, but far
fewer than you might think. What has changed is the technology we use to create
these graphical user interfaces in the first place.
Some newer technology in this space, specifically single-page applications, cause us
issues when it comes to decomposing a user interface. In addition, the wider variety
of devices on which we expect the same user interface to be delivered cause other
problems that need to be solved.
462 
| 
Chapter 14: User Interfaces
