and forwards this log to some sort of store that can be queried by operators. One of
the nice aspects of these systems is that your microservice architecture can be largely
unaware of them. You don’t need to change your code to use some sort of special
API; you just log to a local filesystem. You do need to understand the failure modes
around this log shipping process, though, especially if you want to understand the sit‐
uations logs can get lost in.
Figure 10-4. An overview of how logs are collected as part of log aggregation
Now, I hope you’ve perceived that I try to avoid being dogmatic about things. Rather
than just saying you must do X or Y, I’ve tried to give you context and guidance and
explain the nuances of certain decisions—that is, I’ve tried to give you the tools to
make the right choice for your context. But on the subject of log aggregation, I’ll
come as close I get to giving one-size-fits-all advice: you should view implementing a
log aggregation tool as a prerequisite for implementing a microservice architecture.
My reasons for this point of view are twofold. Firstly, log aggregation is incredibly
useful. For those of you who treat your logfiles as a dumping ground for misinforma‐
tion, this will come as a surprise. But trust me—when done right, log aggregation can
be incredibly valuable, especially when used with another concept we’ll cover shortly,
correlation IDs.
Secondly, implementing a log aggregation, when compared to the other sources of
pain and suffering that a microservice architecture can bring, isn’t that difficult. If
your organization is unable to successfully implement a simple log aggregation solu‐
tion, it will likely find the other aspects of a microservice architecture too much to
handle. So consider using implementation of such a solution as a way of testing your
organization’s readiness for the rest of the horror that will follow.
Building Blocks for Observability 
| 
313
