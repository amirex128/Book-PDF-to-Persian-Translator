follows: “An architectural style where independently deliverable frontend applica‐
tions are composed into a greater whole.”
It becomes an essential pattern for stream-aligned teams who want to own delivery of
both backend microservices and the supporting UI. Where microservices deliver
independent deployability for the backend functionality, micro frontends deliver
independent deployability for the frontend.
The micro frontend concept has gained popularity due to the challenges created by
monolithic, JavaScript-heavy web UIs, as typified by single-page applications. With a
micro frontend, different teams can work on and make changes to different parts of
the frontend. Coming back to Figure 14-2, the stock team, purchase flow team, and
customer profile team are each able to change the frontend functionality associated
with their stream of work independent of the other teams.
Implementation
For web-based frontends, we can consider two key decompositional techniques that
can aid implementation of the micro frontend pattern. Widget-based decomposition
involves splicing different parts of a frontend together into a single screen. Page-
based decomposition, on the other hand, has the frontend split apart into independ‐
ent web pages. Both approaches are worthy of further exploration, which we’ll get to
shortly.
When to Use It
The micro frontend pattern is essential if you want to adopt end-to-end, stream-
aligned teams where you are trying to move away from a layered architecture. I could
also imagine it being useful in a situation in which you want to retain a layered archi‐
tecture, but the functionality of the frontend is now so large that multiple dedicated
frontend teams are required.
There is one key problem with this approach that I’m not sure can be solved. Some‐
times the capabilities offered by a microservice do not fit neatly into a widget or a
page. Sure, I might want to surface recommendations in a box on a page on our web‐
site, but what if I want to weave in dynamic recommendations elsewhere? When I
search, I want the type ahead to automatically trigger fresh recommendations, for
example. The more cross-cutting a form of interaction is, the less likely this model
will fit, and the more likely it is that we’ll fall back to just making API calls.
Pattern: Micro Frontends 
| 
465
