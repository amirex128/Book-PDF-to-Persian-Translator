5 In my book Monolith to Microservices (O’Reilly) I attributed this to Larry Constantine himself. While the
statement neatly sums up much of Constantine’s work in this space, the quote should really be attributed to
Albert Endres and Dieter Rombach, from their 2003 book A Handbook of Software and Systems Engineering
(Addison-Wesley).
The Interplay of Coupling and Cohesion
As we’ve already touched on, the concepts of coupling and cohesion are obviously
related. Logically, if related functionality is spread across our system, changes to this
functionality will ripple across those boundaries, implying tighter coupling. Constan‐
tine’s law, named for structured design pioneer Larry Constantine, sums this up
neatly:
A structure is stable if cohesion is strong and coupling is low.5
The concept here of stability is important to us. For our microservice boundaries to
deliver on the promise of independent deployability, allowing us to work on micro‐
services in parallel and reduce the amount of coordination between teams working
on these services, we need some degree of stability in the boundaries themselves. If
the contract that a microservice exposes is constantly changing in a backward-
incompatible fashion, then this will cause upstream consumers to constantly have to
change too.
Coupling and cohesion are strongly related and, at some level at least, are arguably
the same in that both concepts describe the relationship between things. Cohesion
applies to the relationship between things inside a boundary (a microservice in our
context), whereas coupling describes the relationship between things across a bound‐
ary. There is no absolute best way to organize our code; coupling and cohesion are
just one way to articulate the various trade-offs we make around where we group
code, and why. All we can strive to do is to find the right balance between these two
ideas, one that makes the most sense for your given context and the problems you are
currently facing.
Remember, the world isn’t static—it’s possible that as your system requirements
change, you’ll find reasons to revisit your decisions. Sometimes parts of your system
may be going through so much change that stability might be impossible. We’ll look
at an example of this in Chapter 3 when I share the experiences of the product devel‐
opment team behind Snap CI.
Types of Coupling
You could infer from the preceding overview above that all coupling is bad. That isn’t
strictly true. Ultimately, some coupling in our system will be unavoidable. What we
want to do is reduce how much coupling we have.
Types of Coupling 
| 
39
