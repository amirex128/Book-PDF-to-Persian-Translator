Don’t share databases unless you really need to. And even then do
everything you can to avoid it. In my opinion, sharing databases is
one of the worst things you can do if you’re trying to achieve inde‐
pendent deployability.
As discussed in the previous section, we want to think of our services as end-to-end
slices of business functionality that, where appropriate, encapsulate user interface
(UI), business logic, and data. This is because we want to reduce the effort needed to
change business-related functionality. The encapsulation of data and behavior in this
way gives us high cohesion of business functionality. By hiding the database that
backs our service, we also ensure that we reduce coupling. We come back to coupling
and cohesion in Chapter 2.
Size
“How big should a microservice be?” is one of the most common questions I hear.
Considering the word “micro” is right there in the name, this comes as no surprise.
However, when you get into what makes microservices work as a type of architecture,
the concept of size is actually one of the least interesting aspects.
How do you measure size? By counting lines of code? That doesn’t make much sense
to me. Something that might require 25 lines of code in Java could be written in 10
lines of Clojure. That’s not to say Clojure is better or worse than Java; some languages
are simply more expressive than others.
James Lewis, technical director at Thoughtworks, has been known to say that “a
microservice should be as big as my head.” At first glance, this doesn’t seem terribly
helpful. After all, how big is James’s head exactly? The rationale behind this statement
is that a microservice should be kept to the size at which it can be easily understood.
The challenge, of course, is that different people’s ability to understand something
isn’t always the same, and as such you’ll need to make your own judgment regarding
what size works for you. An experienced team may be able to better manage a larger
codebase than another team could. So perhaps it would be better to read James’s
quote here as “a microservice should be as big as your head.”
I think the closest I get to “size” having any meaning in terms of microservices is
something that Chris Richardson, the author of Microservice Patterns (Manning Pub‐
lications), once said—the goal of microservices is to have “as small an interface as
possible.” That aligns with the concept of information hiding again, but it does repre‐
sent an attempt to find meaning in the term “microservices” that wasn’t there
initially. When the term was first used to define these architectures, the focus, at least
initially, was not specifically on the size of the interfaces.
Ultimately, the concept of size is highly contextual. Speak to a person who has
worked on a system for 15 years, and they’ll feel that their system with 100,000 lines
Key Concepts of Microservices 
| 
9
