paved road—you’ll end up doing a lot of the right things without having to expend
much effort.
On the other hand, I see some organizations try to govern via the platform. Rather
than clearly articulate what needs to be done and why, instead they simply say “you
must use this platform.” The problem with this is that if the platform isn’t easy to use
or doesn’t suit a particular use case, people will find ways to bypass the platform
itself. When teams work outside the platform, they have no clear sense of what
restrictions are important to the organization and will find themselves doing the
“wrong” thing without realizing it.
Shared Microservices
As I’ve already discussed, I’m a big proponent of strong ownership models for micro‐
services. In general, one microservice should be owned by a single team. Despite that,
I still find it common for microservices to be owned by multiple teams. Why is this?
And what can (or should) you do about it? The drivers that cause people to have
microservices shared by multiple teams are important to understand, especially as we
may be able to find some compelling alternative models that can address people’s
underlying concerns.
Too Hard to Split
Obviously, one of the reasons you may find yourself with a microservice owned by
more than one team is that the cost of splitting the microservice into pieces that can
be owned by different teams is too high, or perhaps your organization might not see
the point of it. This is a common occurrence with large, monolithic systems. If this is
the main challenge you face, then I hope some of the advice given in Chapter 3 will be
of use. You could also consider merging teams to align more closely with the archi‐
tecture itself.
FinanceCo, a FinTech company that we previously met in “Toward Stream-Aligned
Teams” on page 459, largely operate a strong ownership model with a high degree of
team autonomy. However, it still has an existing monolithic system that was slowly
being split apart. That monolithic application was to all intents and purposes shared
by multiple teams, and the increased cost of working in this shared codebase was
obvious.
Cross-Cutting Changes
Much of what we’ve discussed so far in this book regarding the interplay of organiza‐
tional structure and architecture is aimed toward reducing the need for coordination
between teams. Most of this is about trying to reduce cross-cutting changes as much
Shared Microservices 
| 
509
