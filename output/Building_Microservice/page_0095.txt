17 Vaughn Vernon, Implementing Domain-Driven Design (Upper Saddle River, NJ: Addison-Wesley, 2013).
18 Vaughn Vernon, Domain-Driven Design Distilled (Boston: Addison-Wesley, 2016).
lot of sense if your focus is on improving the speed of delivery, but if this causes you
to extract a service that crosses organizational boundaries, then expect your pace of
change to suffer due to delivery contention.
I might define a nice Warehouse service based on my understanding of the business
domain, but if one part of that system needs to be implemented in C++ and another
part in Kotlin, then you’ll have to decompose further along those technical lines.
Organizational and domain-driven service boundaries are my own starting point. But
that’s just my default approach. Typically, a number of the factors I’ve outlined here
come into play, and which ones influence your own decisions will be based on the
problems you are trying to solve. You need to look at your own specific circumstan‐
ces to determine what works best for you—and hopefully I’ve given you a few differ‐
ent options to consider. Just remember, if someone says “The only way to do this is
X!” they are likely just selling you more dogma. You can do better than that.
With all that said, let’s dive deeper into the topic of domain modeling by exploring
domain-driven design in a little more detail.
Summary
In this chapter, you’ve learned a bit about what makes a good microservice boundary,
and how to find seams in our problem space that give us the dual benefits of both low
coupling and strong cohesion. Having a detailed understanding of our domain can be
a vital tool in helping us find these seams, and by aligning our microservices to these
boundaries we ensure that the resulting system has every chance of keeping those vir‐
tues intact. We’ve also gotten a hint about how we can subdivide our microservices
further.
The ideas presented in Eric Evans’s Domain-Driven Design are very useful to us in
finding sensible boundaries for our services, and I’ve just scratched the surface here—
Eric’s book goes into much more detail. If you want to go deeper, I can recommend
Vaughn Vernon’s book Implementing Domain-Driven Design17 to help you under‐
stand the practicalities of this approach, while Vernon’s Domain-Driven Design Dis‐
tilled18 is a great condensed overview if you’re looking for something more brief.
Much of this chapter has described how we’d find the boundary for our microservi‐
ces. But what happens if you already have a monolithic application and are looking to
migrate toward a microservice architecture? That’s something we’ll explore in more
detail in the next chapter.
Summary 
| 
69
