create, we have to accept that once the software gets into the hands of our users, we
will have to react and adapt rather than expect a never-changing artifact. Thus, soft‐
ware architects need to shift their thinking away from creating the perfect end prod‐
uct and focus instead on helping create a framework in which the right systems can
emerge and continue to grow as we learn more.
Although I have spent much of the chapter discouraging comparisons to other pro‐
fessions, there is an analogy that I like when it comes to the role of the IT architect
and that I think encapsulates this aspect of the role well. Erik Doernenburg at
Thoughtworks first shared with me the idea that we should think of the architect’s
role more as town planner than architect of the built environment. The role of the
town planner should be familiar to any of you who have played SimCity or Cities:
Skylines before. A town planner’s role is to look at a multitude of sources of informa‐
tion and then attempt to optimize the layout of a city to best suit the needs of
present-day citizens, while also taking into account future use. The way they influ‐
ence how the city evolves, though, is interesting. They do not say, “Build this specific
building there”; instead, they define zones that allow for local decision making within
certain constraints. So, as in SimCity, you might designate part of your city as an
industrial zone, and another part as a residential zone. It is then up to other people to
decide what buildings get created, but there are restrictions: if you want to build a
factory, it will need to be in an industrial zone. Rather than worrying too much about
what happens in one zone, the town planner will instead spend far more time work‐
ing out how people and utilities move from one zone to another.
More than one person has likened a city to a living creature. The city changes over
time. It shifts and evolves as its occupants use it in different ways, or as external
forces shape it. The town planner does their best to anticipate these changes but
accepts that trying to exert direct control over all aspects of what happens is futile. So
our architects as town planners need to set direction in broad strokes and get
involved in being highly specific about implementation detail only in limited cases.
They need to ensure that the system is fit for purpose now but also a platform for the
future.
The comparison with software should be obvious. As our users use our software, we
need to react and change. We cannot foresee everything that will happen, and so
rather than plan for each and every eventuality, we should plan to allow for change by
avoiding the urge to overspecify every last thing. Our city—the system—needs to be a
good, happy place for everyone who uses it.
Defining System Boundaries
To continue with the metaphor of the architect as town planner for a moment, what
are our zones? These are our microservice boundaries, or perhaps coarse-grained
groups of microservices. As architects, we need to worry much less about what
530 
| 
Chapter 16: The Evolutionary Architect
