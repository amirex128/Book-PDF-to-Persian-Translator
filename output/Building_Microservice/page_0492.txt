Self-Contained Systems
A self-contained system (SCS) is a style of architecture that arose, arguably, out of the
lack of focus on UI concerns during the early years of microservices. An SCS could
consist of multiple moving parts (potentially microservices) that when taken together
constitute a single SCS.
As defined, a self-contained system has to comply with some specific criteria that we
can see overlap with some of the same things we are trying to achieve with microser‐
vices. You can find more information about self-contained systems on the very clear
SCS website, but here are some highlights:
• Each SCS is an autonomous web application with no shared UI.
• Each SCS is owned by one team.
• Async communication should be used whenever possible.
• No business code can be shared between SCSs.
The SCS approach hasn’t caught on to the same extent as microservices, and it’s not a
concept I encounter much, despite the fact that I agree with many of the principles it
outlines. I especially like calling out that a self-contained system should be owned by
one team. I do wonder if this lack of wider use explains why some aspects of the SCS
approach seem overly narrow and prescriptive. For example, the insistence on each
SCS being an “autonomous web application” implies that many types of user inter‐
face couldn’t ever be considered an SCS. Does that mean the native iOS application
I’ve built that uses gRPC can be part of an SCS or not?
So is the SCS approach in conflict with microservices? Not really. I’ve worked on
many microservices that, when considered in isolation would fit the definition of an
SCS all by themselves. There are some interesting ideas in the SCS approach that I
agree with, and many of them we’ve already covered in this book. I just find the
approach to be overly prescriptive, to the extent that someone interested in SCSs
might find adopting the approach to be incredibly challenging, as it might require
wholesale changes to so many aspects of their software delivery.
I do worry that manifestos like the SCS concept can guide us down the path of focus‐
ing too much on activity, rather than on principles and outcomes. You could follow
every SCS characteristic and still potentially miss the point. On reflection, I feel that
the SCS approach is a tech-focused approach to promote an organizational concept.
As such, I’d rather focus on the importance of stream-aligned teams with reduced
coordination, and let the technology and architecture flow from that.
466 
| 
Chapter 14: User Interfaces
