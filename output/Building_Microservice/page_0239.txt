project—although this of course will cause me to have a more complex build
mapping.
Defining ownership
With smaller team sizes and small codebase sizes, monorepos can likely work well
with the traditional build and source code management tools that you are used to.
However, as your monorepo gets bigger, you’ll likely need to start looking at different
types of tools. We’ll explore ownership models in more detail in Chapter 15, but in
the meantime it’s worth exploring briefly how this plays out when we think about
source control.
Martin Fowler has previously written about different ownership models, outlining a
sliding scale of ownership from strong ownership through weak ownership and on to
collective ownership. Since Martin captured those terms, development practices have
changed, so it’s perhaps worth revisiting and redefining these terms.
With strong ownership, some code is owned by a specific group of people. If some‐
one from outside that group wants to make a change, they have to ask the owners to
make the change for them. Weak ownership still has the concept of defined owners,
but people outside the ownership group are allowed to make changes, although any
of these changes must be reviewed and accepted by someone in the ownership group.
This would cover a pull request being sent to the core ownership team for review,
before the pull request is merged. With collective ownership, any developer can
change any piece of code.
With a small number of developers (20 or fewer, as a general guide), you can afford
to practice collective ownership—where any developer can change any other micro‐
service. As you have more people, though, you’re more likely to want to move toward
either a strong or weak ownership model to create more defined boundaries of
responsibility. This can cause a challenge for teams using monorepos if their source
control tool doesn’t support finer-grained ownership controls.
Some source code tools allow you to specify ownership of specific directories or even
specific filepaths inside a single repository. Google initially implemented this system
on top of Perforce for its own monorepo before developing its own source control
system, and it’s also something that GitHub has supported since 2016. With GitHub,
you create a CODEOWNERS file, which lets you map owners to directories or filepaths.
You can see some examples in Example 7-1, drawn from GitHub’s own documenta‐
tion, that show the kinds of flexibility these systems can bring.
Mapping Source Code and Builds to Microservices 
| 
213
