1 David, Parnas, “On the Criteria to Be Used in Decomposing Systems into Modules,” (journal contribution,
Carnegie Mellon University, 1971), https://oreil.ly/BnVVg.
doorsteps. Quality over convenience, right? And while it may have just learned that
Spotify is in fact a digital music service rather than some sort of skin treatment for
teenagers, MusicCorp is pretty happy with its own focus and is sure all of this stream‐
ing business will blow over soon.
Despite being a little behind the curve, MusicCorp has grand ambitions. Luckily, it
has decided that its best chance of taking over the world is to make sure it can make
changes as easily as possible. Microservices for the win!
What Makes a Good Microservice Boundary?
Before the team from MusicCorp tears off into the distance, creating service after ser‐
vice in an attempt to deliver eight-track tapes to all and sundry, let’s put the brakes
on and talk a bit about the most important underlying idea we need to keep in mind.
We want our microservices to be able to be changed and deployed, and their func‐
tionality released to our users, in an independent fashion. The ability to change one
microservice in isolation from another is vital. So what things do we need to bear in
mind when we think about how we draw the boundaries around them?
In essence, microservices are just another form of modular decomposition, albeit one
that has network-based interaction between the models and all the associated chal‐
lenges that brings. Luckily, this means we can rely on a lot of prior art in the space of
modular software and structured programming to help guide us in terms of working
out how to define our boundaries. With that in mind, let’s look more deeply at three
key concepts that we touched on briefly in Chapter 1 and that are vital to grasp when
it comes to working out what makes for a good microservice boundary—information
hiding, cohesion, and coupling.
Information Hiding
Information hiding is a concept developed by David Parnas to look at the most effec‐
tive way to define module boundaries.1 Information hiding describes a desire to hide
as many details as possible behind a module (or, in our case, microservice) boundary.
Parnas looked at the benefits that modules should theoretically give us, namely:
Improved development time
By allowing modules to be developed independently, we can allow for more work
to be done in parallel and reduce the impact of adding more developers to a
project.
36 
| 
Chapter 2: How to Model Microservices
