CHAPTER 12
Resiliency
As software becomes an increasingly vital part of our users’ lives, we need to continu‐
ally improve the quality of service we offer. Software failing can have a significant
impact on people’s lives, even if the software doesn’t fall into the category of “safety
critical” in the way that things like aircraft control systems do. During the COVID-19
pandemic, which was ongoing at the time of writing, services like online grocery
shopping went from being a convenience to becoming a necessity for many people
who were unable to leave their homes.
Against this backdrop, we are often being tasked with creating software that is more
and more reliable. The expectations of our users have shifted in terms of what the
software can do and when it should be available. The days of only having to support
software during office hours are increasingly rare, and there is decreasing tolerance
for downtime due to maintenance.
As we covered at the start of this book, there is a host of reasons as to why microser‐
vice architectures are being chosen by organizations around the world. But for many,
the prospects of improving the resilience of their service offerings is cited as a major
reason.
Before we get into the details of how a microservice architecture can enable resil‐
iency, it’s important to step back and consider what resiliency actually is. It turns out
that when it comes to improving the resiliency of our software, adopting a microser‐
vice architecture is only part of the puzzle.
What Is Resiliency?
We use the term resiliency in many different contexts and in many different ways.
This can lead to confusion about what the term means and can also result in us
thinking too narrowly about the field. Outside the confines of IT, there is a broader
387
