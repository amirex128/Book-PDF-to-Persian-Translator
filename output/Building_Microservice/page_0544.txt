15 Maaret Pyhäjärvi, Ensemble Programming Guidebook (self-pub., 2015–2020), https://ensembleprogram
ming.xyz.
Personally, I have some deep reservations around some aspects of ensemble pro‐
gramming. You’ll find your team is in fact a neurodiverse bunch, and power imbal‐
ances in the ensemble can further undermine the goal of collective problem solving.
Not everyone is comfortable working in a group, and an ensemble is definitely that.
Some people will thrive in such an environment, while others will feel totally unable
to contribute. When I’ve raised this issue with some proponents of ensemble pro‐
gramming, I’ve gotten a variety of responses, many of which boil down to the belief
that if you create the right ensemble environment, anyone will be able to “come out
of their shell and contribute.” Let’s just say that after that particular set of conversa‐
tions, I rolled my eyes so much I nearly went blind. To be fair, these same concerns
can be raised about pair programming as well!
While I have no doubt that many ensemble programming proponents won’t be as
unaware or tone-deaf as this, it’s important to remember that creating an inclusive
workspace is in part about understanding how to create an environment in which all
members of the team are able to fully contribute in a way that is safe and comfortable
for them. And don’t kid yourself that just because you’ve got everyone in a room
everyone is actually contributing. If you’d like some concrete tips on ensemble pro‐
gramming, then I’d suggest reading Maaret Pyhäjärvi’s self-published and concise
Ensemble Programming Guidebook.15
The Orphaned Service
So what about services that are no longer being actively maintained? As we move
toward finer-grained architectures, the microservices themselves become smaller.
One of the advantages of smaller microservices, as we have discussed, is the fact that
they are simpler. Simpler microservices with less functionality may not need to
change for a while. Consider the humble Shopping Basket microservice, which pro‐
vides some fairly modest capabilities: Add to Basket, Remove from Basket, and so on.
It is quite conceivable that this microservice may not have to change for months after
first being written, even if active development is still going on. What happens here?
Who owns this microservice?
If your team structures are aligned along the bounded contexts of your organization,
then even services that are not changed frequently still have a de facto owner. Imag‐
ine a team that is aligned with the consumer web sales context. It might handle the
web-based user interface and the Shopping Basket and Recommendation microservi‐
ces. Even if the cart service hasn’t been changed in months, it would naturally fall to
this team to make changes if required. One of the benefits of microservices, of course,
518 
| 
Chapter 15: Organizational Structures
