more productive. As we’ll discuss more in Chapter 16, don’t let the fear of lock-in
keep you trapped in a mess of your own making.
Found an awesome PaaS like Heroku or Zeit, and have an application that fits the
constraints of the platform? Push all the work to the platform and spend more time
working on your product. Both Heroku and Zeit are pretty fantastic platforms with
awesome usability from a developer point of view. Don’t your developers deserve to
be happy after all?
For the rest of you, containerization is the way to go, which means we need to talk
about Kubernetes.
Role for Puppet, Chef, and Other Tools?
This chapter has changed significantly since the first edition. This is due in part to the
industry as a whole evolving, but also to new technology that has become increasingly
useful. The emergence of new technology has also led to a diminished role for other
technology—and so we see tools like Puppet, Chef, Ansible, and Salt playing a much
smaller role in deploying microservice architectures than we did back in 2014.
The main reason for this is fundamentally the rise of the container. The power of
tools like Puppet and Chef is that they give you a way to bring a machine to a desired
state, with that desired state defined in some code form. You can define what run‐
times you need, where configuration files need to be, etc., in a way that can determin‐
istically be run time and again on the same machine, ensuring it can always be
brought to the same state.
The way most people build up a container is by defining a Dockerfile. This allows you
to define the same requirements as you would with Puppet or Chef, with some differ‐
ences. A container is blown away when redeployed, so each container creation is
done from scratch (I’m simplifying somewhat here). This means that a lot of the
complexity inherent in Puppet and Chef to handle those tools being run over and
over on the same machines isn’t needed.
Puppet, Chef, and similar tools are still incredibly useful, but their role has now been
pushed out of the container and further down the stack. People use tools like these for
managing legacy applications and infrastructure, or for building up the clusters that
container workloads now run on. But developers are even less likely to come into
contact with these tools than they were in the past.
The concept of infrastructure as code is still vitally important. It’s just that the type of
tools developers are likely to use has changed. For those working with the cloud, for
example, things like Terraform can be very useful for provisioning cloud infrastruc‐
ture. Recently, I’ve become a big fan of Pulumi, which eschews the use of domain-
specific languages (DSLs) in favor of using normal programming languages to help
developers manage their cloud infrastructure. I see big things ahead for Pulumi as
delivery teams take more and more ownership of the operational world, and I suspect
258 
| 
Chapter 8: Deployment
