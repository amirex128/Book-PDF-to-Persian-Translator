7 Neal Ford, Rebecca Parsons, and Patrick Kua, Building Evolutionary Architectures (Sebastopol: O’Reilly,
2017).
Guiding an Evolutionary Architecture
So if our architecture is not static but is ever-changing and evolving, how do we make
sure it is growing and changing in the way we want, rather than just mutating into
some unmanageable giant blob of pain, suffering, and recriminations? In Building
Evolutionary Architectures,7 the authors outline fitness functions to help collect infor‐
mation about the relative “fitness” of the architecture in order to help architects
decide if they need to take action. From the book:
Evolutionary computing includes a number of mechanisms that allow a solution to
gradually emerge via small changes in each generation of the software. At each genera‐
tion of the solution, the engineer assesses the current state: Is it closer to or further
away from the ultimate goal? For example, when using a genetic algorithm to optimize
wing design, the fitness function assess[es] wind resistance, weight, air flow, and other
characteristics desirable to good wing design. Architects define a fitness function to
explain what better is and to help measure when the goal is met. In software, fitness
functions check that developers preserve important architectural characteristics.
The idea of a fitness function is that it is used to understand the current state of some
important property, such that if that property changes outside of some allowable
bounds, then the change needs to be looked into. Typically, fitness functions will be
used to ensure that the architecture is being built to follow the principles and con‐
straints that have been laid down.
To borrow an example from Building Evolutionary Architectures, consider the
requirement that the response from a given service must be received in 100 ms or
less. You could implement a fitness function to collect performance data from this
service, perhaps either in a performance test environment or from a real-world run‐
ning system to ensure that the actual behavior of the system meets the requirements.
Building Evolutionary Architectures goes into a lot more detail on this topic, and I
thoroughly recommend it if you want to explore this concept further.
Fitness functions for architecture can come in many shapes and forms. The funda‐
mental concept, though, is that you collect real-world data to understand whether or
not your architecture is achieving “fitness” against that criteria. This could relate to
system performance, code coupling, cycle time, or a host of other aspects. These fit‐
ness functions act as another source of information to help an architect understand
where they might need to get involved. Please note, however, that for me, fitness
functions work best when combined with close collaboration with the people build‐
ing the system. Fitness functions should be a useful way to help you understand if the
architecture is moving in the right direction, but they don’t replace the need to
Guiding an Evolutionary Architecture 
| 
539
