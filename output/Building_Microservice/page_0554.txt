So, a better definition would be “In most successful software projects, the expert devel‐
opers working on that project have a shared understanding of the system design. This
shared understanding is called ‘architecture.’ This understanding includes how the sys‐
tem is divided into components and how the components interact through interfaces.
These components are usually composed of smaller components, but the architecture
only includes the components and interfaces that are understood by all the
developers.”
This would be a better definition because it makes clear that architecture is a social
construct (well, software is too, but architecture is even more so) because it doesn’t just
depend on the software, but on what part of the software is considered important by
group consensus.
Here Ralph is using the term components in its most general sense. In the context of
this book, we can think of the components as our microservices, and perhaps the
modules inside those microservices.
Software architecture is the shape of the system. Architecture happens, by design or
accident. We make a series of ad hoc decisions, and we end up with the results—
without thinking about things in terms of architecture, we end up with architecture
nonetheless. Architecture can sometimes be what happens while we’re busy making
other plans.
A dedicated architect is someone who should see and understand that whole system,
understand the forces acting on it. They need to ensure there is a vision for the archi‐
tecture that is fit for purpose and is clearly understood—an architectural vision that
satisfies the needs of the system and its users, as well as those of the people who work
on the system itself. Looking at only one facet—e.g., logical but not physical, shape
but not developer experience—limits an architect’s effectiveness. If you accept that
architecture is about understanding the system, then limiting the scope of what you
care about limits your ability to reason and make changes.
Architecture can be invisible to the people living with it. It can be so slight as to not
really be there. It can be something that guides and helps achieve the right outcome.
It can be suffocating and overbearing. It can delight without you realizing it is even a
thing, and crush the spirit from you without any malice being intended. So whether
or not architecture is “about the important stuff,” it’s certainly important.
Another pithy quote that is often used to define software architecture comes from the
same article where Martin shares Ralph’s views: “So you might end up defining archi‐
tecture as things that people perceive as hard to change." Martin’s idea that architec‐
ture is the stuff that’s hard to change makes sense at some level and brings us back to
the concept of architecture in the built environment. Where things are harder to
change, they need a bit more up-front thought to really make sure we are going in the
right direction. But there is a problem with taking a simple definition of a complex
idea and running with that as a working definition—if this statement were entirely
528 
| 
Chapter 16: The Evolutionary Architect
