is that if the team needs to change the microservice to add a new feature and does not
find the feature to its liking, rewriting it shouldn’t take too long at all.
That said, if you’ve adopted a truly polyglot approach and are making use of multiple
technology stacks, then the challenges of making changes to an orphaned service
could be compounded if your team doesn’t know the tech stack any longer.
Case Study: realestate.com.au
For the first edition of this book, I spent some time chatting with realestate.com.au
(REA) about its use of microservices, and a lot of what I learned helped greatly in
terms of sharing real-world examples of microservices in action. I also found REA’s
interplay of organizational structure and architecture to be especially fascinating.
This overview of its organizational structure is based on our discussions back in 2014.
I am certain that what REA looks like today is quite different. This overview repre‐
sents a snapshot, a point in time. I’m not suggesting that this is the best way to struc‐
ture an organization—just that it is what worked best for REA at the time. Learning
from other organizations is sensible; copying what they do without understanding
why they do it is foolish.
As it does today, REA’s core business of real estate encompassed different facets. In
2014, REA was split into independent lines of business (LOBs). For example, one line
of business dealt with residential property in Australia, another with commercial
property, and another line handled one of REA’s overseas businesses. These lines of
business had IT delivery teams (or “squads”) associated with them; only some had a
single squad, while the biggest line had four squads. So for residential property, there
were multiple teams involved with creating the website and listing services to allow
people to browse property. People rotated between these teams every now and then
but tended to stay within that line of business for extended periods, ensuring that the
team members could build up a strong awareness of that part of the domain. This in
turn helped the communication between the various business stakeholders and the
team delivering features for them.
Each squad inside a line of business was expected to own the entire life cycle of each
service it created, including building, testing and releasing, supporting, and even
decommissioning. The core delivery services team had the job of providing advice,
guidance, and tooling to the squads in the LOBs, helping these squads deliver more
effectively. Using our newer terminology, the core delivery services team was playing
the role of an enabling team. A strong culture of automation was key, and REA made
heavy use of AWS as an important part of enabling the teams to be more autono‐
mous. Figure 15-6 illustrates how this all worked.
Case Study: realestate.com.au 
| 
519
