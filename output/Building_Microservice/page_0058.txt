undertaking. In general, I feel it’s more appropriate to wait until enough of the
domain model has stabilized before looking to define service boundaries.
I do see a temptation for startups to go microservice first, the reasoning being, “If
we’re really successful, we’ll need to scale!” The problem is that you don’t necessarily
know if anyone is even going to want to use your new product. And even if you do
become successful enough to require a highly scalable architecture, the thing you end
up delivering to your users might be very different from what you started building in
the first place. Uber initially focused on limos, and Flickr spun out of attempts to cre‐
ate a multiplayer online game. The process of finding product market fit means that
you might end up with a very different product at the end than the one you thought
you’d build when you started.
Startups also typically have fewer people available to build the system, which creates
more challenges with respect to microservices. Microservices bring with them sour‐
ces of new work and complexity, and this can tie up valuable bandwidth. The smaller
the team, the more pronounced this cost will be. When working with smaller teams
with just a handful of developers, I’m very hesitant to suggest microservices for this
reason.
The challenge of microservices for startups is compounded by the fact that normally
your biggest constraint is people. For a small team, a microservice architecture can be
difficult to justify because there is work required just to handle the deployment and
management of the microservices themselves. Some people have described this as the
“microservice tax.” When that investment benefits lots of people, it’s easier to justify.
But if one person out of your five-person team is spending their time on these issues,
that’s a lot of valuable time not being spent building your product. It’s much easier to
move to microservices later, after you understand where the constraints are in your
architecture and what your pain points are—then you can focus your energy on using
microservices in the most sensible places.
Finally, organizations creating software that will be deployed and managed by their
customers may struggle with microservices. As we’ve already covered, microservice
architectures can push a lot of complexity into the deployment and operational
domain. If you are running the software yourself, you are able to offset this new com‐
plexity by adopting new technology, developing new skills, and changing working
practices. This isn’t something you can expect your customers to do. If they are used
to receiving your software as a Windows installer, it’s going to come as an awful
shock to them when you send out the next version of your software and say, “Just put
these 20 pods on your Kubernetes cluster!” In all likelihood, they will have no idea
what a pod, Kubernetes, or a cluster even is.
32 
| 
Chapter 1: What Are Microservices?
