Figure 14-10. Supporting different aggregating calls for different devices
This can lead to a lot of bloat in the gateway, especially if we consider different native
mobile applications, customer-facing websites, internal administration interfaces,
and the like. We also have the problem, of course, that while these different UIs
might be owned by different teams, the gateway is a single unit—we have the same
old problems of multiple teams having to work on the same deployed unit. Our single
aggregating backend can become a bottleneck, as so many changes are trying to be
made to the same deployable artifact.
Multiple Concerns
There are a whole host of concerns that may need to be addressed on the server side
when it comes to handling API calls. Aside from the call aggregation and filtering, we
can think of more generic concerns like API key management, user authentication, or
call routing. Often these generic concerns can be handled by API gateway products,
which are available in many sizes and for many different price points (some of which
are eye-wateringly high!). Depending on the sophistication you require, it can make a
lot of sense to purchase a product (or license a service) to handle some of these con‐
cerns for you. Do you really want to manage API key issuing, tracking, rate limiting,
and so on yourself? By all means, look at products in this space to solve these generic
478 
| 
Chapter 14: User Interfaces
