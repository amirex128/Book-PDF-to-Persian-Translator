Monitoring and Observability
In Chapter 10, I explained how monitoring is an activity, something we do to a sys‐
tem, but that focusing on an activity rather than an outcome is problematic, a thread
that has run through this book. Instead, we should focus on the observability of our
systems. Observability is the extent to which we can understand what a system is
doing by examining external outputs. Making a system that has good observability
requires that we build this thinking into our software and ensure that the right types
of external outputs are available.
Distributed systems can fail in strange ways, and microservices are no different. We
cannot predict all causes of system failure, so it can be hard to know what informa‐
tion we’ll need ahead of time to diagnose and fix issues. Using tooling that can help
you interrogate these external outputs in ways that you cannot expect becomes
increasingly important. I suggest that you look at tools like Lightstep and Honey‐
comb that were built with this thinking in mind.
Finally, as your system grows in scale, it becomes more and more likely that there will
always be an error somewhere. But in a large-scale system, one machine having a
problem isn’t necessarily cause for everyone to jump into action, nor should this nec‐
essarily result in a rude awakening for anyone at 3 a.m. Using “test in production”
techniques like parallel runs and synthetic transactions can be much more effective
for picking up problems that might actually be impacting the end users.
Security
Microservices give us more opportunity to defend our application in depth, which in
turn can lead to more secure systems. On the other hand, they often have a larger
attack surface area, which can leave us more exposed to attack! This balancing act is
why it’s so important to have a holistic understanding of security, something I shared
in Chapter 11.
With more information flowing over networks, it becomes more important to con‐
sider the protection of data in transit. The increased number of moving parts also
means that automation is a vital part of microservice security. Managing patching,
certificates, and secrets using manual, error-prone processes can leave you vulnerable
to attack. So use tools that allow for ease of automation.
JWTs can be used to decentralize authorization logic in a way that also avoids the
need for additional round trips. This can help protect you from issues like the con‐
fused deputy problem, while at the same time ensuring your microservice can run in
a more independent fashion.
Finally, increasing numbers of people are adopting a zero-trust mindset. With zero
trust, you operate as though your system has already been compromised and you
Afterword: Bringing It All Together 
| 
557
