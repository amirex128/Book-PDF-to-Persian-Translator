Production Experiments
The scale at which Netflix operates is well known, as is the fact that Netflix is based
entirely on the AWS infrastructure. These two factors mean that it has to embrace
failure well. Netflix realized that planning for failure and actually knowing your soft‐
ware will handle that failure when it occurs are two different things. To that end,
Netflix actually incites failure to ensure that its systems are tolerant of failure by run‐
ning tools on its systems.
The most famous of these tools is Chaos Monkey, which during certain hours of the
day turns off random machines in production. Knowing that this can and will hap‐
pen in production means that the developers who create the systems really have to be
prepared for it. Chaos Monkey is just one part of Netflix’s Simian Army of failure
bots. Chaos Gorilla is used to take out an entire availability zone (the AWS equivalent
of a data center), whereas Latency Monkey simulates slow network connectivity
between machines. For many, the ultimate test of whether your system really is
robust might be unleashing your very own Simian Army on your production
infrastructure.
From Robustness to Beyond
Applied in its narrowest form, chaos engineering could be a useful activity in terms of
improving the robustness of our application. Remember, robustness in the context of
resilience engineering means the extent to which our system can handle expected
problems. Netflix knew it couldn’t rely on any given virtual machine being available
in its production environment, so it built Chaos Monkey to ensure that its system
could survive this expected issue.
If you make use of chaos engineering tooling as part of an approach to continually
question the resilience of your system, however, it can have far greater applicability.
Using tools in this space to help answer the “what if” questions you might have, con‐
tinually questioning your understanding, can have a much bigger impact. The Chaos
Toolkit is an open source project to help you run experiments on your system, and it
has proved very popular. Reliably, the company founded by the creators of the Chaos
Toolkit, offers a broader range of tools to help with chaos engineering in general,
although perhaps the best-known vendor in this space is Gremlin.
Just remember, running a chaos engineering tool doesn’t make you resilient.
Blame
When things go wrong, there are lots of ways we can handle it. Obviously, in the
immediate aftermath, our focus is on getting things back up and running, which is
sensible. After that, all too often, come the recriminations. There is a default position
to look for something or someone to blame. The concept of “root cause analysis”
Blame 
| 
415
