1 Martin L. Abbott and Michael T. Fisher, The Art of Scalability: Scalable Web Architecture, Processes, and
Organizations for the Modern Enterprise, 2nd ed. (New York: Addison-Wesley, 2015).
CHAPTER 13
Scaling
“You’re gonna need a bigger boat.”
—Chief Brody, Jaws
When we scale our systems, we do so for one of two reasons. Firstly, it allows us to
improve the performance of our system, perhaps by allowing us to handle more load
or by improving latency. Secondly, we can scale our system to improve its robustness.
In this chapter, we’ll look at a model to describe the different types of scaling, and
then we’ll look in detail at how each type of scaling can be implemented using a
microservice architecture. At the end of this chapter, you should have an array of
techniques to handle the scaling issues that may come your way.
To start with, though, let’s look at the different types of scaling you might want to
apply.
The Four Axes of Scaling
There isn’t one right way to scale a system, as the technique used will depend on the
type of constraint you might have. We have a number of different types of scaling we
can bring to bear to help with performance, robustness, or perhaps both. A model
I’ve often used to describe the different types of scaling is the Scale Cube from The
Art of Scalability,1 which breaks scaling down into three categories that in the context
of computer systems cover functional decomposition, horizontal duplication, and
data partitioning. The value of this model is that it helps you understand that you can
scale a system along one, two, or all three of these axes, depending on your needs.
419
