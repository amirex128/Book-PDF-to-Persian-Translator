5 David Heinemeier Hansson, “The Majestic Monolith,” Signal v. Noise, February 29, 2016, https://oreil.ly/
WwG1C.
consider it a monolith. Arguably, multiple architectures fit this definition, but I’m
going to discuss those I see most often: the single-process monolith, the modular
monolith, and the distributed monolith.
The Single-Process Monolith
The most common example that comes to mind when discussing monoliths is a sys‐
tem in which all of the code is deployed as a single process, as in Figure 1-6. You may
have multiple instances of this process for robustness or scaling reasons, but funda‐
mentally all the code is packed into a single process. In reality, these single-process
systems can be simple distributed systems in their own right because they nearly
always end up reading data from or storing data into a database, or presenting infor‐
mation to web or mobile applications.
Figure 1-6. In a single-process monolith, all code is packaged into a single process
Although this fits most people’s understanding of a classic monolith, most systems I
encounter are somewhat more complex than this. You may have two or more mono‐
liths that are tightly coupled to one another, potentially with some vendor software in
the mix.
A classic single-process monolithic deployment can make sense for many organiza‐
tions. David Heinemeier Hansson, the creator of Ruby on Rails, has made the case
effectively that such an architecture makes sense for smaller organizations.5 Even as
the organization grows, however, the monolith can potentially grow with it, which
brings us to the modular monolith.
The Monolith 
| 
15
