After you begin playing around with containers, you’ll also realize that you need
something to allow you to manage these containers across lots of underlying
machines. Container orchestration platforms like Kubernetes do exactly that, allow‐
ing you to distribute container instances in such a way as to provide the robustness
and throughput your service needs, while allowing you to make efficient use of the
underlying machines. In Chapter 8 we’ll explore the concepts of operational isolation,
containers, and Kubernetes.
Don’t feel the need to rush to adopt Kubernetes, or even containers for that matter.
They absolutely offer significant advantages over more traditional deployment tech‐
niques, but their adoption is difficult to justify if you have only a few microservices.
After the overhead of managing deployment begins to become a significant headache,
start considering containerization of your service and the use of Kubernetes. But if
you do end up doing that, do your best to ensure that someone else is running the
Kubernetes cluster for you, perhaps by making use of a managed service on a public
cloud provider. Running your own Kubernetes cluster can be a significant amount of
work!
Streaming
Although with microservices we are moving away from monolithic databases, we still
need to find ways to share data between microservices. This is happening at the same
time that organizations are wanting to move away from batch reporting operations
and toward more real-time feedback, allowing them to react more quickly. Products
that allow for the easy streaming and processing of what can often be large volumes
of data have therefore become popular with people using microservice architectures.
For many people, Apache Kafka has become the de facto choice for streaming data in
a microservice environment, and for good reason. Capabilities such as message per‐
manence, compaction, and the ability to scale to handle large volumes of messages
can be incredibly useful. Kafka has started adding stream-processing capabilities in
the form of KSQLDB, but you can also use it with dedicated stream-processing solu‐
tions like Apache Flink. Debezium is an open source tool developed to help stream
data from existing datasources over Kafka, helping ensure that traditional datasour‐
ces can become part of a stream-based architecture. In Chapter 4 we’ll look at how
streaming technology can play a part in microservice integration.
Public Cloud and Serverless
Public cloud providers, or more specifically the main three providers—Google Cloud,
Microsoft Azure, and Amazon Web Services (AWS)—offer a huge array of managed
services and deployment options for managing your application. As your microser‐
vice architecture grows, more and more work will be pushed into the operational
space. Public cloud providers offer a host of managed services, from managed
Enabling Technology 
| 
21
