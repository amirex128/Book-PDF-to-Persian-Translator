database instances or Kubernetes clusters to message brokers or distributed filesys‐
tems. By making use of these managed services, you are offloading a large amount of
this work to a third party that is arguably better able to deal with these tasks.
Of particular interest among the public cloud offerings are the products that sit under
the banner of serverless. These products hide the underlying machines, allowing you
to work at a higher level of abstraction. Examples of serverless products include mes‐
sage brokers, storage solutions, and databases. Function as a Service (FaaS) platforms
are of special interest because they provide a nice abstraction around the deployment
of code. Rather than worrying about how many servers you need to run your service,
you just deploy your code and let the underlying platform handle spinning up instan‐
ces of your code on demand. We’ll look at serverless in more detail in Chapter 8.
Advantages of Microservices
The advantages of microservices are many and varied. Many of these benefits can be
laid at the door of any distributed system. Microservices, however, tend to achieve
these benefits to a greater degree primarily because they take a more opinionated
stance in the way service boundaries are defined. By combining the concepts of infor‐
mation hiding and domain-driven design with the power of distributed systems,
microservices can help deliver significant gains over other forms of distributed
architectures.
Technology Heterogeneity
With a system composed of multiple, collaborating microservices, we can decide to
use different technologies inside each one. This allows us to pick the right tool for
each job rather than having to select a more standardized, one-size-fits-all approach
that often ends up being the lowest common denominator.
If one part of our system needs to improve its performance, we might decide to use a
different technology stack that is better able to achieve the required performance lev‐
els. We might also decide that the way we store our data needs to change for different
parts of our system. For example, for a social network, we might store our users’
interactions in a graph-oriented database to reflect the highly interconnected nature
of a social graph, but perhaps the posts the users make could be stored in a
document-oriented data store, giving rise to a heterogeneous architecture like the one
shown in Figure 1-10.
22 
| 
Chapter 1: What Are Microservices?
