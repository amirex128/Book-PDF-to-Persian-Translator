these ideas is outside the scope of this book, but there are some core concepts of
DDD that are worth highlighting, including:
Ubiquitous language
Defining and adopting a common language to be used in code and in describing
the domain, to aid communication.
Aggregate
A collection of objects that are managed as a single entity, typically referring to
real-world concepts.
Bounded context
An explicit boundary within a business domain that provides functionality to the
wider system but that also hides complexity.
Ubiquitous Language
Ubiquitous language refers to the idea that we should strive to use the same terms in
our code as the users use. The idea is that having a common language between the
delivery team and the actual people will make it easier to model the real-world
domain and also should improve communication.
As a counterexample, I recall a situation when working at a large, global bank. We
were working in the area of corporate liquidity, a fancy term that basically refers to
the ability to move cash among different accounts held by the same corporate entity.
The product owner was really great to work with, and she had a fantastically deep
understanding of the various products that she wanted to bring to market. When
working with her, we’d have discussions about things like haircuts and end-of-day
sweeps, all things that made a lot of sense in her world and that had meaning to her
customers.
The code, on the other hand, had none of this language in there. At some point previ‐
ously, a decision had been made to use a standard data model for the database. It was
widely referred to as “the IBM banking model,” but I came to grips with whether this
was a standard IBM product or just the creation of a consultant from IBM. By defin‐
ing the loose concept of an “arrangement,” the theory went that any banking opera‐
tion could be modeled. Taking out a loan? That was an arrangement. Buying a share?
That’s an arrangement! Applying for a credit card? Guess what—that’s an arrange‐
ment too!
The data model had polluted the code to such an extent that the codebase was shorn
of all real understanding of the system we were building. We weren’t building a
generic banking application. We were building a system specifically to manage cor‐
porate liquidity. The problem was that we had to map the rich domain language of
the product owner to the generic code concepts—meaning a lot of work in helping
52 
| 
Chapter 2: How to Model Microservices
