Next, we could decide to run different shards of our Order microservice for different
geographical locales, as in Figure 13-8. Horizontal duplication applies within each
geographic boundary.
Figure 13-8. MusicCorp’s Order microservice is now partitioned across geography, with
duplication in each group
It’s worth noting that by scaling along one axis, other axes might be easier to make
use of. For example, the functional decomposition of Order enables us to then spin
up multiple duplicates of the Order microservice, and also to partition the load on
order processing. Without that initial functional decomposition, we’d be limited to
applying those techniques on the monolith as a whole.
The goal when scaling isn’t necessarily to scale along all axes, but we should be aware
that we have these different mechanisms at our disposal. Given this choice, it’s
important we understand the pros and cons of each mechanism to work out which
ones make the most sense.
Start Small
In The Art of Computer Programming (Addison-Wesley), Donald Knuth famously
said:
The real problem is that programmers have spent far too much time worrying about
efficiency in the wrong places and at the wrong times; premature optimization is the
root of all evil (or at least most of it) in programming.
Optimizing our system to solve problems we don’t have is a great way to waste time
that could be better spent on other activities, and also to ensure that we have a system
that is needlessly more complex. Any form of optimization should be driven by real
need. As we talked about in “Robustness” on page 388, adding new complexity to our
Start Small 
| 
433
