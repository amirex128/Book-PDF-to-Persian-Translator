2 This is from an email exchange on the extreme programming mailing list, which Martin Fowler then shared
in his article “Who Needs an Architect?”.
Perhaps the term architect, or at least the common understanding of what architects
do, has done the most harm in this way: the idea of someone who draws up detailed
plans for others to interpret and expects them to be carried out; the balance of part
artist, part engineer, overseeing the creation of what is often a singular vision, with all
other viewpoints being subservient, except for the occasional objection from the
structural engineer regarding the laws of physics. In our industry, this view of the
architect leads to some terrible practices, with architects creating diagram after dia‐
gram, page after page of documentation, with a view to inform the construction of
the perfect system, while failing to take into account the fundamentally unknowable
future, and utterly devoid of any understanding of how hard their plans will be to
implement, or whether or not they will actually work, let alone having any ability to
change as we learn more.
But architects of the built environment are operating in a different realm from that of
software architects. Their constraints are different, the end product different. The
cost of change is so much higher in construction than it is in software development.
You can’t unpour concrete, but you can change code, and even the infrastructure we
run our code on is much more malleable than before, thanks to virtualization. Build‐
ings are fairly fixed once built—they can be changed, or expanded, or torn down, but
the associated costs are very high. But we expect our software to continually change
to suit our needs.
So if software architecture is different from the architecture of the built environment,
perhaps we should be a bit clearer in terms of what software architecture actually is.
What Is Software Architecture?
One of the most famous definitions of software architecture comes via an email from
Ralph Johnson: “Architecture is about the important stuff. Whatever that is.”2 So
does this mean that anything important is done by the architect? Does that mean that
all other work being done is not important? The issue with this oft-quoted statement
is that it’s often used in isolation, without any understanding of the wider response in
which Ralph shared it. Firstly, it’s clear that he is talking from the perspective of a
software developer. He goes on to say:
What Is Software Architecture? 
| 
527
