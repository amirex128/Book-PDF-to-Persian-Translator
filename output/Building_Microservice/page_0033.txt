3 For an in-depth introduction to domain-driven design, see Domain-Driven Design by Eric Evans (Addison-
Wesley)—or for a more condensed overview, see Domain-Driven Design Distilled by Vaughn Vernon
(Addison-Wesley).
The desire for loosely coupled services with stable interfaces guides our thinking
about how we find our microservice boundaries in the first place.
Modeled Around a Business Domain
Techniques like domain-driven design can allow you to structure your code to better
represent the real-world domain that the software operates in.3 With microservice
architectures, we use this same idea to define our service boundaries. By modeling
services around business domains, we can make it easier to roll out new functionality
and to recombine microservices in different ways to deliver new functionality to our
users.
Rolling out a feature that requires changes to more than one microservice is expen‐
sive. You need to coordinate the work across each service (and potentially across sep‐
arate teams) and carefully manage the order in which the new versions of these
services are deployed. That takes a lot more work than making the same change
inside a single service (or inside a monolith, for that matter). It therefore follows that
we want to find ways to make cross-service changes as infrequent as possible.
I often see layered architectures, as typified by the three-tiered architecture in
Figure 1-2. Here, each layer in the architecture represents a different service bound‐
ary, with each service boundary based on related technical functionality. If I need to
make a change to just the presentation layer in this example, that would be fairly effi‐
cient. However, experience has shown that changes in functionality typically span
multiple layers in these types of architectures—requiring changes in presentation,
application, and data tiers. This problem is exacerbated if the architecture is even
more layered than the simple example in Figure 1-2; often each tier is split into fur‐
ther layers.
By making our services end-to-end slices of business functionality, we ensure that
our architecture is arranged to make changes to business functionality as efficient as
possible. Arguably, with microservices we have made a decision to prioritize high
cohesion of business functionality over high cohesion of technical functionality.
Key Concepts of Microservices 
| 
7
