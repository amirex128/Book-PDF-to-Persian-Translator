CHAPTER 7
Build
We’ve spent a lot of time covering the design aspects of microservices, but we need to
start getting a bit deeper into how your development process may need to change to
accommodate this new style of architecture. In the following chapters, we’ll look at
how we deploy and test our microservices, but before that we need to look at what
comes first—what happens when a developer has a change ready to check in?
We’ll start this exploration by reviewing some foundational concepts—continuous
integration and continuous delivery. They’re important concepts no matter what
kind of systems architecture you might be using, but microservices open up a host of
unique questions. From there we’ll look at pipelines and at different ways of manag‐
ing source code for your services.
A Brief Introduction to Continuous Integration
Continuous integration (CI) has been around for a number of years. However, it’s
worth spending a bit of time going over the basics, as there are some different options
to consider, especially when we think about the mapping between microservices,
builds, and version control repositories.
With CI, the core goal is to keep everyone in sync with each other, which we achieve
by frequently making sure that newly checked-in code properly integrates with exist‐
ing code. To do this, a CI server detects that the code has been committed, checks it
out, and carries out some verification such as making sure that the code compiles and
that tests pass. As a bare minimum, we expect this integration to be done on a daily
basis, although in practice I’ve worked in multiple teams in which a developer has in
fact integrated their changes multiple times per day.
As part of this process, we often create artifacts that are used for further validation,
such as deploying a running service to run tests against it (we’ll explore testing in
197
