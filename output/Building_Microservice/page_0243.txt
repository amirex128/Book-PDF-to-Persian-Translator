Which Approach Would I Use?
In my experience, the main advantages of a monorepo approach—finer-grained
reuse and atomic commits—don’t seem to outweigh the challenges that emerge at
scale. For smaller teams, either approach is fine, but as you scale, I feel that the one
repository per microservice (multirepos) approach is more straightforward. Funda‐
mentally, I’m concerned about the encouragement of cross-service changes, the more
confused lines of ownership, and the need for new tooling that monorepos can bring.
A problem I’ve seen repeatedly is that organizations that started small, where collec‐
tive ownership (and therefore monorepos) worked well initially, have struggled to
move to different models later on, as the concept of the monorepo is so ingrained. As
the delivery organization grows, the pain of the monorepo increases, but so too does
the cost of migrating to an alternative approach. This is even more challenging for
organizations that grew rapidly, as it’s often only after that rapid growth has occurred
that the problems become evident, at which point the cost of migration to a multi‐
repo approach looks too high. This can lead to the sunk cost fallacy: you’ve invested
so much in making the monorepo work up to this point—just a bit more investment
will make it work as well as it used to, right? Perhaps not—but it’s a brave soul who
can recognize that they are throwing good money after bad and make a decision to
change course.
The concerns about ownership and monorepos can be alleviated through the use of
fine-grained ownership controls, but that tends to require tooling and/or an
increased level of diligence. My opinion on this might change as the maturity of tool‐
ing around monorepos improves, but despite a lot of work being done in regard to
the open source development of graph-based build tools, I’m still seeing very low
take-up of these toolchains. So it’s multirepos for me.
Summary
We’ve covered some important ideas in this chapter that should stand you in good
stead whether or not you end up using microservices. There are many more aspects
to explore around these ideas, from continuous delivery to trunk-based development,
monorepos to multirepos. I’ve given you a host of resources and further reading, but
it’s time for us to move on to a subject that is important to explore in some depth—
deployment.
Summary 
| 
217
