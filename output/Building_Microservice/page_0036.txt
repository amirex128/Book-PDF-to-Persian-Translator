of code is really easy to understand. Ask the opinion of someone brand-new to the
project, and they’ll feel it’s much too big. Likewise, ask a company that has just
embarked on its microservice transition and has perhaps 10 or fewer microservices,
and you’ll get a different answer than you would from a similar-sized company for
which microservices have been the norm for many years and that now has hundreds.
I urge people not to worry about size. When you are first starting out, it’s much more
important that you focus on two key things. First, how many microservices can you
handle? As you have more services, the complexity of your system will increase, and
you’ll need to learn new skills (and perhaps adopt new technology) to cope with this.
A move to microservices will introduce new sources of complexity, with all the chal‐
lenges this can bring. It’s for this reason that I am a strong advocate for incremental
migration to a microservice architecture. Second, how do you define microservice
boundaries to get the most out of them, without everything becoming a horribly cou‐
pled mess? These topics are much more important to focus on when you start your
journey.
Flexibility
Another quote from James Lewis is that “microservices buy you options.” Lewis was
being deliberate with his words—they buy you options. They have a cost, and you
must decide whether the cost is worth the options you want to take up. The resulting
flexibility on a number of axes—organizational, technical, scale, robustness—can be
incredibly appealing.
We don’t know what the future holds, so we’d like an architecture that can theoreti‐
cally help us solve whatever problems we might face down the road. Finding a bal‐
ance between keeping your options open and bearing the cost of architectures like
this can be a real art.
Think of adopting microservices as less like flipping a switch, and more like turning a
dial. As you turn up the dial, and you have more microservices, you have increased
flexibility. But you likely ramp up the pain points too. This is yet another reason I
strongly advocate incremental adoption of microservices. By turning up the dial
gradually, you are better able to assess the impact as you go, and to stop if required.
Alignment of Architecture and Organization
MusicCorp, an ecommerce company that sells CDs online, uses the simple three-
tiered architecture shown earlier in Figure 1-2. We’ve decided to move MusicCorp
kicking and screaming into the 21st century, and as part of that, we’re assessing the
existing system architecture. We have a web-based UI, a business logic layer in the
form of a monolithic backend, and data storage in a traditional database. These lay‐
ers, as is common, are owned by different teams. We’ll be coming back to the trials
and tribulations of MusicCorp throughout the book.
10 
| 
Chapter 1: What Are Microservices?
