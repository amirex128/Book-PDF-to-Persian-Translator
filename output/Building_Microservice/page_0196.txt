in helping communicate the behavior of an endpoint, so good documentation could
still be required to help consumers understand how to use an endpoint. It’s worth
noting, of course, that if you decide not to use an explicit schema, your documenta‐
tion will end up doing more work. You’ll need to explain what the endpoint does and
also document the structure and detail of the interface. Moreover, without an explicit
schema, detecting whether your documentation is up to date with the real endpoints
is more difficult. Stale documentation is an ongoing problem, but at least an explicit
schema gives you more chance of it being up to date.
I’ve already introduced OpenAPI as a schema format, but it also is very effective in
providing documentation, and a lot of open source and commercial tools now exist
that can support consuming the OpenAPI descriptors to help create useful portals to
allow developers to read the documentation. It’s worth noting that the open source
portals for viewing OpenAPI seem somewhat basic—I struggled to find one that sup‐
ported search functionality, for example. For those on Kubernetes, Ambassador’s
developer portal is especially interesting. Ambassador is already a popular choice as
an API gateway for Kubernetes, and its Developer Portal has the ability to autodis‐
cover available OpenAPI endpoints. The idea of deploying a new microservice and
having its documentation automatically available greatly appeals to me.
In the past we’ve lacked good support for documenting event-based interfaces. Now
at least we have options. The AsyncAPI format started off as an adaptation of Open‐
API, and we also now have CloudEvents, which is a CNCF project. I’ve not used
either in anger (that is, in a real setting), but I’m more drawn to CloudEvents purely
because it seems to have a wealth of integration and support, due in large part to its
association with the CNCF. Historically, at least, CloudEvents seemed to be more
restrictive in terms of the event format compared to AsyncAPI, with only JSON being
properly supported, until protocol buffer support was recently reintroduced after
previously being removed; so that may be a consideration.
The Self-Describing System
During the early evolution of SOA, standards like Universal Description, Discovery,
and Integration (UDDI) emerged to help us make sense of what services were run‐
ning. These approaches were fairly heavyweight, which led to alternative techniques
to try to make sense of our systems. Martin Fowler has discussed the concept of the
humane registry, a much more lightweight approach in which humans can record
information about the services in the organization in something as basic as a wiki.
170 
| 
Chapter 5: Implementing Microservice Communication
