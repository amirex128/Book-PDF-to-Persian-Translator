This can create challenges in organizations adopting stream-aligned teams with
increased degrees of autonomy around the ownership of their microservices. What is
the role of security experts? In “Enabling Teams” on page 503, we’ll look at how
specialists like security experts can work to support stream-aligned teams and help
microservice owners build more security thinking into their software, but also to
make sure that you have the right deep expertise on hand when you need it.
There are automated tools that can probe our systems for vulnerabilities, such as by
looking for cross-site scripting attacks. The Zed Attack Proxy (aka ZAP) is a good
example. Informed by the work of OWASP, ZAP attempts to re-create malicious
attacks on your website. Other tools exist that use static analysis to look for common
coding mistakes that can open up security holes, such as Brakeman for Ruby; there
are also tools like Snyk, which among other things can pick up dependencies on
third-party libraries that have known vulnerabilities. Where these tools can be easily
integrated into normal CI builds, integrating them into your standard check-ins is a
great place to start. Of course, it’s worth noting that many of these types of tools can
address only local issues—for example, a vulnerability in a specific piece of code.
They don’t replace the need to understand the security of your system at a wider, sys‐
temic level.
The Five Functions of Cybersecurity
With those core principles at the back of our minds, let’s now consider the broad-
ranging security-related activities that we need to perform. We’ll then go on to
understand how these activities vary in the context of a microservice architecture.
The model I prefer for describing the universe of application security comes from the
US National Institute of Standards and Technology (NIST), which outlines a useful
five-part model for the various activities involved in cybersecurity:
• Identify who your potential attackers are, what targets they are trying to acquire,
and where you are most vulnerable.
• Protect your key assets from would-be hackers.
• Detect if an attack has happened, despite your best efforts.
• Respond when you’ve found out something bad has occurred.
• Recover in the wake of an incident.
I find this model to be especially useful due to its holistic nature. It’s very easy to put
all your effort into protecting your application without first considering what threats
you might actually face, let alone working out what you might do if a clever attacker
does slip past your defenses.
350 
| 
Chapter 11: Security
