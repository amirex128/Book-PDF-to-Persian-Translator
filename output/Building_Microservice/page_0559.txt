in here, of course. Your inclination to let teams pick the right tool for the job may be
tempered by the fact that it becomes harder to hire people or move them between
teams if you have 10 different technology stacks to support. Similarly, if each team
picks a completely different data store, you may find yourself lacking enough experi‐
ence to run any of them at scale. Netflix, for example, has mostly standardized on
Cassandra as a data-store technology. Although it may not be the best fit for all of its
cases, Netflix feels that the value gained by building tooling and expertise around
Cassandra is more important than having to support and operate at scale multiple
other platforms that may be a better fit for certain tasks. Netflix is an extreme exam‐
ple, where scale is likely the strongest overriding factor, but you get the idea.
Between microservices is where things can get messy, however. If one microservice
decides to expose REST over HTTP, another makes use of gRPC, and a third uses
Java RMI, then integration can become a nightmare, as consuming microservices
have to understand and support multiple styles of interchange. This is why I try to
stick to the guideline that we should “be worried about what happens between the
boxes, and be liberal in what happens inside.”
So a successful architecture is as much about allowing for change to suit the needs of
our users as anything. But one thing people often forget is that our system doesn’t
just accommodate users; it also accommodates the people that actually build the soft‐
ware themselves. A successful architecture also helps create a nice environment in
which to do our work.
A Social Construct
No plan survives contact with the enemy.
—Helmuth von Moltke (heavily paraphrased)
So you’ve thought about the vision, about the constraints, and about what you need
to accomplish. You think you understand what will be hard to change, and the spaces
where you need to make change possible. Now what? Well, the architecture is what
happens, not what you think should happen—this is the difference between vision
and reality. Architects of the built environment need to work with the people con‐
structing the building to help them understand what the vision is, but also to change
the plan when reality challenges that vision. It’s possible that what you think is possi‐
ble fundamentally isn’t. If an architect isn’t embedded to some extent with the people
creating the system, then they will be unable to help communicate the vision to the
people doing the work, nor will the architect understand where that vision is no
longer fit for purpose. The construction crew may encounter things on the ground
that weren’t foreseen, or perhaps a supply shortage might cause a rethink in terms of
the design.
A Social Construct 
| 
533
