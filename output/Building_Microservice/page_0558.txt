team across microservices owned by that team will be easier than changing the inter‐
actions that are exposed to other teams.
Figure 16-2. Changes within a zone are easier to make than changes between zones
This ties in nicely with the concept of a team API, which we discussed in “Small
Teams, Large Organization” on page 496. An architect can help facilitate creation of a
team API, making sure the team’s microservices and working practices fit in with the
wider organization.
By defining spaces in which these changes can be made without compromising the
system as a whole, we make developers’ lives easier and also focus our attention on
parts of the system that are harder to change. Remember the concept of information
hiding that we explored in Chapter 2? As we explored there, hiding information
inside a microservice boundary makes it much easier to create a stable interface for
consumers. When we make changes to the microservice, it is easier to ensure we
haven’t broken compatibility with external consumers. Here, we can define an archi‐
tecture to provide information hiding at the team level, rather than just at the micro‐
service level. This gives us another level of information hiding and creates a larger
safe space in which a team can make local changes without breaking the wider
system.
Within each microservice or larger zone, you may be OK with the team that owns
that zone picking a different technology stack or data store. Other concerns may kick
532 
| 
Chapter 16: The Evolutionary Architect
