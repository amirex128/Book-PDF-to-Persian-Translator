Figure 4-1. Different styles of inter-microservice communication along with example
implementing technologies
We’ll look at the different elements of this model in more detail shortly, but first I’d
like to briefly outline them:
Synchronous blocking
A microservice makes a call to another microservice and blocks operation wait‐
ing for the response.
Asynchronous nonblocking
The microservice emitting a call is able to carry on processing whether or not the
call is received.
Request-response
A microservice sends a request to another microservice asking for something to
be done. It expects to receive a response informing it of the result.
Event-driven
Microservices emit events, which other microservices consume and react to
accordingly. The microservice emitting the event is unaware of which microser‐
vices, if any, consume the events it emits.
Common data
Not often seen as a communication style, microservices collaborate via some
shared data source.
When using this model to help teams decide on the right approach, I spend a lot of
time understanding the context in which they are operating. Their needs in terms of
reliable communication, acceptable latency, and volume of communication are all
going to play a part in making a technology choice. But in general, I tend to start with
deciding whether a request-response or an event-driven style of collaboration is more
appropriate for the given situation. If I’m looking at request-response, then both syn‐
chronous and asynchronous implementations are still available to me, so I have a
94 
| 
Chapter 4: Microservice Communication Styles
