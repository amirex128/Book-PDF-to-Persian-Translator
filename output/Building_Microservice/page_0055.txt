With a microservice architecture, we have broken up this monolithic schema. That
doesn’t mean that the need for reporting across all our data has gone away; we’ve just
made it much more difficult, because now our data is scattered across multiple logi‐
cally isolated schemas.
More modern approaches to reporting, such as using streaming to allow for real-time
reporting on large volumes of data, can work well with a microservice architecture
but typically require the adoption of new ideas and associated technology. Alterna‐
tively, you might simply need to publish data from your microservices into central
reporting databases (or perhaps less structured data lakes) to allow for reporting use
cases.
Monitoring and Troubleshooting
With a standard monolithic application, we can have a fairly simplistic approach to
monitoring. We have a small number of machines to worry about, and the failure
mode of the application is somewhat binary—the application is often either all up or
all down. With a microservice architecture, do we understand the impact if just a sin‐
gle instance of a service goes down?
With a monolithic system, if our CPU is stuck at 100% for a long time, we know it’s a
big problem. With a microservice architecture with tens or hundreds of processes,
can we say the same thing? Do we need to wake someone up at 3 a.m. when just one
process is stuck at 100% CPU?
Luckily, there are a whole host of ideas in this space that can help. If you’d like to
explore this concept in more detail, I recommend Distributed Systems Observability
by Cindy Sridharan (O’Reilly) as an excellent starting point, although we’ll also be
taking our own look at monitoring and observability in Chapter 10.
Security
With a single-process monolithic system, much of our information flowed within
that process. Now, more information flows over networks between our services. This
can make our data more vulnerable to being observed in transit and also to poten‐
tially being manipulated as part of man-in-the-middle attacks. This means that you
might need to direct more care to protecting data in transit and to ensuring that your
microservice endpoints are protected so that only authorized parties are able to make
use of them. Chapter 11 is dedicated entirely to looking at the challenges in this
space.
Microservice Pain Points 
| 
29
