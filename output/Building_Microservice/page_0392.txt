We’ll explore this topic shortly in terms of authentication and authorization of both
humans and microservices, but before that we should consider some fundamental
models around trust.
Do we trust everything running in our network? Or do we view everything with sus‐
picion? Here, we can consider two mindsets—implicit trust and zero trust.
Implicit Trust
Our first option could be to just assume that any calls to a service made from inside
our perimeter are implicitly trusted.
Depending on the sensitivity of the data, this might be fine. Some organizations
attempt to ensure security at the perimeter of their networks, and they therefore
assume they don’t need to do anything else when two services are talking together.
However, should an attacker penetrate your network, all hell could break loose. If the
attacker decides to intercept and read the data being sent, change the data without
you knowing, or even in some circumstances pretend to be the thing you are talking
to, you may not know much about it.
This is by far the most common form of inside-perimeter trust I see in organizations.
I’m not saying that is a good thing! For most of the organizations I see using this
model, I worry that the implicit trust model is not a conscious decision; rather, peo‐
ple are unaware of the risks in the first place.
Zero Trust
“Jill, we’ve traced the call—it’s coming from inside the house!”
—When a Stranger Calls
When operating in a zero-trust environment, you have to assume that you are operat‐
ing in an environment that has already been compromised—the computers you are
talking to could have been compromised, the inbound connections could be from
hostile parties, the data you are writing could be read by bad people. Paranoid? Yes!
Welcome to zero trust.
Zero trust, fundamentally, is a mindset. It’s not something you can magically imple‐
ment using a product or tool; it’s an idea and that idea is that if you operate under the
assumption that you are operating in a hostile environment in which bad actors
could already be present, then you have to carry out precautions to make sure that
you can still operate safely. In effect, the concept of a “perimeter” is meaningless with
zero trust (for this reason, zero trust is often also known as “perimeterless
computing”).
Since you are assuming your system has been compromised, all inbound calls from
other microservices have to be properly assessed. Is this really a client I should trust?
366 
| 
Chapter 11: Security
