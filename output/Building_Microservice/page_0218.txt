There are efforts to create more developer-friendly BPM tools. Feedback on these
tools from developers seems to be mixed, but the tools have worked well for some,
and it’s good to see people trying to improve on these frameworks. If you feel the
need to explore these tools further, do take a look at Camunda and Zeebe, both of
which are open source orchestration frameworks targeting microservice developers,
and which would be at the top of my list if I decided that a BPM tool was for me.
Choreographed sagas
A choreographed saga aims to distribute responsibility for the operation of the saga
among multiple collaborating services. If orchestration is a command-and-control
approach, choreographed sagas represent a trust-but-verify architecture. As we’ll see
in our example in Figure 6-10, choreographed sagas will often make heavy use of
events for collaboration between services.
Figure 6-10. An example of a choreographed saga for implementing order fulfillment
There’s quite a bit going on here, so it’s worth exploring in more detail. First, these
microservices are reacting to events being received. Conceptually, events are broad‐
cast in the system, and interested parties are able to receive them. Remember, as we
discussed in Chapter 4, you don’t send events to a microservice; you just fire them
out, and the microservices that are interested in these events are able to receive them
and act accordingly. In our example, when the Warehouse service receives that first
192 
| 
Chapter 6: Workflow
