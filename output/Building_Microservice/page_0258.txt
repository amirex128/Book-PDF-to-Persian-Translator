database changes without manual intervention? Embracing a culture of automation is
key if you want to keep the complexities of microservice architectures in check.
Two case studies on the power of automation
It will probably be helpful to give you a couple of concrete examples that explain the
power of good automation. The Australian company realestate.com.au (REA) pro‐
vides real estate listings for retail and commercial customers in Australia and else‐
where in the Asia-Pacific region. Over a number of years, it had been moving its
platform toward a distributed microservices design. When it started on this journey,
it had to spend a lot of time getting the tooling around the services just right—mak‐
ing it easy for developers to provision machines, deploy their code, and monitor their
services. This caused a front-loading of work to get things started.
In the first three months of this exercise, REA was able to move just two new micro‐
services into production, with the development team taking full responsibility for the
entire build, deployment, and support of the services. In the next three months,
between 10 to 15 services went live in a similar manner. By the end of an 18-month
period, REA had more than 70 services in production.
This sort of pattern is also borne out by the experiences of Gilt, which we mentioned
earlier. Again, automation, especially tooling to help developers, drove the explosion
in Gilt’s use of microservices. A year after starting its migration to microservices, Gilt
had around 10 microservices live; by 2012, over 100; and in 2014, over 450 microser‐
vices were live—or around three microservices for every developer in Gilt. This sort
of ratio of microservices to developers is not uncommon among organizations that
are mature in their use of microservices, the Financial Times being a company with a
similar ratio.
Infrastructure as Code (IAC)
Taking the concept of automation further, infrastructure as code (IAC) is a concept
whereby your infrastructure is configured by using machine-readable code. You
might define your service configuration in a chef or puppet file, or perhaps write
some bash scripts to set things up—but whatever tool you end up using, your system
can be brought into a known state through the use of source code. Arguably, the con‐
cept of IAC could be considered one way to implement automation. I think, though,
that it’s worth calling it out as its own thing, because it speaks to how automation
should be done. Infrastructure as code has brought concepts from software develop‐
ment into the operations space. By defining our infrastructure via code, this
232 
| 
Chapter 8: Deployment
