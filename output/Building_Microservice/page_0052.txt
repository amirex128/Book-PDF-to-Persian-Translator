Composability
One of the key promises of distributed systems and service-oriented architectures is
that we open up opportunities for reuse of functionality. With microservices, we
allow for our functionality to be consumed in different ways for different purposes.
This can be especially important when we think about how our consumers use our
software.
Gone is the time when we could think narrowly about either our desktop website or
our mobile application. Now we need to think of the myriad ways that we might want
to weave together capabilities for the web, native application, mobile web, tablet app,
or wearable device. As organizations move away from thinking in terms of narrow
channels to embracing more holistic concepts of customer engagement, we need
architectures that can keep up.
With microservices, think of us opening up seams in our system that are addressable
by outside parties. As circumstances change, we can build applications in different
ways. With a monolithic application, I often have one coarse-grained seam that can
be used from the outside. If I want to break that up to get something more useful, I’ll
need a hammer!
Microservice Pain Points
Microservice architectures bring a host of benefits, as we’ve already seen. But they
also bring a host of complexity. If you are considering adopting a microservice archi‐
tecture, it’s important that you be able to compare the good with the bad. In reality,
most microservice points can be laid at the door of distributed systems and
thus would just as likely be evident in a distributed monolith as in a microservice
architecture.
We’ll be covering many of these issues in depth throughout the rest of the book—in
fact, I’d argue that the bulk of this book is about dealing with the pain, suffering, and
horror of owning a microservice architecture.
Developer Experience
As you have more and more services, the developer experience can begin to suffer.
More resource-intensive runtimes like the JVM can limit the number of microservi‐
ces that can be run on a single developer machine. I could probably run four or five
JVM-based microservices as separate processes on my laptop, but could I run 10 or
20? Most likely not. Even with less taxing runtimes, there is a limit to the number of
things you can run locally, which inevitably will start conversations about what to do
when you can’t run the entire system on one machine. This can become even more
complicated if you are using cloud services that you cannot run locally.
26 
| 
Chapter 1: What Are Microservices?
