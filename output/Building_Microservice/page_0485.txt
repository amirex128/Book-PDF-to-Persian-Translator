1 Matthew Skelton and Manuel Pais, Team Topologies (Portland, OR: IT Revolution, 2019).
2 As Charity Majors says, “You’re not a full stack developer unless you build the chips.”
Finally, some user interface technology can be challenging to work with in a non-
monolithic fashion. Here I’m thinking specifically of single-page applications (SPAs),
which historically at least haven’t been easy to break apart. Traditionally, a web user
interface would consist of multiple web pages, and you would navigate from one page
to another. With SPAs, the entire application is instead served up inside a single web
page. Frameworks like Angular, React, and Vue theoretically allow for the creation of
more sophisticated user interfaces than “old-fashioned” websites. We’ll be looking at
a set of patterns that can give you different options for how to decompose a user
interface later in this chapter, and in terms of SPAs I will show how the micro front‐
end concept can allow you to use SPA frameworks while still avoiding the need for a
monolithic user interface.
Toward Stream-Aligned Teams
I think that having a dedicated frontend team is in general a mistake if you are trying
to optimize for good throughput—it creates new handoff points in your organization,
slowing things down. Ideally, our teams are aligned around end-to-end slices of func‐
tionality, allowing each team to deliver new features to its customers while reducing
the amount of coordinaton needed. My preferred model is a team owning the end-to-
end delivery of functionality in a specific part of the domain. This matches what Mat‐
thew Skelton and Manuel Pais describe as stream-aligned teams in their book Team
Topologies.1 As they describe it:
A stream-aligned team is a team aligned to a single, valuable stream of work...[T]he
team is empowered to build and deliver customer or user value as quickly, safely, and
independently as possible, without requiring hand-offs to other teams to perform parts
of the work.
In a sense, we are talking about full stack teams (rather than full stack developers).2 A
team with end-to-end responsibility for delivery of user-facing functionality is also
going to have a more obvious, direct connection to the end user as well. All too often
I’ve seen “backend” teams with a hazy idea of what the software does or what the
users need, which can cause all sorts of misunderstandings when it comes to imple‐
menting new functionality. On the other hand, the end-to-end teams will find it
much easier to build a direct connection with the people using the software they cre‐
ate—they can be more focused on making sure that the people they are serving are
getting what they need.
As a concrete example, I spent some time working with FinanceCo, a successful and
growing Fintech firm based in Europe. At FinanceCo, virtually all teams work on
Toward Stream-Aligned Teams 
| 
459
