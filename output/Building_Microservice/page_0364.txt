observability is one area in which standardization can be incredibly important. With
microservices collaborating in lots of different ways to provide capabilities to users
using multiple interfaces, you need to view the system in a holistic way.
You should try to write your logs out in a standard format. You definitely want to
have all your metrics in one place, and you may want to have a list of standard names
for your metrics too; it would be very annoying for one service to have a metric called
ResponseTime, and another to have one called RspTimeSecs, when they mean the
same thing.
As always with standardization, tools can help. As I’ve said before, the key is to make
it easy to do the right thing—so having a platform with many of the basic building
blocks in place, like log aggregation, makes a lot of sense. Increasingly, much of this
falls to the platform team, the role of which we explore more fully in Chapter 15.
Selecting Tools
As we’ve already covered, there are potentially a host of different tools you may need
to bring to bear to help improve the observability of your system. But as I’ve already
touched on, this is a fast-emerging space, and it’s highly likely that the tooling we’ll be
using in the future will look very different from what we have now. With platforms
like Honeycomb and Lightstep leading the way in terms of what observability tooling
for microservices looks like, and with the rest of the market to an extent playing
catch-up, I fully expect this space to see a lot of churn in the future.
So it’s quite possible you’ll need different tools from what you have right now if
you’re only just embracing microservices, and it’s possible you’ll want different tool‐
ing in the future too, as the solutions in this space continue to improve. With that in
mind, I want to share a few thoughts about criteria that I think are important for any
tooling in this area to have.
Democratic
If you have tools that are so hard to work with only experienced operators can make
use of them, then you limit the number of people who can participate in production
activities. Likewise, if you pick tools that are so expensive as to prohibit their use in
any situation other than critical production environments, then developers will not
have exposure to these tools until it’s too late.
Pick tools that consider the needs of all the people whom you will want using them. If
you really want to move to a model of more collective ownership of your software,
then the software needs to be usable by everyone in the team. Making sure that what‐
ever tooling you pick will also be used in development and test environments will go
a long way toward making this goal a reality.
338 
| 
Chapter 10: From Monitoring to Observability
