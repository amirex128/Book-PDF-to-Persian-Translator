The Metaversion
With the end-to-end tests step, it is easy to start thinking, I know all these services at
these versions work together, so why not deploy them all together? This very quickly
becomes a conversation along the lines of, So why not use a version number for the
whole system? To quote Brandon Byars, “Now you have 2.1.0 problems.”
By versioning together changes made to multiple services, we effectively embrace the
idea that changing and deploying multiple services at once is acceptable. It becomes
the norm; it becomes OK. In doing so, we cede one of the main advantages of a
microservice architecture: the ability to deploy one service by itself, independently of
other services.
All too often, the approach of accepting multiple services being deployed together
drifts into a situation in which services become coupled. Before long, nicely separate
services become increasingly tangled with others, and you never notice, because you
never try to deploy them by themselves. You end up with a tangled mess where you
have to orchestrate the deployment of multiple services at once, and as we discussed
previously, this sort of coupling can leave us in a worse place than we would be with a
single monolithic application.
This is bad.
Lack of Independent Testability
We’ve come back frequently to the topic of independent deployability being an
important property to facilitate teams working in a more autonomous way, allowing
for software to be shipped more effectively. If your teams work independently, it fol‐
lows that they should be able to test independently. As we’ve seen, end-to-end tests
can reduce the autonomy of teams and can force increased levels of coordination,
with the associated challenges that can bring.
The drive toward independent testability extends to our use of the infrastructure
associated with testing. Often, I see people having to make use of shared testing envi‐
ronments in which tests from multiple teams are executed. Such an environment is
often highly constrained, and any issue can cause significant problems. Ideally, if you
want your teams to be able to develop and test in an independent fashion, they
should have their own test environments too.
Implementing (Those Tricky) End-to-End Tests 
| 
291
