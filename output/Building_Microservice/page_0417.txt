explore in Chapter 15, there is a balancing act between global and local optimization
when it comes to organizational dynamics, and that balance isn’t static. In that chap‐
ter we’ll look at the role of focused, stream-aligned teams who own the microservices
they need to deliver user-facing functionality and have increased levels of responsibil‐
ity to make this happen. We’ll also look at the role of enabling teams, who support
these stream-aligned teams in doing their work, and at how enabling teams can be a
big part of helping achieve sustained adaptability at an organizational level.
Creating a culture that prioritizes creating an environment in which people can share
information freely, without fear of retribution, is vital to encourage learning in the
wake of an incident. Having the bandwidth to really examine such surprises and
extract the key learnings requires time, energy, and people—all things that will
reduce the resources available to you to deliver features in the short term. Deciding to
embrace sustained adaptability is partly about finding the balancing point between
short-term delivery and longer-term adaptability.
To work toward sustained adaptability means that you are looking to discover what
you don’t know. This requires continuing investment, not one-off transactional
activities—the term sustained is important here. It’s about making sustained adapta‐
bility a core part of your organizational strategy and culture.
And Microservice Architecture
As we’ve discussed, we can see a way in which a microservice architecture can help us
achieve the property of robustness, but it is not enough if you want resiliency.
Taken more broadly, the ability to deliver resiliency is a property not of the software
itself but of the people building and running the system. Given the focus of this book,
much of what follows in this chapter will focus primarily on what a microservice
architecture can help deliver in terms of resiliency—which is almost entirely limited
to improving the robustness of applications.
Failure Is Everywhere
We understand that things can go wrong. Hard disks can fail. Our software can crash.
And as anyone who has read the fallacies of distributed computing can tell you, the
network is unreliable. We can do our best to try to limit the causes of failure, but at a
certain scale, failure becomes inevitable. Hard drives, for example, are more reliable
now than ever before, but they’ll break eventually. The more hard drives you have,
the higher the likelihood of failure for an individual unit on any given day; failure
becomes a statistical certainty at scale.
Failure Is Everywhere 
| 
391
