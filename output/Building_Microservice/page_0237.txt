best-known example of a company using a monorepo approach, although it’s far
from the only one. Although there are some other benefits to this approach, such as
improved visibility of other people’s code, the ability to reuse code easily and to make
changes that impact multiple different projects is often cited as the major reason for
adopting this pattern.
If we take the example we just discussed, where we want to make a change to the
Inventory so that it exposes some new behavior and also update the Shipping ser‐
vice to make use of this new functionality that we’ve exposed, then these changes can
be made in a single commit, as we see in Figure 7-9.
Figure 7-9. Using a single commit to make changes across two microservices using a
monorepo
Of course, as with the multirepo pattern discussed previously, we still need to deal
with the deployment side of this. We’d likely need to carefully consider the order of
deployment if we want to avoid a lockstep deployment.
Atomic Commits Versus Atomic Deploy
Being able to make an atomic commit across multiple services
doesn’t give you atomic rollout. If you find yourself wanting to
change code across multiple services at once and roll it out into
production all at the same time, this violates the core principle of
independent deployability. For more on this, see “DRY and the
Perils of Code Reuse in a Microservice World” on page 154.
Mapping Source Code and Builds to Microservices 
| 
211
