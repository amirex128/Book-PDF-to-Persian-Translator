Pluggable, Modular Microservices
At FinanceCo, I saw an interesting challenge associated with a particular microser‐
vice that was becoming a bottleneck for many teams. For each country, FinanceCo
had dedicated teams focusing on functionality specific to that country. This made a
lot of sense, as each country had specific requirements and challenges. But it caused
issues for this central service, which needed specific functionality to be updated for
each country. The team owning the central microservice was overwhelmed by pull
requests being sent to it. The team was doing an excellent job of processing these pull
requests quickly, and in fact it focused on this being a core part of its responsibilities,
but structurally the situation wasn’t really sustainable.
This is an example of where a team having a large number of pull requests can be a
sign of many different potential issues. Are pull requests from other teams being
taken seriously? Or are these pull requests a sign that the microservice should poten‐
tially change ownership?
If a team has a lot of inbound pull requests, it could be a sign that
you really have a microservice that is being shared by multiple
teams.
Changing ownership
Sometimes the right thing to do is to change who owns a microservice. Consider an
example in MusicCorp. The Customer Engagement team is having to send a large
number of pull requests related to the Recommendation microservice to the Marketing
and Promotions team. This is because that a number of changes are happening as far
as how customer information is managed, and also because we need to surface these
recommendations in different ways.
In this situation, it may make sense for the Customer Engagement team to just take
ownership of the Recommendation microservice. In the example of FinanceCo,
though, no such option existed. The problem was that the sources of pull requests
were coming from multiple different teams. So what else could be done?
Run multiple variations
One option we explored was that each country team would run its own variation of
the shared microservice. So the US team would run its version, the Singapore team its
own variation, and so on.
Of course, the issue with this approach is code duplication. The shared microservice
implemented a set of standard behaviors and common rules but also wanted some
of this functionality to change for each country. We didn’t want to duplicate the
Pluggable, Modular Microservices 
| 
513
