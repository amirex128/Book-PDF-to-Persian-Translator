someone knocks a copy of the album onto the floor and it gets stepped on and bro‐
ken? What happens now? Our systems say there are 99 copies on the shelf, but there
are actually only 98.
What if we made our inventory system AP instead, and we occasionally had to con‐
tact a user later on and tell him that one of his items is actually out of stock? Would
that be the worst thing in the world? It would certainly be much easier to build and
scale it and ensure it is correct.
We have to recognize that no matter how consistent our systems might be in and of
themselves, they cannot know everything that happens, especially when we’re keep‐
ing records of the real world. This is one of the main reasons that AP systems end up
being the right call in many situations. Aside from the complexity of building CP sys‐
tems, they can’t fix all our problems anyway.
Antifragility
In the first edition, I talked about the concept of antifragile, as popularized by Nassim
Taleb. This concept describes how systems actually benefit from failure and disorder
and was highlighted as being inspiration for how some parts of Netflix operated,
specifically with respect to concepts like chaos engineering. When looking more
broadly at the concept of resiliency, though, we realize that antifragility is just a sub‐
set of the concept of resiliency. When we consider the concepts of graceful extensibil‐
ity and sustained adaptability, which we introduced earlier, this becomes clear.
I think that when antifragility became, briefly, a hyped concept in IT, it did so against
a backdrop of us thinking narrowly about resiliency—where we thought only about
robustness, and maybe about rebound, but ignored the rest. With the field of resil‐
ience engineering now gaining more recognition and traction, it seems appropriate to
move beyond the term antifragile, while still ensuring that we highlight some of the
ideas behind it that are well and truly part of resiliency as a whole.
Chaos Engineering
Since the first edition of this book, another technique that has gained more attention
is chaos engineering. Named for practices used at Netflix, it can be a useful approach
to help improve your resiliency—either in terms of ensuring your systems are as
robust as you think they are, or else as part of an approach toward the sustained
adaptability of your system.
Originally inspired by work that Netflix was doing internally, the term chaos engi‐
neering struggles somewhat due to confusing explanations of what it means. For
many, it means “run a tool on my software and see what it says,” something arguably
not helped by the fact that many of the most vocal proponents of chaos engineering
Chaos Engineering 
| 
413
