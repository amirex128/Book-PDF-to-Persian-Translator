6 Kripa Krishnan, “Weathering the Unexpected,” acmqueue 10, no. 9 (2012), https://oreil.ly/BCSQ7.
7 Russ Miles, Learning Chaos Engineering (Sebastopol: O’Reilly, 2019).
are often themselves selling tools to run on your software to do, well, chaos engineer‐
ing.
Getting a clear definition of what chaos engineering means to its practitioners is diffi‐
cult. The best definition (at least to my mind) that I’ve come across is this:
Chaos Engineering is the discipline of experimenting on a system in order to build
confidence in the system’s capability to withstand turbulent conditions in production.
—Principles of Chaos Engineering
Now the word system here is doing a lot of work. Some will view this narrowly as the
software and hardware components. But in the context of resiliency engineering, it’s
important that we see the system as being the entirety of the people, the processes, the
culture, and yes, the software and infrastructure that go into creating our product.
This means we should view chaos engineering more broadly than just “let’s turn off
some machines and see what happens.”
Game Days
Well before chaos engineering had its name, people would run Game Day exercises
to test people’s preparedness for certain events. Planned in advance but ideally
launched in surprise (for the participants), this gives you the chance to test your peo‐
ple and processes in the wake of a realistic but fictional situation. During my time at
Google, this was a fairly common occurrence for various systems, and I certainly
think that many organizations could benefit from having these sorts of exercises reg‐
ularly. Google goes beyond simple tests to mimic server failure, and as part of its
DiRT (Disaster Recovery Test) exercises it has simulated large-scale disasters such as
earthquakes.6
Game Days can be used to probe suspected sources of weakness in the system. In his
book, Learning Chaos Engineering,7 Russ Miles shares the example of a Game Day
exercise he facilitated that had been designed to examine, in part, the overreliance on
a single staff member named Bob. For the Game Day, Bob was sequestered in a room
and unable to help the team during the simulated outage. Bob was observing, though,
and ended up having to step in when the team, in its attempt to fix issues with the
“fake” system, ended up logging into production by mistake and was in the process of
destroying production data. One can only assume that lots of lessons were learned in
the aftermath of that exercise.
414 
| 
Chapter 12: Resiliency
