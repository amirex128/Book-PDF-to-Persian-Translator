3 I didn’t say I was succeeding.
Observability is the extent to which you can understand what the
system is doing based on external inputs. Logs, events, and metrics
might help you make things observable, but be sure to focus on
making the system understandable rather than throwing in lots of
tools.
Cynically, I could suggest that the pushing of this simplistic narrative is a way to sell
you tools. You need one tool for metrics, a different tool for logs, and yet another tool
for traces! And you need to send all that information differently! It’s much easier to
sell features by way of a box-ticking exercise when trying to market a product, rather
than talking about outcomes. As I said, I could suggest this with a cynical view, but
it’s 2021, and I’m trying to be a bit more positive in my thinking.3
It’s arguable all these three (or four!) concepts are really just specific examples of a
more generic concept. Fundamentally, we can see any piece of information we can
get from our system—any of these external outputs—generically as an event. A given
event might contain a small or large amount of information. It could contain a CPU
rate, information about a failed payment, the fact that a customer has logged in, or
any number of things. We can project from this event stream a trace (assuming we
can correlate these events), a searchable index, or an aggregation of numbers.
Although at present we chose to collect this information in different ways, using dif‐
ferent tools and different protocols, our current toolchains shouldn’t limit our think‐
ing in terms of how best to get the information we need.
When it comes to making your system observable, think about the outputs you need
from your system in terms of events that you can collect and interrogate. You might
need to use different tooling to expose different types of events right now, but that
may not be the case in the future.
Building Blocks for Observability
So what do we need? We need to know that the users of our software are happy. If
there is a problem, we want to know about it—ideally before our users find an issue
themselves. When a problem does occur, we need to work out what we can do to get
the system up and running again, and once the dust has settled we want to have
enough information in hand to work out what the hell went wrong and what we can
do to avoid the problem happening again.
In the rest of this chapter we will be looking at how to make this all happen. We will
be covering a number of building blocks that can help improve the observability of
your system architecture:
Building Blocks for Observability 
| 
311
