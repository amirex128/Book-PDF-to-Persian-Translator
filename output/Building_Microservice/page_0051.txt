Gilt, an online fashion retailer, adopted microservices for this exact reason. Having
started in 2007 with a monolithic Rails application, by 2009 Gilt’s system was unable
to cope with the load being placed on it. By splitting out core parts of its system, Gilt
was better able to deal with its traffic spikes, and today it has more than 450 micro‐
services, each one running on multiple separate machines.
When embracing on-demand provisioning systems like those provided by AWS, we
can even apply this scaling on demand for those pieces that need it. This allows us to
control our costs more effectively. It’s not often that an architectural approach can be
so closely correlated to an almost immediate cost savings.
Ultimately, we can scale our applications in a multitude of ways, and microservices
can be an effective part of this. We’ll look at the scaling of microservices in more
detail in Chapter 13.
Ease of Deployment
A one-line change to a million-line monolithic application requires the entire appli‐
cation to be deployed in order to release the change. That could be a large-impact,
high-risk deployment. In practice, deployments such as these end up happening
infrequently because of understandable fear. Unfortunately, this means that our
changes continue to build up between releases, until the new version of our applica‐
tion entering production has masses of changes. And the bigger the delta between
releases, the higher the risk that we’ll get something wrong!
With microservices, we can make a change to a single service and deploy it independ‐
ently of the rest of the system. This allows us to get our code deployed more quickly.
If a problem does occur, it can be quickly isolated to an individual service, making
fast rollback easy to achieve. It also means that we can get our new functionality out
to customers more quickly. This is one of the main reasons organizations like Ama‐
zon and Netflix use these architectures—to ensure that they remove as many impedi‐
ments as possible to getting software out the door.
Organizational Alignment
Many of us have experienced the problems associated with large teams and large
codebases. These problems can be exacerbated when the team is distributed. We also
know that smaller teams working on smaller codebases tend to be more productive.
Microservices allow us to better align our architecture to our organization, helping us
minimize the number of people working on any one codebase to hit the sweet spot of
team size and productivity. Microservices also allow us to change ownership of serv‐
ices as the organization changes—enabling us to maintain the alignment between
architecture and organization in the future.
Advantages of Microservices 
| 
25
