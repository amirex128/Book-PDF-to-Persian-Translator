The architect’s job is to look at the bigger picture and understand this balance. Hav‐
ing some view as to the level of debt and where to get involved is important. Depend‐
ing on your organization, you might be able to provide gentle guidance, but have the
teams themselves decide how to track and pay down the debt. For other organiza‐
tions, you may need to be more structured, perhaps maintaining a debt log that is
reviewed regularly.
Exception Handling
So our principles and practices guide how our systems should be built. But what hap‐
pens when our system deviates from that? Sometimes we make a decision that is just
an exception to the rule. In these cases, it might be worth capturing such a decision in
a log somewhere for future reference. If enough exceptions are found, it may eventu‐
ally make sense to change the applicable principle or practice to reflect a new under‐
standing of the world. For example, we might have a practice that states that we will
always use MySQL for data storage. But then we see compelling reasons to use Cas‐
sandra for highly scalable storage, at which point we change our practice to say, “Use
MySQL for most storage requirements, unless you expect large growth in volumes, in
which case use Cassandra.”
It’s worth reiterating, though, that every organization is different. I’ve worked with
some companies at which the development teams have a high degree of trust and
autonomy, and the principles are lightweight (and the need for overt exception han‐
dling is greatly reduced, if not eliminated). In more structured organizations in which
developers have less freedom, tracking exceptions may be vital to ensuring that the
rules in place properly reflect the challenges people are facing. With all that said, I am
a fan of microservices as a way of optimizing for autonomy of teams, giving them as
much freedom as possible to solve the problem at hand. If you are working in an
organization that places lots of restrictions on how developers can do their work,
then microservices may not be for you.
Summary
To summarize this chapter, here are what I see as the core responsibilities of the evo‐
lutionary architect:
Vision
Ensure there is a clearly communicated technical vision for the system that will
help it meet the requirements of your customers and organization.
Empathy
Understand the impact of your decisions on your customers and colleagues.
548 
| 
Chapter 16: The Evolutionary Architect
