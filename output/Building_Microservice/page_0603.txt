real-world application of, 412
selecting your approach, 411
cardinality, low versus high, 322
CDCs (consumer-driven contracts), 148,
293-295
central aggregating gateway pattern, 475-479
CFR (cross-functional requirements), 300, 392,
570
change reviews, 515
chaos engineering, 337, 413-415
Chaos Monkey, 415
Chaos Toolkit, 415
Chef, 258
choreographed sagas, 189, 192-195, 555
choreography, 569
circuit breakers, 397, 401-404, 569
client identity, 371
client libraries, 156
client-side caching, 438-440
closed source development, 200
Cloud Native Computing Foundation (CNCF),
265
CloudEvents, 147
COBIT (Control Objectives for Information
Technologies), 544
code branching, 199
code organization
one repository for multiple microservices,
210-216
one repository per microservice, 207-210
single, giant repository, 205-207
code reuse, 154-156, 208
code reviews, 515-517
cohesion
coupling and, 39
defined, 38, 569
collaboration, 549
collective ownership, 501-502, 569
Command Query Responsibility Segregation
(CQRS) pattern, 434
commands, versus requests, 106
comments and questions, xxii
common coupling, 46-49
common single sign-on (SSO), 376
communication styles
asynchronous nonblocking, 98-101
commands versus requests, 106
communicating through common data,
101-104
complexity introduced by, 116
event-driven, 108-115
in-process versus inter-process calls, 89-92
mixing styles, 95
overview of, 93, 553
parallel versus sequential calls, 108
request-response, 104-108
synchronous blocking, 95-98
technology supporting, 93
communication, defined, 541
community of practice (CoP) groups, 505
compatibility, assuring backward, 121 (see also
breaking changes)
compensating transactions, 186
composability, 26
conditional GETs, 444
Confluent Schema Registry, 148
confused deputy problem, 380-381
consistency, 410, 461
Consul, 159
consumer-driven contracts (CDCs), 148,
293-296
consumer-first approach, 153
container orchestration, 259 (see also Kuber‐
netes)
container-based virtualization, 240
containers (see also application containers)
basics of, 242-243
defined, 570
Docker, 246
drawbacks of, 244
fitness for microservices, 246
role in microservices, 20, 241
security concerns, 362
Windows and, 244
content coupling, 49-51
context, monitoring tools providing, 339
continuous delivery (CD), 201-203, 570
continuous deployment, 202, 570
continuous integration (CI), 197-200, 570
contract breakages
avoiding breaking changes, 144-149
managing, 149-154
structural versus semantic, 142
contract tests, 292
Control Objectives for Information Technolo‐
gies (COBIT), 544
Conway’s law, 11, 493-495, 522, 570
CoP (community of practice) groups, 505
Index 
| 
577
