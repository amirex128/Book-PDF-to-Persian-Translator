In practice, the more observable a system is, the easier it will be for us to understand
what the problem is when something goes wrong. Our understanding of the external
outputs helps us track down the underlying issue more quickly. The challenge is that
often we will need to create these external outputs, and use different types of tools to
understand the outputs.
Monitoring, on the other hand, is something we do. We monitor the system. We look
at it. Things will start to go wrong if you focus on just the monitoring—the activity—
without thinking about what you expect that activity to achieve.
More traditional approaches to monitoring would have you think in advance about
what could go wrong and define alerting mechanisms to tell you when these things
happened. But as the system becomes increasingly distributed, you’ll encounter issues
that would never have occurred to you. With a highly observable system, you’ll have
a collection of external outputs that you can interrogate in different ways—the con‐
crete outcome of having an observable system is that you can ask questions of your
production system that you never would have thought to ask before.
We can therefore see monitoring as an activity—something we do—with observabil‐
ity being a property of the system.
The Pillars of Observability? Not So Fast
Some people have attempted to distill down the idea of observability to a few core
concepts. Some have focused on “the three pillars” of observability in the form of
metrics, logging, and distributed tracing. New Relic even coined the term MELT
(metrics, event, logs, and traces), which hasn’t really caught on, but at least New Relic
is trying. Although this simple model initially appealed to me greatly (and I’m a
sucker for an acronym!), over time I’ve really moved away from this thinking as
being overly reductive but also potentially missing the point.
Firstly, reducing a property of a system to implementation details in this way seems
backward to me. Observability is a property, and there are many ways I might be able
to achieve that property. Focusing too much on specific implementation details runs
the risk of focusing on activity versus outcome. It’s analogous to the current world of
IT, where hundreds if not thousands of organizations have fallen in love with build‐
ing microservice-based systems without really understanding what they are trying to
achieve!
Secondly, are there always concrete lines between these concepts? I’d argue that many
of them overlap. I can put metrics in a logfile if I want. Likewise, I can construct a
distributed trace from a series of log lines, something that is commonly done.
310 
| 
Chapter 10: From Monitoring to Observability
