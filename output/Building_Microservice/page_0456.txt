4 Pramod J. Sadalage and Martin Fowler, NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Per‐
sistence (Upper Saddle River, NJ: Addison-Wesley 2012).
problem, but in the background you might want to look at other types of databases
that might better handle your requirements. With the wealth of different types of
databases available, selecting a new database can be a daunting activity, but as a start‐
ing point I thoroughly recommend the pleasingly concise NoSQL Distilled,4 which
gives you an overview of the different styles of NoSQL databases available to you—
from highly relational stores like graph databases to document stores, column stores,
and key-value stores.
Fundamentally, data partitioning is more work, especially as it may likely require
extensive changes to the data of your existing system. The application code is proba‐
bly going to be only lightly impacted, though.
Functional Decomposition
With functional decomposition, you extract functionality and allow it to be scaled
independently. Extracting functionality from an existing system and creating a new
microservice is almost the canonical example of functional decomposition. In
Figure 13-6, we see an example from MusicCorp in which the order functionality is
extracted from the main system to allow us to scale this functionality separately from
the rest.
Figure 13-6. The Order microservice is extracted from the existing MusicCorp system
In the case of FoodCo, this is its forward direction. The company has exhausted verti‐
cal scaling, used horizontal duplication as far as it can, discounted data partitioning—
what is left is to start to move toward functional decomposition. Key data and work‐
loads are being removed from the core system and core database to make this change
430 
| 
Chapter 13: Scaling
