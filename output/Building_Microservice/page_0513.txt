I’ve seen at least one organization use BFFs for other external parties that need to
make calls. Coming back to my perennial example of MusicCorp, I might expose a
BFF to allow third parties to extract royalty payment information, or to allow stream‐
ing to a range of set-top box devices, as we see in Figure 14-16. These aren’t really
BFFs anymore, as the external parties aren’t presenting a “user interface,” but this is
an example of the same pattern being used in a different context, so I thought it
worth sharing.
Figure 14-16. Using BFFs to manage external APIs
This approach can be especially effective, as third parties often have limited to no
ability (or desire) to use or change the API calls they make. With a central API back‐
end, you may have to keep old versions of the API around just to satisfy a small sub‐
set of your outside parties unable to make a change; with a BFF, this problem is
substantially reduced. It also limits the impact of breaking changes. You could change
the API for Facebook in a way that would break compatibility with other parties, but
as they use a different BFF, they aren’t impacted by this change.
When to Use
For an application that is only providing a web UI, I suspect a BFF will make sense
only if and when you have a significant amount of aggregation required on the server
side. Otherwise, I think some of the other UI composition techniques we’ve already
covered can work just as well without requiring an additional server-side component.
Pattern: Backend for Frontend (BFF) 
| 
487
