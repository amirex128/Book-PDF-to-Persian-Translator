stacks. When it comes to implementing concepts like desired state management,
though, we’ll need something like Kubernetes to handle it for us.
Kubernetes is important enough to warrant a more detailed discussion, so we’ll come
back to it later in the chapter. But for now just think of it as a way of managing con‐
tainers across lots of machines, which is enough for the moment.
Application Containers
If you’re familiar with deploying .NET applications behind IIS or Java applications
into something like Weblogic or Tomcat, you will be well acquainted with the model
in which multiple distinct services or applications sit inside a single application con‐
tainer, which in turn sits on a single host, as we see in Figure 8-17. The idea is that the
application container your services live in gives you benefits in terms of improved
manageability, such as clustering support to handle grouping multiple instances
together, monitoring tools, and the like.
Figure 8-17. Multiple microservices per application container
This setup can also yield benefits in terms of reducing overhead of language run‐
times. Consider running five Java services in a single Java servlet container. I have the
overhead of only a single JVM. Compare this with running five independent JVMs
on the same host when using containers. That said, I still feel that these application
containers have enough downsides that you should challenge yourself to see whether
they are really required.
First among the downsides is that they inevitably constrain technology choice. You
have to buy into a technology stack. This can limit not only the technology choices
for the implementation of the service itself but also the options you have in terms of
Deployment Options 
| 
247
