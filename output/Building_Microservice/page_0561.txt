6 Richard Gabriel, Patterns of Software: Tales from the Software Community (New York: Oxford University
Press, 1996).
also times when constraints may need to be put in place. Get this wrong, though, and
working in the system can become painful and error-prone.
As Richard Gabriel, author of Patterns of Software,6 explains:
Habitability is the characteristic of source code that enables programmers coming to
the code later in its life to understand its construction and intentions and to change it
comfortably and confidently.
A modern software development ecosystem consists of more than just code, however
—it extends beyond this to the technologies we use and the working practices we
adopt. All too frequently I’ve seen developers cursing the technology they are told to
use—often technology selected by people who don’t ever have to make use of it. The
more you make the evolution of your architecture and the selection of the tools and
technology you use a collaborative process, the easier it will be for you to ensure that
the end result is a habitable environment in which the people building the system feel
happy and productive in their work.
If we are to ensure that the systems we create are habitable for our developers, then
our architects and other decision makers need to understand the impact of their deci‐
sions. At the very least, this means spending time with the team, and ideally actually
spending time coding with the team. For those of you who practice pair program‐
ming, it becomes a simple matter for an architect to join a team for a short period as
one member of a pair. Participating in ensemble programming exercises could also
yield significant benefits, although an architect taking part in such a group activity
needs to be aware how their presence may change the dynamic of the ensemble.
Ideally, you should work on normal tasks to really understand what “normal” work is
like. I cannot emphasize how important it is for the architect to actually spend time
with the teams building the system! This is significantly more effective than having a
call or just looking at their code. As for how often you should do this, that depends
greatly on the size of the team(s) you are working with. But the key is that it should
be a routine activity. If you are working with four teams, for example, perhaps make
sure you spend half a day with each team every four weeks, working with them on
their delivery tasks to ensure you build awareness and improved communications
with the teams you are working with.
Habitability 
| 
535
