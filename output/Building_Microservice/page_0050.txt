boundaries become your obvious bulkheads. In a monolithic service, if the service
fails, everything stops working. With a monolithic system, we can run on multiple
machines to reduce our chance of failure, but with microservices, we can build sys‐
tems that handle the total failure of some of the constituent services and degrade
functionality accordingly.
We do need to be careful, however. To ensure that our microservice systems can
properly embrace this improved robustness, we need to understand the new sources
of failure that distributed systems have to deal with. Networks can and will fail, as will
machines. We need to know how to handle such failures and the impact (if any)
those failures will have on the end users of our software. I have certainly worked with
teams who have ended up with a less robust system after their migration to microser‐
vices due to their not taking these concerns seriously enough.
Scaling
With a large, monolithic service, we need to scale everything together. Perhaps one
small part of our overall system is constrained in performance, but if that behavior is
locked up in a giant monolithic application, we need to handle scaling everything as a
piece. With smaller services, we can scale just those services that need scaling, allow‐
ing us to run other parts of the system on smaller, less powerful hardware, as illustra‐
ted in Figure 1-11.
Figure 1-11. You can target scaling at just the microservices that need it
24 
| 
Chapter 1: What Are Microservices?
