8 Microsoft Research has carried out studies in this space, and I recommend all of them, but as a starting point,
I suggest “Don’t Touch My Code! Examining the Effects of Ownership on Software Quality” by Christian
Bird et al.
studies have shown the challenges of confused lines of ownership.8 I refer to this
problem as delivery contention.
Having a monolith doesn’t mean you will definitely face the challenges of delivery
contention any more than having a microservice architecture means that you won’t
ever face the problem. But a microservice architecture does give you more concrete
boundaries around which ownership lines can be drawn in a system, giving you
much more flexibility when it comes to reducing this problem.
Advantages of Monoliths
Some monoliths, such as the single-process or modular monoliths, have a whole host
of advantages too. Their much simpler deployment topology can avoid many of the
pitfalls associated with distributed systems. This can result in much simpler devel‐
oper workflows, and monitoring, troubleshooting, and activities like end-to-end test‐
ing can be greatly simplified as well.
Monoliths can also simplify code reuse within the monolith itself. If we want to reuse
code within a distributed system, we need to decide whether we want to copy code,
break out libraries, or push the shared functionality into a service. With a monolith,
our choices are much simpler, and many people like that simplicity—all the code is
there; just use it!
Unfortunately, people have come to view the monolith as something to be avoided—
as something inherently problematic. I’ve met multiple people for whom the term
monolith is synonymous with legacy. This is a problem. A monolithic architecture is a
choice, and a valid one at that. I’d go further and say that in my opinion it is the sen‐
sible default choice as an architectural style. In other words, I am looking for a reason
to be convinced to use microservices, rather than looking for a reason not to use
them.
If we fall into the trap of systematically undermining the monolith as a viable option
for delivering our software, we’re at risk of not doing right by ourselves or by the
users of our software.
Enabling Technology
As I touched on earlier, I don’t think you need to adopt lots of new technology when
you first start using microservices. In fact, that can be counterproductive. Instead, as
you ramp up your microservice architecture, you should constantly be looking for
18 
| 
Chapter 1: What Are Microservices?
