I’ve seen plenty of examples of SOA in which teams were striving to make the services
smaller, but they still had everything coupled to a database and had to deploy every‐
thing together. Service oriented? Yes. But it’s not microservices.
The microservice approach has emerged from real-world use, taking our better
understanding of systems and architecture to do SOA well. You should think of
microservices as being a specific approach for SOA in the same way that Extreme
Programming (XP) or Scrum is a specific approach for Agile software development.
Key Concepts of Microservices
A few core ideas must be understood when you are exploring microservices. Given
that some aspects are often overlooked, it’s vital to explore these concepts further to
help ensure that you understand just what it is that makes microservices work.
Independent Deployability
Independent deployability is the idea that we can make a change to a microservice,
deploy it, and release that change to our users, without having to deploy any other
microservices. More important, it’s not just the fact that we can do this; it’s that this is
actually how you manage deployments in your system. It’s a discipline you adopt as
your default release approach. This is a simple idea that is nonetheless complex in
execution.
If you take only one thing from this book and from the concept of
microservices in general, it should be this: ensure that you embrace
the concept of independent deployability of your microservices.
Get into the habit of deploying and releasing changes to a single
microservice into production without having to deploy anything
else. From this, many good things will follow.
To ensure independent deployability, we need to make sure our microservices are
loosely coupled: we must be able to change one service without having to change any‐
thing else. This means we need explicit, well-defined, and stable contracts between
services. Some implementation choices make this difficult—the sharing of databases,
for example, is especially problematic.
Independent deployability in and of itself is clearly incredibly valuable. But to achieve
independent deployability, there are so many other things you have to get right that
in turn have their own benefits. So you can also see the focus on independent deploy‐
ability as a forcing function—by focusing on this as an outcome, you’ll achieve a
number of ancillary benefits.
6 
| 
Chapter 1: What Are Microservices?
