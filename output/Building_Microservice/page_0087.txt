16 Alberto Brandolini, EventStorming (Victoria, BC: Leanpub, forthcoming).
Next, participants identify the commands that cause these events to happen. A com‐
mand is a decision made by a human (a user of the software) to do something. Here
you are trying to understand the system’s boundary, and identify the key human
actors in the system. Commands are captured on blue sticky notes.
The techies in the event storming session should be listening to what their nontechni‐
cal colleagues come up with here. A key part of this exercise is not to let any current
implementation warp the perception of what the domain is (that comes later). At this
stage you want to create a space in which you can get the concepts out of the heads of
the key stakeholders and out in the open.
With events and commands captured, aggregates come next. The events you have at
this stage not only are useful for sharing not just what happens in the system, but
they also start to highlight what the potential aggregates might be. Think of the afore‐
mentioned domain event “Order Placed.” The noun here—“Order”—could well be a
potential aggregate. And “Placed” describes something that can happen to an order,
so this may well be part of the life cycle of the aggregate. Aggregates are represented
by yellow sticky notes, and the commands and events associated with that aggregate
are moved and clustered around the aggregate. This also helps you understand how
aggregates are related to each other—events from one aggregate might trigger behav‐
ior in another.
With the aggregates identified, they are grouped into bounded contexts. Bounded
contexts most commonly follow a company’s organizational structure, and the par‐
ticipants of the exercise are well placed to understand what aggregates are used by
which parts of the organization.
There is more to event storming than what I’ve just described—this was just meant as
a brief overview. For a more detailed look at event storming, I’d suggest you read the
(currently in progress) book EventStorming by Alberto Brandolini (Leanpub).16
The Case for Domain-Driven Design for Microservices
We’ve explored how DDD can work in the context of microservices, so let’s summa‐
rize how this approach is useful to us.
Firstly, a big part of what makes DDD so powerful is that bounded contexts, which
are so important to DDD, are explicitly about hiding information—presenting a clear
boundary to the wider system while hiding internal complexity that is able to change
without impacting other parts of the system. This means that when we follow a DDD
approach, whether we realize it or not, we are also adopting information hiding—and
as we’ve seen, this is vital in helping to find stable microservice boundaries.
The Case for Domain-Driven Design for Microservices 
| 
61
