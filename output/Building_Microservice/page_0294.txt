and it’s too bad that at this stage at least, Google has decided it isn’t interested in the
same broad industry involvement for Knative.
The Future
Going forward, I see no signs that the rampaging juggernaut of Kubernetes will halt
any time soon, and I fully expect to see more organizations implementing their own
Kubernetes clusters for private clouds or making use of managed clusters in public
cloud settings. However, I think what we’re seeing now, with developers having to
learn how to use Kubernetes directly, will be a relatively short-lived blip. Kubernetes
is great at managing container workloads and providing a platform for other things
to be built on. It isn’t what could be considered a developer-friendly experience,
though. Google itself has shown us that with the push behind Knative, and I think
we’ll continue to see Kubernetes hidden under higher-level abstraction layers. So in
the future, I expect Kubernetes to be everywhere. You just won’t know it.
This isn’t to say that developers can forget they are building a distributed system.
They’ll still need to understand the myriad challenges that this type of architecture
brings. It’s just that they won’t have to worry as much about the detail of how their
software is mapped to underlying computing resources.
Should You Use It?
So for those of you who aren’t already fully paid-up members of the Kubernetes club,
should you join? Well, let me share a few guidelines. Firstly, implementing and man‐
aging your own Kubernetes cluster is not for the faint of heart—it is a significant
undertaking. So much of the quality of experience that your developers will have
using your Kubernetes install will depend on the effectiveness of the team running
the cluster. For this reason, a number of the larger organizations I’ve spoken to who
have gone down the Kubernetes on-prem path have outsourced this work to special‐
ized companies.
Even better, use a fully managed cluster. If you can make use of the public cloud, then
use fully managed solutions like those provided by Google, Azure, and AWS. What I
would say, though, is that if you are able to use the public cloud, then consider
whether Kubernetes is actually what you want. If you’re after a developer-friendly
platform for handling the deployment and life cycle of your microservices, then the
FaaS platforms we’ve already looked at could be a great fit. You could also look at the
other PaaS-like offerings, like Azure Web Apps, Google App Engine, or some of the
smaller providers like Zeit or Heroku.
Before you decide to start using Kubernetes, get some of your administrators and
developers using it. The developers can get started running something lightweight
locally, such as minikube or MicroK8s, giving them something pretty close to a full
Kubernetes experience, but on their laptops. The people you’ll have managing the
268 
| 
Chapter 8: Deployment
