CHAPTER 6
Workflow
In the previous two chapters, we’ve looked at aspects of microservices related to how
one microservice talks to another. But what happens when we want multiple micro‐
services to collaborate, perhaps to implement a business process? How we model and
implement these sorts of workflows in distributed systems can be a tricky thing to get
right.
In this chapter, we’ll look at the pitfalls associated with using distributed transactions
to solve this problem, and we’ll also look at sagas—a concept that can help us model
our microservice workflows in a much more satisfactory manner.
Database Transactions
Generically speaking, when we think of a transaction in the context of computing, we
think of one or more actions that are going to occur that we want to treat as a single
unit. When making multiple changes as part of the same overall operation, we want
to confirm whether all the changes have been made. We also want a way to clean up
after ourselves if an error occurs while these changes are happening. Typically, this
results in us using something like a database transaction.
With a database, we use a transaction to ensure that one or more state changes have
been made successfully. This could include data being removed, inserted, or changed.
In a relational database, this could involve multiple tables being updated within a sin‐
gle transaction.
175
