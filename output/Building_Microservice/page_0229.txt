from manual regression testing to automated functional testing, for example. As a
result, as you automate more and more of your build, deployment, and release pro‐
cess, you may find yourself getting closer and closer to continuous deployment.
Tooling
Ideally, you want a tool that embraces continuous delivery as a first-class concept. I
have seen many people try to hack and extend CI tools to make them do CD, often
resulting in complex systems that are nowhere near as easy to use as tools that build
in CD from the beginning. Tools that fully support CD allow you to define and visu‐
alize these pipelines, modeling the entire path to production for your software. As a
version of our code moves through the pipeline, if it passes one of these automated
verification stages, it moves to the next stage.
Some stages may be manual. For example, if we have a manual user acceptance test‐
ing (UAT) process, I should be able to use a CD tool to model it. I can see the next
available build ready to be deployed into our UAT environment and then deploy it,
and then if it passes our manual checks, mark that stage as being successful so it can
move to the next one. If the subsequent stage is automated, it will then get triggered
automatically.
Trade-Offs and Environments
As we move our microservice artifact through this pipeline, our microservice gets
deployed into different environments. Different environments serve different pur‐
poses, and they may have different characteristics.
Structuring a pipeline, and therefore working out what environments you’ll need, is
in and of itself a balancing act. Early on in the pipeline, we’re looking for fast feed‐
back on the production readiness of our software. We want to let developers know as
soon as possible if there is a problem—the sooner we get feedback about a problem
occurring, the quicker it is to fix it. As our software gets closer to production, we
want more certainty that the software will work, and we’ll therefore be deploying into
increasingly production-like environments—we can see this trade-off in Figure 7-3.
Figure 7-3. Balancing a build pipeline for fast feedback and production-like execution
environments
Build Pipelines and Continuous Delivery 
| 
203
