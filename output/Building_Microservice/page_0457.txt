happen. A few quick wins were identified, including data associated with deliveries
and menus being moved out of the primary database into dedicated microservices.
This has the added benefit that it creates opportunities for FoodCo’s growing delivery
team to start to organize itself around the ownership of these new microservices.
Implementation
I won’t dwell too much on this scaling mechanism, as we’ve already covered the fun‐
damentals of microservices extensively within this book. For a more detailed discus‐
sion of how we can make a change like this happen, see Chapter 3.
Key benefits
The fact that we have split out different types of workloads means we can now right‐
size the underlying infrastructure needed for our system. Decomposed functionality
that is only occasionally used could be turned off when not needed. Functionality
that only has modest load requirements could be deployed onto small machines. On
the other hand, functionality that is currently constrained could have more hardware
thrown at it, perhaps combining functional decomposition with one of the other scal‐
ing axes—such as running multiple copies of our microservice.
This ability to rightsize the infrastructure required to run these workloads gives us
more flexibility around optimizing the cost of the infrastructure we need to run the
system. This is a key reason why large SaaS providers make such heavy use of micro‐
services, as being able to find the right balance of infrastructure costs can help drive
profitability.
By itself, functional decomposition isn’t going to make our system more robust, but it
at least opens up the opportunity for us to build a system that can tolerate a partial
failure of functionality, something we explored in more detail in Chapter 12.
Assuming you’ve taken the microservices route to functional decomposition, you’ll
have increased opportunity to use different technologies that can scale the decom‐
posed microservice. For example, you could move the functionality to a program‐
ming language and runtime that is more efficient for the type of work you are doing,
or perhaps you could migrate the data to a database better suited for your read or
write traffic.
Although in this chapter we’re focusing primarily on scale in the context of our soft‐
ware system, functional decomposition also makes it easier to scale our organization
as well, a topic we’ll come back to in Chapter 15.
The Four Axes of Scaling 
| 
431
