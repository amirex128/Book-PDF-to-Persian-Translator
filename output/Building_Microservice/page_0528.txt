Collective ownership requires a high degree of coordination among individuals and
among the teams those individuals are in. This higher degree of coordination results
in an increased degree of coupling at an organizational level. Coming back to the
paper by MacCormack et al., mentioned at the beginning of this chapter, we have this
observation:
In tightly-coupled organizations...even if not an explicit managerial choice, the design
naturally becomes more tightly-coupled.
More coordination can lead to more organizational coupling which in turn leads to
more coupled system designs. Microservices work best when they can fully embrace
the concept of independent deployability—and a tightly coupled architecture will be
the opposite of what you want.
If you have a small number of developers, and perhaps only a single team, a collective
ownership model may be totally fine. But as the number of developers increase, the
fine-grained coordination needed to make collective ownership work will end up
becoming a significant negative factor in terms of getting the benefits of adopting
microservice architectures.
At a Team Level Versus an Organizational Level
The concepts of strong and collective ownership can be applied at different levels of
an organization. Within a team, you want people to be on the same page, able to effi‐
ciently collaborate with each other, and you want to ensure a high degree of collective
ownership as a result. As an example, this would manifest itself in terms of all mem‐
bers of a team being able to directly make changes to the codebase. A poly-skilled
team focused on the end-to-end delivery of customer-facing software will need to be
very good at having collective ownership. At an organizational level, if you want
teams to have a high degree of autonomy, then it is important that they also have a
strong ownership model.
Balancing Models
Ultimately, the more you tend toward collective ownership, the more important it
becomes to have consistency in how things are done. The more your organization
tends toward strong ownership, the more you can allow for local optimization, as we
see in Figure 15-1. This balance doesn’t need to be fixed—you will likely shift this at
different times and around different factors. You may, for example, give teams full
freedom around choosing a programming language but still require them to deploy
onto the same cloud platform for example.
502 
| 
Chapter 15: Organizational Structures
