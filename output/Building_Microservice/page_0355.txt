If you have already decided on an SLO, then working out your error budget should
be pretty clear. For example, you might say that your microservice needs to be avail‐
able 99.9% of the time per quarter, on a 24/7 basis. That means you are actually
allowed to be down for 2 hours and 11 minutes per quarter. In terms of that SLO, this
is your error budget.
Error budgets help give you a clear understanding of how well you are achieving (or
not) an SLO, allowing you to make better decisions about what risks to take. If you
are well under your error budget for the quarter, perhaps you are OK with rolling out
that microservice written in a new programming language. If you’ve already exceeded
your error budget, maybe you put off that rollout, and instead focus more of the
team’s time on improving the reliability of your system.
Error budgets are as much about giving teams breathing room to try new things as
anything.
Alerting
On occasion (hopefully rarely, but likely more than we’d like), something will happen
in our systems that will require a human operator to be notified to take action. A
microservice may have unexpectedly become unavailable, we might be seeing a larger
number of errors than we’d expect, or perhaps the entire system has become unavail‐
able for our users. In these situations, we need people to be made aware of what’s
happening so they can try and fix things.
The problem is that with a microservice architecture, given the larger number of
calls, the larger number of processes, and the more complex underlying infrastruc‐
ture, there will often be things going wrong. The challenge in a microservice environ‐
ment is working out exactly what types of problems should cause a human to be
informed and exactly how they should be told.
Some problems are worse than others
When something goes wrong, we want to know about it. Or do we? Are all problems
the same? As the sources of problems increase, it can become more important to be
able to prioritize these issues to decide if, and how, a human operator should be
involved. Often the biggest question I find myself asking when it comes to alerting is,
“Should this problem cause someone to be woken up at 3 a.m.?”
I saw one example of this thinking while spending some time on the Google campus
many years ago. In the reception area of one of the buildings in Mountain View was
an old rack of machines, there as a sort of exhibit. I noticed a couple of things. First,
these servers weren’t in server enclosures; they were just bare motherboards slotted
into the rack. The main thing I noticed, though, was that the hard drives were
attached by Velcro. I asked one of the Googlers why that was. “Oh,” he said, “the
Building Blocks for Observability 
| 
329
