9 I might not have come up with this rule.
1. If it ain’t broke, don’t fix it.9
2. Give up as much control as you feel happy with, then give away just a little bit
more. If you can offload all your work to a good PaaS like Heroku (or FaaS plat‐
form), then do it and be happy. Do you really need to tinker with every last
setting?
3. Containerizing your microservices is not pain-free, but is a really good compro‐
mise around cost of isolation and has some fantastic benefits for local develop‐
ment, while still giving you a degree of control over what happens. Expect
Kubernetes in your future.
It’s also important to understand your requirements. Kubernetes could be a great fit
for you, but perhaps something simpler would work just as well. Don’t feel ashamed
for picking a simpler solution, and also don’t worry too much about offloading work
to someone else—if I can push work to the public cloud, then I’ll do it, as it lets me
focus on my own work.
Above all, this space is going through a lot of churn. I hope I’ve given you some
insights into the key technology in this space, but also shared some principles that are
likely to outlive the current crop of hot technology. Whatever comes next, hopefully
you’re much more prepared to take it in stride.
In the next chapter, we’ll be going deeper into a topic we touched on briefly here:
testing our microservices to make sure they actually work.
274 
| 
Chapter 8: Deployment
