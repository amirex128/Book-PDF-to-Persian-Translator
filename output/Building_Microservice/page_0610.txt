overview of, 558
system redesigns and, 450
using combined models for, 432
vertical scaling, 420-422
schemas, 122, 141-143
Schr√∂dinger backup, 364
SCSs (self-contained systems), 466
secrets
aspects requiring management, 356
examples of, 356
tooling to manage, 356
security
areas of concern, 346
authentication and authorization, 375-386
challenges of microservices, 29, 345
core principles, 346-350
five functions of cybersecurity, 350-354
foundations of application security, 354-365
implicit versus zero trust, 365-369
overview of, 557
securing data, 369-375
types of security controls, 348
self-contained systems (SCSs), 466
self-describing systems, 170
semantic breakages, 142
semantic monitoring, 333-334
semantic rollbacks, 187
semantic versioning, 147
sequential, versus parallel calls, 108
serialization
binary formats, 141
textual formats, 140
server identity, 370
server-side caching, 440-441
serverless
benefits of, 22
defined, 249, 572
Function as a Service (FaaS), 249-256
service discovery, 157-161
service meshes, 162-163, 166-169, 267, 572
service providers, 376
service tests, 280, 283-285
service-level agreement (SLA), 327, 572
service-level indicator (SLI), 328, 572
service-level objective (SLO), 328, 394, 572
service-oriented architecture (SOA), 5, 572
service-to-service authentication, 375
services (Kubernetes), 261
services, documenting, 169-173
shards, 426
shared models, 57, 509-511
Simple Notification Service (SNS), 139
Simple Queue Service (SQS), 139
single sign-on (SSO), 376-379
single-page application (SPA), 572
single-process monoliths, 15
size, 9
smoke tests, 337
Snyk, 350
social contract, 152
software architecture, 527
Software as a Service (SaaS), 33
software engineering, 526
source code branching, 199
SPA (single-page application), 572
spans (distributed tracing), 325
Spring Cloud Contract, 295
SSO (single sign-on), 376-379
stability patterns
bulkheads, 400
case study, 395
circuit breakers, 401-404
idempotency, 406
isolation, 404
middleware, 405
redundancy, 405
retries, 399
time-outs, 397-399
strangler fig pattern, 79, 395
strategic goals, 536
stream-aligned teams, 14, 459-463, 492,
540-542, 572
streaming, role in microservices, 21
strong ownership, 500-501, 572
structural breakages, 142
structured programming, 40
stubbing downstream collaborators, 283
sustained adaptability, 390, 413, 418, 572
synchronous blocking calls, 95-98
synthetic transactions, 335-336
system health, 327-329
systems architects (see evolutionary architects)
T
tailored microservices templates, 545
target audience, xvii
teams
building, 542
584 
| 
Index
