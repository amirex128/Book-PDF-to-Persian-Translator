You could instead add people to the catalog team to help them move through their
work faster. The more standardized the technology stack and programming idioms in
use across your system, the easier it is for other people to make changes in your serv‐
ices. The flip side, of course, as we discussed earlier, is that standardization tends to
reduce a team’s ability to adopt the right solution for the job and can lead to different
sorts of inefficiencies.
Another option that would avoid the need for a shared Catalog microservice could
be to split the catalog into a separate general music catalog and a ringtone catalog. If
the change being made to support ringtones is fairly small, and the likelihood of this
being an area in which we will develop heavily in the future is also quite low, this may
well be premature. On the other hand, if there are 10 weeks of ringtone-related fea‐
tures stacked up, splitting out the service could make sense, with the mobile team
taking ownership.
There are a couple of other models we could consider, however. In a moment, we’ll
look at what can be done in terms of making the shared microservice more “plugga‐
ble,” allowing other teams to either contribute their code via libraries or else extend
from a common framework. First, though, we should explore the potential to bring
some ideas from the world of open source development into our company.
Internal Open Source
Many organizations have decided to implement some form of internal open source,
both to help manage the issue of shared codebases, and to make it easier for people
outside a team to contribute changes to a microservice they may be making use of.
With normal open source, a small group of people are considered core committers.
They are the custodians of the code. If you want a change to an open source project,
either you ask one of the committers to make the change for you or you make the
change yourself and send them a pull request. The core committers are still in charge
of the codebase; they are the owners.
Inside an organization, this pattern can work well too. Perhaps the people who
worked on the service originally are no longer on a team together; perhaps they are
now scattered across the organization. If they still have commit rights, you can find
them and ask for their help, perhaps pairing up with them; or if you have the right
tooling, you can send them a pull request.
Role of the Core Committers
We still want our services to be sensible. We want the code to be of decent quality,
and the microservice itself to exhibit some sort of consistency in how it is put
together. We also want to make sure that changes being made now don’t make future
planned changes much harder than they need to be. This means that we need to
Internal Open Source 
| 
511
