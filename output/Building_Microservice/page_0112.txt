Figure 3-8. An overview of the reporting database pattern
There are two key points to highlight here. Firstly, we still want to practice informa‐
tion hiding. So we should expose only the bare minimum of data in the reporting
database. This means that what is in the reporting database may be only a subset of
the data the microservice stores. However, as this is not a direct mapping, it creates
the opportunity to come up with a schema design for the reporting database that is
tailored exactly to the requirements of the consumers—this could involve using a
radically different schema, or perhaps even a different type of database technology
altogether.
The second key point is that the reporting database should be treated like any other
microservice endpoint, and it is the job of the microservice maintainer to ensure that
compatibility of this endpoint is maintained even if the microservice changes its
internal implementation detail. The mapping from internal state to reporting data‐
base is the responsibility of the people who develop the microservice itself.
Summary
So, to distill things down, when embarking on work to migrate functionality from a
monolithic architecture to a microservice architecture, you must have a clear under‐
standing of what you expect to achieve. This goal will shape how you go about the
work and will also help you understand whether you’re moving in the right direction.
Migration should be incremental. Make a change, roll that change out, assess it, and
go again. Even the act of splitting out one microservice can itself be broken down
into a series of small steps.
86 
| 
Chapter 3: Splitting the Monolith
