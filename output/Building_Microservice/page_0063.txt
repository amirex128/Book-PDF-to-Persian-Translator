2 The obvious starting point is Adrian’s summary of “On the Criteria…”, but Adrian’s coverage of Parnas’s
earlier work, “Information Distribution Aspects of Design Methodology”, contains some great insights along
with commentary from Parnas himself.
3 Parnas, “Information Distribution Aspects.”
Comprehensibility
Each module can be looked at in isolation and understood in isolation. This in
turn makes it easier to understand what the system as a whole does.
Flexibility
Modules can be changed independently from one another, allowing for changes
to be made to the functionality of the system without requiring other modules to
change. In addition, modules can be combined in different ways to deliver new
functionality.
This list of desirable characteristics nicely complements what we are trying to achieve
with microservice architectures—and indeed I now see microservices as just another
form of modular architecture. Adrian Colyer has actually looked back at a number of
David Parnas’s papers from this period and examined them with respect to microser‐
vices, and his summaries are well worth reading.2
The reality, as Parnas explored throughout much of his work, is that having modules
doesn’t result in your actually achieving these outcomes. A lot depends on how the
module boundaries are formed. From his own research, information hiding was a key
technique to help get the most out of modular architectures, and with a modern eye,
the same applies to microservices too.
From another of Parnas’s papers,3 we have this gem:
The connections between modules are the assumptions which the modules make
about each other.
By reducing the number of assumptions that one module (or microservice) makes
about another, we directly impact the connections between them. By keeping the
number of assumptions small, it is easier to ensure that we can change one module
without impacting others. If a developer changing a module has a clear understand‐
ing as to how the module is used by others, it will be easier for the developer to make
changes safely in such a way that upstream callers won’t also have to change.
This applies with microservices, as well, except that we also have the opportunity to
deploy that changed microservice without having to deploy anything else, arguably
amplifying the three desirable characteristics that Parnas describes of improved
development time, comprehensibility, and flexibility.
The implications of information hiding play out in so many ways, and I’ll pick up this
theme throughout the book.
What Makes a Good Microservice Boundary? 
| 
37
