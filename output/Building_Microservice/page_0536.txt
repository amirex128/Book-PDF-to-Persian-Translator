as we can. We do, though, have to recognize that some cross-cutting changes may be
unavoidable.
FinanceCo hit one such issue. When it originally started, one account was tied to one
user. As the company grew and took on more business users (being previously more
focused on consumers), this became a limitation. The company wanted to move to a
model in which a single account with FinanceCo could accommodate multiple users.
This was a fundamental change, as up until that point the assumption across the sys‐
tem had been one account = one user.
A single team had been formed to make this change happen. The problem was that a
vast amount of the work involved making changes to microservices already owned by
other teams. This meant that the team’s work was partly about making changes and
submitting pull requests, or asking other teams to make the changes happen. Coordi‐
nating these changes was very painful, as a significant number of microservices
needed to be modified to support the new functionality.
By restructuring our teams and architecture to eliminate one set of cross-cutting
changes, we may in fact expose ourselves to a different set of cross-cutting changes
that may have a more significant impact. This was the case with FinanceCo—the type
of reorganization that would be required to reduce the cost of the multiuser function‐
ality would have increased the cost of making other, more common changes. Finan‐
ceCo understood that this particular change was going to be very painful, but that it
was such an exceptional type of change that this pain was acceptable.
Delivery Bottlenecks
One key reason people move toward collective ownership, with microservices being
shared between teams, is to avoid delivery bottlenecks. What if there is a large back‐
log of changes that need to be made in a single service? Let’s return to MusicCorp,
and let’s imagine that we are rolling out the ability for a customer to see the genre of a
track across our products, as well as adding a brand new type of stock: virtual musical
ringtones for the mobile phone. The website team needs to make a change to surface
the genre information, with the mobile app team working to allow users to browse,
preview, and buy the ringtones. Both changes need to be made to the Catalog micro‐
service, but unfortunately half the team is stuck diagnosing a production failure, with
the other half out with food poisoning after a recent team outing to a pop-up food
truck being run out of an alley.
We have a few options we could consider to avoid the need for both the website and
mobile teams to share the Catalog microservice. The first is to just wait. The website
and mobile application teams move on to something else. Depending on how impor‐
tant the feature is or how long the delay is likely to be, this may be fine, or it may be a
major problem.
510 
| 
Chapter 15: Organizational Structures
