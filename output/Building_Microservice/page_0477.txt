A redesign may mean splitting apart an existing monolith, as it did for Gilt. Or it
might mean picking new data stores that can handle the load better. It could also
mean adopting new techniques, such as moving from synchronous request-response
to event-based systems, adopting new deployment platforms, changing whole tech‐
nology stacks, or everything in between.
There is a danger that people will see the need to rearchitect when certain scaling
thresholds are reached as a reason to build for massive scale from the beginning. This
can be disastrous. At the start of a new project, we often don’t know exactly what we
want to build, nor do we know if it will be successful. We need to be able to rapidly
experiment and understand what capabilities we need to build. If we tried building
for massive scale up front, we’d end up front-loading a huge amount of work to pre‐
pare for load that may never come, while diverting effort away from more important
activities, like understanding if anyone will actually want to use our product. Eric
Ries tells the story of spending six months building a product that no one ever down‐
loaded. He reflected that he could have put up a link on a web page that 404’d when
people clicked on it to see if there was any demand, spent six months on the beach
instead, and learned just as much!
The need to change our systems to deal with scale isn’t a sign of failure. It is a sign of
success.
Summary
As we can see, whatever type of scaling you’re looking for, microservices give you a
lot of different options in terms of how you approach the problem.
The scaling axes can be a useful model to use when considering what types of scaling
are available to you:
Vertical scaling
In a nutshell, this means getting a bigger machine.
Horizontal duplication
Having multiple things capable of doing the same work.
Data partitioning
Dividing work based on some attribute of the data, e.g., customer group.
Functional decomposition
Separation of work based on the type, e.g., microservice decomposition.
Key to a lot of this is understanding what it is you want—techniques that are effective
at scaling to improve latency may not be as effective in helping scale for volume.
Summary 
| 
451
