Limitations
As we explored in detail in Chapter 3, splitting apart functionality can be a complex
activity and is unlikely to deliver benefits in the short term. Of all the forms of scaling
we’ve looked at, this is the one that will likely have the biggest impact on your appli‐
cation code—on both the frontend and the backend. It can also require a significant
amount of work in the data tier if you make the choice to move to microservices as
well.
You’ll end up increasing the number of microservices you are running, which will
increase the overall complexity of the system—potentially leading to more things that
need to be maintained, made robust, and scaled. In general, when it comes to scaling
a system, I try and exhaust the other possibilities before considering functional
decomposition. My view on that may change if the shift to microservices potentially
brings with it a host of other things that the organization is looking for. In the case of
FoodCo, for example, its drive to grow its development team to both support more
countries and deliver more features is key, so a migration toward microservices offers
the company a chance to solve not only some of its system scaling issues but also its
organizational scaling issues as well.
Combining Models
One of the main drivers behind the original Scale Cube was to stop us from thinking
narrowly in terms of one type of scaling, and to help us understand that it often
makes sense to scale our application along multiple axes, depending on our need.
Let’s come back to the example outlined in Figure 13-6. We’ve extracted our Order
functionality so it can now run on its own infrastructure. As a next step, we could
scale the Order microservice in isolation by having multiple copies of it, as we see in
Figure 13-7.
Figure 13-7. The extracted Order microservice is now duplicated for scale
432 
| 
Chapter 13: Scaling
