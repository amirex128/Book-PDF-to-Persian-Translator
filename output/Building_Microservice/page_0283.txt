4 I might not have come up with this rule.
Which Deployment Option Is Right for You?
Yikes. So we have a lot of options, right? And I probably haven’t helped too much by
going out of my way to share loads of pros and cons for each approach. If you’ve got‐
ten this far, you might be a bit bewildered about what you should do.
Well, before I go any further, I really hope that it goes without say‐
ing that if what you are currently doing works for you, then keep
doing it! Don’t let fashion dictate your technical decisions.
If you think you do need to change how you deploy microservices, then let me try
and distill down much of what we’ve already discussed and come up with some useful
guidance.
Revisiting our principles of microservice deployment, one of the most important
aspects we focused on was that of ensuring isolation of our microservices. But just
using that as a guiding principle might guide us toward using dedicated physical
machines for each microservice instance! That of course would likely be very expen‐
sive, and as we’ve already discussed, there are some very powerful tools that we
wouldn’t be able to use if we went down this route.
Trade-offs abound here. Balancing cost against ease of use, isolation, familiarity…it
can become overwhelming. So let’s review a set of rules I like to call Sam’s Really
Basic Rules of Thumb for Working Out Where to Deploy Stuff:
1. If it ain’t broke, don’t fix it.4
2. Give up as much control as you feel happy with, and then give away just a little
bit more. If you can offload all your work to a good PaaS like Heroku (or a FaaS
platform), then do it and be happy. Do you really need to tinker with every last
setting?
3. Containerizing your microservices it is not pain-free, but is a really good com‐
promise around cost of isolation and has some fantastic benefits for local devel‐
opment, while still giving you a degree of control over what happens. Expect
Kubernetes in your future.
Many people are proclaiming “Kubernetes or bust!” which I feel is unhelpful. If
you’re on the public cloud, and your problem fits FaaS as a deployment model, do
that instead and skip Kubernetes. Your developers will likely end up being much
Which Deployment Option Is Right for You? 
| 
257
