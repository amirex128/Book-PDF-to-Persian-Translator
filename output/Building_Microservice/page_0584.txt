need to build your microservices accordingly. It may seem like a paranoid stance, but
I’m increasingly of the opinion that embracing this principle can actually simplify
how you view the security of your system.
Resiliency
In Chapter 12, we looked at resiliency as a whole, and I shared with you the four key
concepts that need to be considered when thinking about resiliency:
Robustness
The ability to absorb expected perturbation
Rebound
The ability to recover after a traumatic event
Graceful extensibility
How well we deal with a situation that is unexpected
Sustained adaptability
The ability to continually adapt to changing environments, stakeholders, and
demands
Taken as a whole, microservice architectures can help with some of these things
(namely robustness and rebound), but as we see from this list, that by itself doesn’t
make you resilient. Much of being resilient is about team and organizational behavior
and culture.
Fundamentally, you have to explicitly do things to make your application more
robust. Robustness isn’t free—microservices give us the option to improve the resil‐
iency of our systems, but we have to make that choice. For example, we have to
understand that any call we make to another microservice might fail, that machines
might die, and that bad things happen to good network packets. Stability patterns like
bulkheads, circuit breakers, and properly configured time-outs can help greatly.
Scaling
Microservices give us a number of different ways to scale an application. In Chap‐
ter 13, I explore the four axes of scaling, which I share below:
Vertical scaling
In a nutshell, this means getting a bigger machine.
Horizontal duplication
Having multiple things capable of doing the same work.
558 
| 
Afterword: Bringing It All Together
