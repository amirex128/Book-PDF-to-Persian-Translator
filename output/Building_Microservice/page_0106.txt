2 Pete Hodgson, “Feature Toggles (aka Feature Flags),” martinfowler.com, October 9, 2017, https://oreil.ly/
XiU2t.
The beauty of this pattern is that it can often be done without making any changes to
the underlying monolithic application. The monolith is unaware that it has even been
“wrapped” with a newer system.
Parallel Run
When switching from functionality provided by an existing tried and tested applica‐
tion architecture to a fancy new microservice-based one, there may be some nervous‐
ness, especially if the functionality being migrated is critical to your organization.
One way to make sure the new functionality is working well without risking the exist‐
ing system behavior is to make use of the parallel run pattern: running both your
monolithic implementation of the functionality and the new microservice implemen‐
tation side by side, serving the same requests, and comparing the results. We’ll
explore this pattern in more detail in “Parallel Run” on page 272.
Feature Toggle
A feature toggle is a mechanism that allows a feature to be switched off or on, or to
switch between two different implementations of some functionality. The feature tog‐
gle is a pattern that has good general applicability, but it can be especially useful as
part of a microservice migration.
As I outlined with the strangler fig application, we’ll often leave the existing function‐
ality in place in the monolith during the transition, and we’ll want the ability to
switch between versions of the functionality—the functionality in the monolith and
that in the new microservice. With the strangler fig pattern example of using an
HTTP proxy, we could implement the feature toggle in the proxy layer to allow for a
simple control to switch between implementations.
For a broader introduction to feature toggles, I recommend Pete Hodgson’s article
“Feature Toggles (aka Feature Flags).”2
80 
| 
Chapter 3: Splitting the Monolith
