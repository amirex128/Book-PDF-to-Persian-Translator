CHAPTER 16
The Evolutionary Architect
As we have seen so far, microservices give us a lot of choices, and accordingly a lot of
decisions to make. For example, how many different technologies should we use,
should we let different teams use different programming idioms, and should we split
or merge a microservice? How do we go about making these decisions? With the
faster pace of change and the more fluid environment that these architectures allow,
the role of the architect also has to change. In this chapter, I’ll take a fairly opinion‐
ated view of what the role of an architect is and hopefully launch one final assault on
the ivory tower.
What’s in a Name?
You keep using that word. I do not think it means what you think it means.
—Inigo Montoya, from The Princess Bride
Architects have an important job. They are in charge of making sure the system has a
joined-up technical vision, one that should help deliver the software that customers
need. In some places, they may have to work with only one team, in which case the
role of the architect and that of the technical lead are often one and the same. In
other places, they may be defining the vision for an entire program of work, coordi‐
nating with multiple teams across the world, or perhaps even an entire organization.
At whatever level architects operate, their role is a tricky one to pin down, and
despite it often being the obvious career progression for developers in enterprise
organizations, it is also a role that gets more criticism than virtually any other in our
field. More than any other role, architects can have a direct impact on the quality of
the systems built, on the working conditions of their colleagues, and on their organi‐
zation’s ability to respond to change, and yet their role seems very poorly understood.
Why is that?
525
