14 Although the term mob programming is more widespread, I dislike the picture this paints, preferring instead
the term ensemble, as it makes clear that we have a collection of people working together, rather than a collec‐
tion of people throwing Molotov cocktails and breaking windows. I’m not 100% sure who came up with this
renaming, but I think it was Maaret Pyhäjärvi.
review and the review actually happening, the longer and more difficult things
become.
If you submit a code change for review and don’t get feedback about that change
until several days later, you’ve likely moved on to other work. To process the feed‐
back, you’ll need to switch context and re-engage with the work you did previously.
You might agree with the reviewer’s changes (if required), in which case you can
make them and resubmit the change for approval. Worst case, you might need to
have a further discussion about the points being raised. This asynchronous back and
forth between submitter and reviewer can add days to the process of getting changes
made.
Do Code Reviews Promptly!
If you want to do code reviews and aren’t pair programming, do
the review as quickly as possible after the change is submitted, and
go through the feedback in as synchronous a way as possible, ide‐
ally face to face with the reviewer.
Ensemble programming
Ensemble programming (aka mob programming14) is sometimes discussed as a way
of doing inline code review. With ensemble programming, a larger group of people
(perhaps the whole team) work together on a change. It’s primarily about collectively
working on a problem and taking input from a large number of individuals.
Of the teams I’ve spoken to that make use of ensemble programming, most only use
it occasionally for specific, tricky problems or important changes, but a lot of devel‐
opment gets done outside the ensemble exercise as well. As such, while the ensemble
programming exercise would likely provide sufficient review of the changes being
made during the ensemble itself, and in a very synchronous manner at that, you’d
still need a way to ensure a review of changes made outside the mob.
Some would argue that you just need to do a review of high-risk changes, and there‐
fore doing reviews only as part of an ensemble is sufficient. It’s worth noting that the
authors of Accelerate surprisingly found no correlation between software delivery
performance and reviewing only high-risk changes, compared with a positive correla‐
tion when all changes are peer reviewed. So if you do want to ensemble program, go
ahead! But you might want to consider reviewing other changes made outside the
ensemble too.
Pluggable, Modular Microservices 
| 
517
