When PaaS solutions work well, they work very well indeed. However, when they
don’t quite work for you, you often don’t have much control in terms of getting
under the hood to fix things. This is part of the trade-off you make. I would say that
in my experience the smarter the PaaS solutions try to be, the more they go wrong.
I’ve used more than one PaaS that attempts to autoscale based on application use, but
does it badly. Invariably the heuristics that drive these smarts tend to be tailored for
the average application rather than your specific use case. The more nonstandard
your application, the more likely it is that it might not play nicely with a PaaS.
As the good PaaS solutions handle so much for you, they can be an excellent way of
handling the increased overhead we get with having many more moving parts. That
said, I’m still not sure that we have all the models right in this space yet, and the limi‐
ted self-hosted options mean that this approach might not work for you. When I
wrote the first edition, I was hopeful that we’d see more growth in this space, but it
hasn’t happened in the way that I expected. Instead, I think the growth of serverless
products offered primarily by the public cloud providers has started to fill this need.
Rather than offering black-box platforms for hosting an application, they instead
provide turnkey managed solutions for things like message brokers, databases, stor‐
age, and such that allow us to mix and match the parts we like to build what we need.
It is against this backdrop that Function as a Service, a specific type of serverless
product, has been getting a lot of traction.
Assessing the suitability of PaaS offerings for microservices is difficult, as they come
in many shapes and sizes. Heroku looks quite different from Netlify, for example, but
both could work for you as a deployment platform for your microservices, depending
on the nature of your application.
Function as a Service (FaaS)
In the last few years, the only technology to get even close to Kubernetes in terms of
generating hype (at least in the context of microservices) is serverless. Serverless is
actually an umbrella term for a host of different technologies where, from the point
of view of the person using them, the underlying computers don’t matter. The detail
of managing and configuring machines is taken away from you. In the words of Ken
Fromm (who as far as I can tell coined the term serverless):
The phrase “serverless” doesn’t mean servers are no longer involved. It simply means
that developers no longer have to think that much about them. Computing resources
get used as services without having to manage around physical capacities or limits. Ser‐
vice providers increasingly take on the responsibility of managing servers, data stores
and other infrastructure resources. Developers could set up their own open source sol‐
utions, but that means they have to manage the servers and the queues and the loads.
—Ken Fromm, “Why the Future of Software and Apps Is Serverless”
Deployment Options 
| 
249
