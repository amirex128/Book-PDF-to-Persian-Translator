container
A package of code and dependencies that
can be run in an isolated way on a
machine. Conceptually similar to virtual
machines, although much more light‐
weight.
continuous delivery (CD)
A delivery approach in which you explic‐
itly model the path to production, treat
every check-in as a release candidate, and
can easily assess the suitability of any
release candidate to be deployed into pro‐
duction.
continuous deployment
An approach wherein any build that
passes all automated steps is automatically
deployed into production.
continuous integration (CI)
The regular (daily) integration of changes
with the rest of the codebase, along with a
suite of tests to validate that the integra‐
tion has worked.
Conway’s law
The observation that the communication
structures of organizations end up driving
the design of the computer systems that
these organizations build.
coupling
The extent to which changing one part of
the system requires a change in another.
Low coupling is normally desirable.
cross-functional requirement (CFR)
A general property of the system, such as
the required latency for operations, secu‐
rity of data at rest, etc. Also known as
nonfunctional requirement (but I greatly
prefer cross-functional as a description).
customizable off the shelf software (COTS)
Third-party software that is heavily cus‐
tomized by the end user and is also nor‐
mally run on their own infrastructure.
Typical examples include content man‐
agement systems and customer relation‐
ship management platforms.
data partitioning
Scaling a system by distributing load
based on some facet of the data. For
example splitting load based on customer
or product type.
detective controls
A security control that will help you iden‐
tify if an attack is underway/has hap‐
pened.
domain coupling
A form of coupling where one microser‐
vice is “coupled” to the domain protocol
exposed by another microservice.
domain-driven design (DDD)
A concept whereby the fundamental
problem/business domain is explicitly
modeled in the software.
Docker
A set of tooling to help build and manage
containers.
enabling team
A team that supports stream-aligned
teams in doing their job. Typically, an
enabling team has a specific focus—e.g.,
usability, architecture, security.
error budget
Relates to the acceptable level to which an
SLO can be out of bound, typically
defined in an acceptable degree of down‐
time for a service.
event
Something that happens in the system
that other parts of the system might care
about—for example “Order Placed” or
“User Logs In.”
feature branching
Creating a new branch for each feature
that is being worked on, merging that
branch back into mainline once the fea‐
ture is complete. Something I discourage.
Function as a Service (FaaS)
A type of serverless platform that invokes
arbitary code based on certain types of
triggers—for example, launching code in
container
570 
| 
Glossary
