We want to make a simple update to our functionality: we want to allow our custom‐
ers to specify their favorite genre of music. This update requires us to change the UI
to show the genre choice UI, the backend service to allow for the genre to be surfaced
to the UI and for the value to be changed, and the database to accept this change.
These changes will need to be managed by each team and deployed in the correct
order, as outlined in Figure 1-3.
Figure 1-3. Making a change across all three tiers is more involved
Now this architecture isn’t bad. All architecture ends up getting optimized around a
set of goals. Three-tiered architecture is so common partly because it is universal—
everyone has heard about it. So the tendency to pick a common architecture that you
might have seen elsewhere is often one reason we keep seeing this pattern. But I think
the biggest reason we see this architecture again and again is because it is based on
how we organize our teams.
The now famous Conway’s law states the following:
Organizations which design systems...are constrained to produce designs which are
copies of the communication structures of these organizations.
—Melvin Conway, “How Do Committees Invent?”
The three-tiered architecture is a good example of this law in action. In the past, the
primary way IT organizations grouped people was in terms of their core competency:
Key Concepts of Microservices 
| 
11
