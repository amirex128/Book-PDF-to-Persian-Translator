6 Edward Yourdon and Larry L. Constantine, Structured Design (New York: Yourdon Press, 1976).
7 Meilir Page-Jones, The Practical Guide to Structured Systems Design (New York: Yourdon Press Computing,
1980).
A lot of work has been done to look at the different forms of coupling in the context
of structured programming, which was largely considering modular (non-
distributed, monolithic) software. Many of these different models for assessing cou‐
pling overlap or clash, and in any case they speak primarily about things at the code
level, rather than considering service-based interactions. As microservices are a style
of modular architecture (albeit with the added complexity of distributed systems), we
can use a lot of these original concepts and apply them in the context of our
microservice-based systems.
Prior Art in Structured Programming
Much of our work in computing involves building on the work that came before. It is
sometimes impossible to recognize everything that came before, but with this second
edition I have aimed to highlight prior art where I can—partly to give credit where
credit is due, partly as a way of ensuring that I lay down some breadcrumbs for those
readers who want to explore certain topics in more detail, but also to show that many
of these ideas are tried and tested.
When it comes to building on the work that came before, there are few subject areas
in this book that have quite as much prior art as structured programming. I’ve
already mentioned Larry Constantine; his book with Edward Yourdon, Structured
Design,6 is considered one of the most important texts in this area. Meilir Page-
Jones’s The Practical Guide to Structured Systems Design7 is also useful. Unfortu‐
nately, one thing these books have in common is how hard they can be to get hold of,
as they are out of print and aren’t available in ebook format. Yet another reason to
support your local library!
Not all the ideas map cleanly, so I have done my best to synthesize a working model
for the different types of coupling for microservices. Where these ideas map cleanly
to previous definitions, I’ve stuck with those terms. In other places I have had to
come up with new terms or blend in ideas from elsewhere. So please consider what
follows to be built on top of a lot of prior art in this space, which I am attempting to
give more meaning in the context of microservices.
In Figure 2-1 we see a brief overview of the different types of coupling, organized
from low (desirable) to high (undesirable).
Next, we’ll examine each form of coupling in turn, and look at examples that show
how these forms may manifest themselves in our microservice architecture.
40 
| 
Chapter 2: How to Model Microservices
