supporting services, and our people to consider what might go wrong. But robustness
can also come from hindsight—we may improve the robustness of our system after
something we didn’t expect happens. Perhaps we never considered the fact that our
global filesystem could become unavailable, or perhaps we underestimated the
impact of our customer service representatives not being available outside working
hours.
One of the challenges around improving the robustness of our system is that as we
increase the robustness of our application, we introduce more complexity to our sys‐
tem, which can be the source of new issues. Let’s say you’re moving your microser‐
vice architecture to Kubernetes, because you want it to handle desired state
management for your microservice workloads. You may have improved some aspects
of the robustness of your application as a result, but you’ve also introduced new
potential pain points as well. As such, any attempt to improve the robustness of an
application has to be considered, not just in terms of a simple cost/benefit analysis
but also in terms of whether or not you’re happy with the more complex system
you’ll have as a result of this.
Robustness is one area in which microservices give you a host of options, and much
of what follows in this chapter will focus on what you can do in your software to
improve the system’s robustness. Just remember that not only is this only one facet of
resiliency as a whole, but there is also a host of other nonsoftware-related robustness
you might need to consider.
Rebound
How well we recover—rebound—from disruption is a key part of building a resilient
system. All too often I see people focusing their time and energy on trying to elimi‐
nate the possibility of an outage, only to be totally unprepared once an outage
actually occurs. By all means, do your best to protect against the bad things that you
think might happen—improving your system’s robustness—but also understand that
as your system grows in scale and complexity, eliminating any potential problem
becomes unsustainable.
We can improve our ability to rebound from an incident by putting things into place
in advance. For example, having backups in place can allow us to better rebound in
the aftermath of data loss (assuming our backups are tested, of course!). Improving
our ability to rebound could also include having a playbook we can run through in
the wake of a system outage: Do people understand what their role is when an outage
occurs? Who will be the point person for handling the situation? How quickly do we
need to let our users know what is happening? How will we communicate with our
users? Trying to think clearly about how to handle an outage while the outage is
going on will be problematic due to the inherent stress and chaos of the situation.
What Is Resiliency? 
| 
389
