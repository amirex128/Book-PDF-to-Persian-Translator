something that could be entered into lightly, and if it turned out that having a bigger
machine didn’t solve your problems, then you had likely spent a bunch of money you
didn’t need to. In addition, it was typical to oversize the machine you needed due to
the hassle of getting budgetary sign-offs, waiting for the machine to arrive and so on,
which in turn led to significant unused capacity in data centers.
The move to virtualization and the emergence of the public cloud have helped
immensely with this form of scaling, though.
Implementation
Implementation will vary depending on whose infrastructure you are running on. If
running on your own virtualized infrastructure, you may be able to just resize the
VM to use more of the underlying hardware—this is something that should be quick
and fairly risk-free to implement. If the VM is as big as the underlying hardware can
handle, this option is of course a nonstarter—you may have to buy more hardware.
Likewise, if you’re running on your own bare metal servers and don’t have any spare
hardware lying around that is bigger than what you are currently running on, then
again, you’re looking at having to buy more machines.
In general, if I’ve gotten to the point where I’d have to purchase new infrastructure to
try out vertical scaling, due to the increased cost (and time) for this to have an impact
I might well skip this form of scaling for the moment and look instead at horizontal
duplication, which we’ll come to next.
But the emergence of the public cloud has also allowed us to easily rent, on a per-
hour basis (and in some cases on an even shorter-term basis), fully managed
machines through public cloud vendors. Moreover, the main cloud providers offer a
wider variety of machines for different types of problems. Is your workload more
memory intensive? Treat yourself to an AWS u-24tb1.metal instance, which pro‐
vides 24 TB of memory (yes, you read that right). Now, the number of workloads that
might actually need this much memory seem pretty rare, but you have that option.
You also have machines tailored to high I/O, CPU, or GPU uses as well. If your exist‐
ing solution is already on the public cloud, this is such a trivial form of scaling to try
that if you’re after a quick win, it’s a bit of a no-brainer.
Key benefits
On virtualized infrastructure, especially on a public cloud provider, implementing
this form of scaling will be fast. A lot of the work around scaling applications comes
down to experimentation—having an idea about something that can improve your
system, making the change, and measuring the impact. Activities that are quick and
fairly risk-free to try out are always worth doing early on. And vertical scaling fits the
bill here.
The Four Axes of Scaling 
| 
421
