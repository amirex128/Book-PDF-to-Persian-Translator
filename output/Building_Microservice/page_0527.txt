operations teams to get things deployed, no external parties sign off on changes, and
the team decides what changes are to be made and when to ship.
For many of you, such a model may be fanciful, as you already have a number of
existing procedures in place regarding how things must be done. You may also not
have the right skills in the team to take on full ownership, or you may require new
tooling (for example, self-service deployment mechanisms). It’s worth noting, of
course, that you don’t get to full life-cycle ownership overnight, even if you consider
it to be an aspirational goal. Don’t be surprised if this change can take years to fully
embrace, especially with a larger organization. Many aspects of full life-cycle owner‐
ship can require cultural changes and significant adjustments in terms of the expecta‐
tions you have of some of your people, such as the need to support their software
outside office hours. But as you can pull more responsibility for aspects of your
microservice into your team, you will further increase the autonomy you have.
I don’t want to suggest that this model is in any way essential to using microservices
—I am a firm believer that strong ownership for multiteam organizations is the most
sensible model to get the most out of microservices. A strong ownership model
around code changes is a good place to start—you can work to move toward full life-
cycle ownership over time.
Collective Ownership
With a collective ownership model, a microservice can be changed by any one of a
number of teams. One of the main benefits of collective ownership is that you can
move people where they are needed. This can be useful if your bottleneck in terms of
delivery is caused by a lack of people. For example, several changes require some
updates to be made to the Payment microservice to allow for automated monthly bill‐
ing—you could just assign extra people to implement this change. Of course, throw‐
ing people at a problem doesn’t always make you go faster, but with collective
ownership you certainly do have more flexibility in this regard.
With teams—and people—moving more frequently from microservice to microser‐
vice, we require a higher degree of consistency about how things are done. You can’t
afford a broad range of technology choices or different types of deployment models if
you expect a developer to work on a different microservice each week. To get any
degree of effectiveness out of a collective ownership model with microservices, you
will end up needing to ensure that working on one microservice is much the same as
working on any other.
Inherently, this can undermine one of the key benefits of microservices. Coming back
to a quote we used at the start of the book, James Lewis has said that “microservices
buy you options.” With a more collective ownership model, you are likely going to
need to reduce options in order to introduce a stronger degree of consistency across
what teams do and how microservices are implemented.
Strong Versus Collective Ownership 
| 
501
