they are planning to help work with the overall strategy. In the worst cases, the issue
might need to be escalated.
At REA, the online real-estate company I’ve talked about in a few earlier chapters,
product owners would occasionally make decisions to prioritize work in such a way
that it caused technical debt to build up, leading to subsequent problems. The issue
was that the product owners were primarily held to account in regard to their ability
to deliver features and make customers happy—whereas often the issues around
technical debt were laid at the feet of the technical leaders. A shift was made to make
the product owners also responsible for aspects of the software that were technical in
nature—this meant that they had to take a more active role in understanding the
more technical aspects of the system (security or performance, for example) and
work more collaboratively with the technical experts in terms of prioritizing work to
be done. The act of making nontechnical product owners more accountable for pri‐
oritization around technical activities is nontrivial, but it is absolutely worth it in my
experience.
Building a Team
Being the main point person for the technical vision of your system and ensuring that
you’re executing on this vision isn’t just about making sure the right technology deci‐
sions get made. It’s the people you work with who will be doing the work. It is the
role of any technical leader to help these people grow—to help them be part of creat‐
ing that vision—and to ensure that they can be active participants in shaping and
implementing the vision too.
Helping the people around you with their own career growth can take many forms,
most of which are outside the scope of this book. There is one aspect, though, in
which a microservice architecture is especially relevant. With larger, monolithic sys‐
tems, there are fewer opportunities for people to step up and “own” something. With
microservices, on the other hand, we have multiple autonomous codebases that will
have their own independent life cycles. Helping people step up by having them take
ownership of individual microservices before accepting more responsibility can be a
great way to help them achieve their own career goals, and at the same time it light‐
ens the load on whomever is in charge!
I am a strong believer that great software comes from great people. If you worry only
about the technology side of the equation, you’re missing way more than half the
picture.
542 
| 
Chapter 16: The Evolutionary Architect
