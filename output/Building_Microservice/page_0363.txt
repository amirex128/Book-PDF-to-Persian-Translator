Canary release
A small portion of your user base gets to see the new release of functionality. If this
new functionality works well, you can increase the portion of your user base that sees
the new functionality to the point that the new version of the functionality is now
used by all users. On the other hand, if the new functionality doesn’t work as
intended, you’ve impacted only a small portion of your user base and can either
revert the change or try to fix whatever problem you have identified.
Parallel run
With a parallel run, you execute two different equivalent implementations of the
same functionality side by side. Any user request is routed to both versions, and their
results can be compared. So instead of directing a user to either the old or the new
version, as in a canary release we execute both versions—but the user sees only one.
This allows for a full comparison between the two different versions, which is incred‐
ibly useful when we want a better understanding of aspects like the load characteris‐
tics of a new implementation of some key functionality.
Smoke tests
Used after the software is deployed into production but before it is released, smoke
tests are run against the software to make sure it is working appropriately. These tests
are normally fully automated and can range from very simple activities like making
sure a given microservice is up and running to actually executing full-blown synthetic
transactions.
Synthetic transactions
A full-blown, fake user interaction is injected into the system. It’s often very close to
the sort of end-to-end test you might write.
Chaos engineering
A topic we’ll discuss more in Chapter 12, chaos engineering can involve injection of
faults into a production system to ensure that it is able to handle these expected
issues. The best-known example of this technique is probably Netflix’s Chaos Mon‐
key, which is able to turn off virtual machines in production, with the expectation
that the system is robust enough that these shutdowns don’t interrupt the end-user
functionality.
Standardization
As we’ve covered previously, one of the ongoing balancing acts you’ll need to pull off
is where to allow for decisions to be made narrowly for a single microservice versus
where you need to standardize across your system. In my opinion, monitoring and
Standardization 
| 
337
