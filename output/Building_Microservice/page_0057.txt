acceptable for these operations. Sometimes making an operation slower is perfectly
acceptable, as long as it is still fast enough!
Data Consistency
Shifting from a monolithic system, in which data is stored and managed in a single
database, to a much more distributed system, in which multiple processes manage
state in different databases, causes potential challenges with respect to consistency of
data. Whereas in the past you might have relied on database transactions to manage
state changes, you’ll need to understand that similar safety cannot easily be provided
in a distributed system. The use of distributed transactions in most cases proves to be
highly problematic in coordinating state changes.
Instead, you might need to start using concepts like sagas (something I’ll detail at
length in Chapter 6) and eventual consistency to manage and reason about state in
your system. These ideas can require fundamental changes in the way you think
about data in your systems, something that can be quite daunting when migrating
existing systems. Yet again, this is another good reason to be cautious in how quickly
you decompose your application. Adopting an incremental approach to decomposi‐
tion, so that you are able to assess the impact of changes to your architecture in pro‐
duction, is really important.
Should I Use Microservices?
Despite the drive in some quarters to make microservice architectures the default
approach for software, I feel that because of the numerous challenges I’ve outlined,
adopting them still requires careful thought. You need to assess your own problem
space, skills, and technology landscape and understand what you are trying to achieve
before deciding whether microservices are right for you. They are an architectural
approach, not the architectural approach. Your own context should play a huge part
in your decision whether to go down that path.
That said, I want to outline a few situations that would typically tip me away from—
or toward—picking microservices.
Whom They Might Not Work For
Given the importance of defining stable service boundaries, I feel that microservice
architectures are often a bad choice for brand-new products or startups. In either
case, the domain that you are working with is typically undergoing significant change
as you iterate on the fundamentals of what you are trying to build. This shift in
domain models will, in turn, result in more changes being made to service bound‐
aries, and coordinating changes across service boundaries is an expensive
Should I Use Microservices? 
| 
31
