Here, MedicalCo has given itself the flexibility to vary its approach in each zone. The
less secure public zone can operate in something closer to an implicit trust environ‐
ment, whereas the secret zone assumes zero trust. Arguably, if MedicalCo were to
adopt a zero-trust approach across its entire system, having microservices deployed
into separate zones wouldn’t be required, as all inter-microservice calls would require
additional authentication and authorization. That said, thinking of defense in depth
once again, I can’t help thinking I’d still consider this zoned approach given the sen‐
sitivity of the data!
Securing Data
As we break our monolithic software apart into microservices, our data moves
around our systems more than before. It doesn’t just flow over networks; it also sits
on disk. Having more valuable data spread around more places can be a nightmare
when it comes to securing our application, if we aren’t careful. Let’s look in more
detail at how we can protect our data as it moves over networks, and as it sits at rest.
Data in Transit
The nature of the protections you have will depend largely on the nature of the com‐
munication protocols you have picked. If you are using HTTP, for example, it would
be natural to look at using HTTP with Transport Layer Security (TLS), a topic we’ll
expand on more in the next section; but if you’re using alternative protocols such as
communication via a message broker, you may have to look at that particular tech‐
nology’s support for protecting data in transit. Rather than look at the details of a
large range of technology in this space, I think instead it is important to consider
more generically the four main areas of interest when it comes to securing data in
transit, and to look at how these concerns could be addressed with HTTP as an
example. Hopefully, it shouldn’t be too difficult for you to map these ideas to what‐
ever communication protocol you are picking.
In Figure 11-6 we can see the four key concerns of data in transit.
Securing Data 
| 
369
