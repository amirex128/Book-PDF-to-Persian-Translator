increase in the development and distribution of open source software. Though open
source is only tangentially related to the development of patterns for distributed sys‐
tems, it is important in the sense that it was through the open source communities
that it became increasingly clear that software development in general and distributed
systems development in particular are community endeavors. It is important to note
that all of the container technology that forms the foundation of the patterns
described in this book has been developed and released as open source software. The
value of patterns for both describing and improving the practice of distributed devel‐
opment is especially clear when you look at it from this community perspective.
What is a pattern for a distributed system? There are plenty of
instructions out there that will tell you how to install specific dis‐
tributed systems (such as a NoSQL database). Likewise, there are
recipes for a specific collection of systems (like a MEAN stack). But
when I speak of patterns, I’m referring to general blueprints for
organizing distributed systems, without mandating any specific
technology or application choices. The purpose of a pattern is to
provide general advice or structure to guide your design. The hope
is that such patterns will guide your thinking and also be generally
applicable to a wide variety of applications and environments.
The Value of Patterns, Practices, and Components
Before spending any of your valuable time reading about a series of patterns that I
claim will improve your development practices, teach you new skills, and—let’s face it
—change your life, it’s reasonable to ask: “Why?” What is it about the design patterns
and practices that can change the way that we design and build software? In this sec‐
tion, I’ll lay out the reasons I think this is an important topic, and hopefully convince
you to stick with me for the rest of the book.
Standing on the Shoulders of Giants
As a starting point, the value that patterns for distributed systems offer is the oppor‐
tunity to figuratively stand on the shoulders of giants. It’s rarely the case that the
problems we solve or the systems we build are truly unique. Ultimately, the combina‐
tion of pieces that we put together and the overall business model that the software
enables may be something that the world has never seen before. But the way the sys‐
tem is built and the problems it encounters as it aspires to be reliable, agile, and scala‐
ble are not new.
This, then, is the first value of patterns: they allow us to learn from the mistakes of
others. Perhaps you have never built a distributed system before, or perhaps you have
never built this type of distributed system. Rather than hoping that a colleague has
some experience in this area or learning by making the same mistakes that others
4 
| 
Chapter 1: Introduction
