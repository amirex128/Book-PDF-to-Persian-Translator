CHAPTER 4
Adapters
In the preceding chapters, we saw how the sidecar pattern can extend and augment
existing application containers. We also saw how ambassadors can alter and broker
how an application container communicates with the external world. This chapter
describes the final single-node pattern: the adapter pattern. In the adapter pattern, the
adapter container is used to modify the interface of the application container so that it
conforms to some predefined interface that is expected of all applications. For exam‐
ple, an adapter might ensure that an application implements a consistent monitoring
interface. Or it might ensure that log files are always written to stdout or any number
of other conventions.
Real-world application development is a heterogeneous, hybrid exercise. Some parts
of your application might be written from scratch by your team, some supplied by
vendors, and some might consist entirely of off-the-shelf open source or proprietary
software that you consume as precompiled binary. The net effect of this heterogeneity
is that any real-world application you deploy will have been written in a variety of
languages, with a variety of conventions for logging, monitoring, and other common
services.
Yet, to effectively monitor and operate your application, you need common inter‐
faces. When each application provides metrics using a different format and interface,
it is very difficult to collect all of those metrics in a single place for visualization and
alerting. This is where the adapter pattern is relevant. Like other single-node patterns,
the adapter pattern is made up of modular containers. Different application contain‐
ers can present many different monitoring interfaces while the adapter container
adapts this heterogeneity to present a consistent interface. This enables you to deploy
a single tool that expects this single interface. Figure 4-1 illustrates this general pat‐
tern.
31
