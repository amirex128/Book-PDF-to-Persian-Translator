Figure II-1. A monolithic service with all functions in a single container
Figure II-2. A microservice architecture with each function broken out as a separate
microservice
There are numerous benefits to the microservices approach, most of them are cen‐
tered around reliability and agility. Microservices break down an application into
small pieces, each focused on providing a single service. This reduced scope enables
each service to be built and maintained by a single “two pizza” team. Reduced team
size also reduces the overhead associated with keeping a team focused and moving in
one direction.
Additionally, the introduction of formal APIs in between different microservices
decouples the teams from one another and provides a reliable contract between the
different services. This formal contract reduces the need for tight synchronization
among the teams because the team providing the API understands the surface area
that it needs to keep stable, and the team consuming the API can rely on a stable ser‐
vice without worrying about its details. This decoupling enables teams to independ‐
ently manage their code and release schedules, which in turn improves each team’s
ability to iterate and improve their code.
Finally, the decoupling of microservices enables better scaling. Because each compo‐
nent has been broken out into its own service, it can be scaled independently. It is
rare for each service within a larger application to grow at the same rate, or have the
