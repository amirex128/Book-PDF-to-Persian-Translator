effort. Code for operating systems, printer drivers, distributed databases, container
runtimes, and container orchestrators—indeed, the entirety of applications that we
build today are built with reusable shared libraries and components.
Patterns are the basis for the definition and development of such reusable compo‐
nents. The formalization of algorithms led to reusable implementations of sorting
and other canonical algorithms. The identification of interface-based patterns gave
rise to a collection of generic, object-oriented libraries implementing those patterns.
Identifying core patterns for distributed systems enables us to to build shared com‐
mon components. Implementing these patterns as container images with HTTP-
based interfaces means they can be reused across many different programming
languages. And, of course, building reusable components improves the quality of
each component because the shared code base gets sufficient usage to identify bugs
and weaknesses, and sufficient attention to ensure that they get fixed.
Summary
Distributed systems are required to implement the level of reliability, agility, and scale
expected of modern computer programs. Distributed system design continues to be
more of a black art practiced by wizards than a science applied by laypeople. The
identification of common patterns and practices has regularized and improved the
practice of algorithmic development and object-oriented programming. It is this
book’s goal to do the same for distributed systems. Enjoy!
6 
| 
Chapter 1: Introduction
