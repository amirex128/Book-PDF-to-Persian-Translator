Hands On: Deploying an Ambassador and Memcache for a Sharded
Cache
In Chapter 3 we saw how to deploy a sharded Redis service. Deploying a sharded
memcache is similar.
First, we will deploy memcache as a Kubernetes StatefulSet:
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: sharded-memcache
spec:
  serviceName: "memcache"
  replicas: 3
  template:
    metadata:
      labels:
        app: memcache
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: memcache
        image: memcached
        ports:
        - containerPort: 11211
          name: memcache
Save this to a file named memcached-shards.yaml and you can deploy this with
kubectl create -f memecached-shards.yaml. This will create three containers run‚Äê
ning memcached.
As with the sharded Redis example, we also need to create a Kubernetes Service that
will create DNS names for the replicas we have created. The service looks like this:
apiVersion: v1
kind: Service
metadata:
  name: memcache
  labels:
    app: memcache
spec:
  ports:
  - port: 11211
    name: memcache
  clusterIP: None
  selector:
    app: memecache
Save this to a file named memcached-service.yaml and deploy it with kubectl create
-f 
memcached-service.yaml. 
You 
should 
now 
have 
DNS 
entries 
for
Sharded Caching 
| 
63
