same way of scaling. Some systems are stateless and can simply scale horizontally,
whereas other systems maintain state and require sharding or other approaches to
scale. By separating each service out, each service can use the approach to scaling that
suits it best. This is not possible when all services are part of a single monolith.
But of course there are downsides to the microservices approach to system design as
well. The two foremost disadvantages are that because the system has become more
loosely coupled, debugging the system when failures occur is significantly more diffi‐
cult. You can no longer simply load a single application into a debugger and deter‐
mine what went wrong. Any errors are the byproducts of a large number of systems
often running on different machines. This environment is quite challenging to repro‐
duce in a debugger. As a corollary, microservices-based systems are also difficult to
design and architect. A microservices-based system uses multiple methods of com‐
municating between services; different patterns (e.g., synchronous, asynchronous,
message-passing, etc.); and multiple different patterns of coordination and control
among the services.
These challenges are the motivation for distributed patterns. If a microservices archi‐
tecture is made up of well-known patterns, then it is easier to design because many of
the design practices are specified by the patterns. Additionally, patterns make the sys‐
tems easier to debug because they enable developers to apply lessons learned across a
number of different systems that use the same patterns.
With that in mind, this section introduces a number of multi-node patterns for build‐
ing distributed systems. These patterns are not mutually exclusive. Any real-world
system will be built from a collection of these patterns working together to produce a
single higher-level application.
