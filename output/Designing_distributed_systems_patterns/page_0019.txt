have already made, you can turn to patterns as your guide. Learning about patterns
for distributed system development is the same as learning about any other best prac‐
tice in computer programming. It accelerates your ability to build software without
requiring that you have direct experience with the systems, mistakes, and firsthand
learning that led to the codification of the pattern in the first place.
A Shared Language for Discussing Our Practice
Learning about and accelerating our understanding of distributed systems is only the
first value of having a shared set of patterns. Patterns have value even for experienced
distributed system developers who already understand them well. Patterns provide a
shared vocabulary that enables us to understand each other quickly. This understand‐
ing forms the basis for knowledge sharing and further learning.
To better understand this, imagine that we both are using the same object to build
our house. I call that object a “Foo” while you call that object a “Bar.” How long will
we spend arguing about the value of a Foo versus that of a Bar, or trying to explain
the differing properties of Foo and Bar until we figure out that we’re speaking about
the same object? Only once we determine that Foo and Bar are the same can we truly
start learning from each other’s experience.
Without a common vocabulary, we waste time in arguments of “violent agreement”
or in explaining concepts that others understand but know by another name. Conse‐
quently, another significant value of patterns is to provide a common set of names
and definitions so that we don’t waste time worrying about naming, and instead get
right down to discussing the details and implementation of the core concepts.
I have seen this happen in my short time working on containers. Along the way, the
notion of a sidecar container (described in Chapter 2 of this book) took hold within
the container community. Because of this, we no longer have to spend time defining
what it means to be a sidecar and can instead jump immediately to how the concept
can be used to solve a particular problem. “If we just use a sidecar” … “Yeah, and I
know just the container we can use for that.” This example leads to the third value of
patterns: the construction of reusable components.
Shared Components for Easy Reuse
Beyond enabling people to learn from others and providing a shared vocabulary for
discussing the art of building systems, patterns provide another important tool for
computer programming: the ability to identify common components that can be
implemented once.
If we had to create all of the code that our programs use ourselves, we would never
get done. Indeed, we would barely get started. Today, every system ever written
stands on the shoulders of thousands if not hundreds of thousands of years of human
The Value of Patterns, Practices, and Components 
| 
5
