Figure 11-3. An example of a filter pattern that removes all odd-numbered work items
Splitter
Sometimes you don’t want to just filter things out by dropping them on the floor, but
rather you have two different kinds of input present in your set of work items and
you want to divide them into two separate work queues without dropping any of
them. For this task, you want to use a splitter. The role of a splitter is to evaluate some
criteria—just like a filter—but instead of eliminating input, the splitter sends different
inputs to different queues based on that criteria.
An example of an application of the splitter pattern is processing online orders where
people can receive shipping notifications either by email or text message. Given a
work queue of items that have been shipped, the splitter divides it into two different
queues: one that is responsible for sending emails and another devoted to sending
text messages. A splitter can also be a copier if it sends the same output to multiple
queues, such as when a user selects both text messages and email notifications in the
previous example. It is interesting to note that a splitter can actually also be imple‐
mented by a copier and two different filters. But the splitter pattern is a more com‐
pact representation that captures the job of the splitter more succinctly. An example
of using the splitter pattern to send shipping notifications to users is shown in
Figure 11-4.
124 
| 
Chapter 11: Event-Driven Batch Processing
