PART II
Serving Patterns
The previous chapter described patterns for grouping collections of containers that
are scheduled on the same machine. These groups are tightly coupled, symbiotic sys‐
tems. They depend on local, shared resources like disk, network interface, or inter-
process communications. Such collections of containers are important patterns, but
they are also building blocks for larger systems. Reliability, scalability, and separation
of concerns dictate that real-world systems are built out of many different compo‐
nents, spread across multiple machines. In contrast to single-node patterns, the
multi-node distributed patterns are more loosely coupled. While the patterns dictate
patterns of communication between the components, this communication is based on
network calls. Furthermore, many calls are issued in parallel, and systems coordinate
via loose synchronization rather than tight constraints.
Introduction to Microservices
Recently, the term microservices has become a buzzword for describing multi-node
distributed software architectures. Microservices describe a system built out of many
different components running in different processes and communicating over
defined APIs. Microservices stand in contrast to monolithic systems, which tend to
place all of the functionality for a service within a single, tightly coordinated applica‐
tion. These two different architectural approaches are shown in Figures II-1 and II-2.
