Obviously this script could be more complex, pulling from a specific branch instead
of simply from HEAD. It is left purposefully simple to improve the readability of this
example.
The Node.js application and Git synchronization sidecar are coscheduled and
deployed together to implement our simple PaaS (Figure 2-4). Once deployed, every
time new code is pushed to a Git repository, the code is automatically updated by the
sidecar and reloaded by the server.
Figure 2-4. A simple sidecar-based PaaS
Designing Sidecars for Modularity and Reusability
In all of the examples of sidecars that we have detailed throughout this chapter, one of
the most important themes is that every one was a modular, reusable artifact. To be
successful, the sidecar should be reusable across a wide variety of applications and
deployments. By achieving modular reuse, sidecars can dramatically speed up the
building of your application.
However, this modularity and reusability, just like achieving modularity in high-
quality software development requires focus and discipline. In particular, you need to
focus on developing three areas:
• Parameterizing your containers
• Creating the API surface of your container
• Documenting the operation of your container
16 
| 
Chapter 2: The Sidecar Pattern
