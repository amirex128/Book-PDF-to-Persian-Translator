CHAPTER 8
Functions and Event-Driven Processing
So far, we have examined design for systems with long-running computation. The
servers that handle user requests are always up and running. This pattern is the right
one for many applications that are under heavy load, keep a large amount of data in
memory, or require some sort of background processing. However, there is a class of
applications that might only need to temporarily come into existence to handle a sin‐
gle request, or simply need to respond to a specific event. This style of request or
event-driven application design has flourished recently as large-scale public cloud
providers have developed function-as-a-service (FaaS) products. More recently, FaaS
implementations have also emerged running on top of cluster orchestrators in private
cloud or physical environments. This chapter describes emerging architectures for
this new style of computing. In many cases, FaaS is a component in a broader archi‐
tecture rather than a complete solution.
Oftentimes, FaaS is referred to as serverless computing. And while
this is true (you don’t see the servers in FaaS) it’s worth differentiat‐
ing between event-driven FaaS and the broader notion of serverless
computing. Indeed, serverless computing can apply to a wide vari‐
ety of computing services; for example, a multi-tenant container
orchestrator (container-as-a-service) is serverless but not event-
driven. Conversely, an open source FaaS running on a cluster of
physical machines that you own and administer is event-driven but
not serverless. Understanding this distinction enables you to deter‐
mine when event-driven, serverless, or both is the right choice for
your application.
81
