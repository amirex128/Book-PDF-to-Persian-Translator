one program at a time to running multiple programs on a single machine via time-
sharing operating systems, but these machines were still disjoint from each other.
Gradually, machines came to be networked together, and client-server architectures
were born so that a relatively low-powered machine on someone’s desk could be used
to harness the greater power of a mainframe in another room or building. While this
sort of client-server programming was somewhat more complicated than writing a
program for a single machine, it was still fairly straightforward to understand. The
client(s) made requests; the server(s) serviced those requests.
In the early 2000s, the rise of the internet and large-scale datacenters consisting of
thousands of relatively low-cost commodity computers networked together gave rise
to the widespread development of distributed systems. Unlike client-server architec‐
tures, distributed system applications are made up of multiple different applications
running on different machines, or many replicas running across different machines,
all communicating together to implement a system like web-search or a retail sales
platform.
Because of their distributed nature, when structured properly, distributed systems are
inherently more reliable. And when architected correctly, they can lead to much more
scalable organizational models for the teams of software engineers that built these
systems. Unfortunately, these advantages come at a cost. These distributed systems
can be significantly more complicated to design, build, and debug correctly. The engi‐
neering skills needed to build a reliable distributed system are significantly higher
than those needed to build single-machine applications like mobile or web frontends.
Regardless, the need for reliable distributed systems only continues to grow. Thus
there is a corresponding need for the tools, patterns, and practices for building them.
Fortunately, technology has also increased the ease with which you can build dis‐
tributed systems. Containers, container images, and container orchestrators have all
become popular in recent years because they are the foundation and building blocks
for reliable distributed systems. Using containers and container orchestration as a
foundation, we can establish a collection of patterns and reusable components. These
patterns and components are a toolkit that we can use to build our systems more reli‐
ably and efficiently.
A Brief History of Patterns in Software Development
This is not the first time such a transformation has occurred in the software industry.
For a better context on how patterns, practices, and reusable components have previ‐
ously reshaped systems development, it is helpful to look at past moments when simi‐
lar transformations have taken place.
2 
| 
Chapter 1: Introduction
