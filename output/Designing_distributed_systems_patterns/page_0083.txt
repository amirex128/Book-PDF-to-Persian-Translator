tainer orchestrator, but consider the effect of changing the scaling function from
hash(Req) % 10 to hash(Req) % 11. When you deploy this new scaling function, a
large number of requests are going to be mapped to a different shard than the one
they were previously mapped to. In a sharded cache, this is going to dramatically
increase your miss rate until the cache is repopulated with responses for the new
requests that have been mapped to that cache shard by the new sharding function. In
the worst case, rolling out a new sharding function for your sharded cache will be
equivalent to a complete cache failure.
To resolve these kinds of problems, many sharding functions use consistent hashing
functions. Consistent hashing functions are special hash functions that are guaranteed
to only remap # keys / # shards, when being resized to # shards. For example, if we use
a consistent hashing function for our sharded cache, moving from 10 to 11 shards
will only result in remapping < 10% (K / 11) keys. This is dramatically better than
losing the entire sharded service.
Hands On: Building a Consistent HTTP Sharding Proxy
To shard HTTP requests, the first question to answer is what to use as the key for the
sharding function. Though there are several options, a good general-purpose key is
the request path as well as the fragment and query parameters (i.e., everything that
makes the request unique). Note that this does not include cookies from the user or
the language/location (e.g., EN_US). If your service provides extensive customization
to users or their location, you will need to include them in the hash key as well.
We can use the versatile nginx HTTP server for our sharding proxy.
worker_processes  5;
error_log  error.log;
pid        nginx.pid;
worker_rlimit_nofile 8192;
events {
  worker_connections  1024;
}
http {
    # define a named 'backend' that we can use in the proxy directive
    # below.
    upstream backend {
        # Has the full URI of the request and use a consistent hash
        hash $request_uri consistent
        server web-shard-1.web;
        server web-shard-2.web;
        server web-shard-3.web;
    }
    server {
An Examination of Sharding Functions 
| 
69
