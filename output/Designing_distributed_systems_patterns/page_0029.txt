$ docker run -d <my-app-image>
<container-hash-value>
After you run that image, you will receive the identifier for that specific container. It
will look something like: cccf82b85000… If you don’t have it, you can always look it
up using the docker ps command, which will show all currently running containers.
Assuming you have stashed that value in an environment variable named APP_ID, you
can then run the topz container in the same PID namespace using:
$ docker run --pid=container:${APP_ID} \
    -p 8080:8080 \
    brendanburns/topz:db0fa58 \
    /server --address=0.0.0.0:8080
This will launch the topz sidecar in the same PID namespace as the application con‐
tainer. Note that you may need to change the port that the sidecar uses for serving if
your application container is also running on port 8080. Once the sidecar is running,
you can visit http://localhost:8080/topz to get a complete readout of the processes that
are running in the application container and their resource usage.
You can mix this sidecar with any other existing container to easily get a view into
how the container is using its resources via a web interface.
Building a Simple PaaS with Sidecars
The sidecar pattern can be used for more than adaptation and monitoring. It can also
be used as a means to implement the complete logic for your application in a simpli‐
fied, modular manner. As an example, imagine building a simple platform as a service
(PaaS) built around the git workflow. Once you deploy this PaaS, simply pushing
new code up to a Git repository results in that code being deployed to the running
servers. We’ll see how the sidecar pattern makes building this PaaS remarkably
straightforward.
As previously stated, in the sidecar pattern there are two containers: the main appli‐
cation container and the sidecar. In our simple PaaS application, the main container
is a Node.js server that implements a web server. The Node.js server is instrumented
so that it automatically reloads the server when new files are updated. This is accom‐
plished with the nodemon tool.
The sidecar container shares a filesystem with the main application container and
runs a simple loop that synchronizes the filesystem with an existing Git repository:
#!/bin/bash
while true; do
  git pull
  sleep 10
done
Building a Simple PaaS with Sidecars 
| 
15
