Formalization of Algorithmic Programming
Though people had been programming for more than a decade before its publication
in 1962, Donald Knuth’s collection, The Art of Computer Programming (Addison-
Wesley Professional), marks an important chapter in the development of computer
science. In particular, the books contain algorithms not designed for any specific
computer, but rather to educate the reader on the algorithms themselves. These algo‐
rithms then could be adapted to the specific architecture of the machine being used
or the specific problem that the reader was solving. This formalization was important
because it provided users with a shared toolkit for building their programs, but also
because it showed that there was a general-purpose concept that programmers should
learn and then subsequently apply in a variety of different contexts. The algorithms
themselves, independent of any specific problem to solve, were worth understanding
for their own sake.
Patterns for Object-Oriented Programming
Knuth’s books represent an important landmark in the thinking about computer pro‐
gramming, and algorithms represent an important component in the development of
computer programming. However, as the complexity of programs grew, and the
number of people writing a single program grew from the single digits to the double
digits and eventually to the thousands, it became clear that procedural programming
languages and algorithms were insufficient for the tasks of modern-day program‐
ming. These changes in computer programming led to the development of object-
oriented programming languages, which elevated data, reusability, and extensibility
to peers of the algorithm in the development of computer programs.
In response to these changes to computer programming, there were changes to the
patterns and practices for programming as well. Throughout the early to mid-1990s,
there was an explosion of books on patterns for object-oriented programming. The
most famous of these is the “gang of four” book, Design Patterns: Elements of Reusable
Object-Oriented Programming by Erich Gamma et al. (Addison-Wesley Professional).
Design Patterns gave a common language and framework to the task of program‐
ming. It described a series of interface-based patterns that could be reused in a variety
of contexts. Because of advances in object-oriented programming and specifically
interfaces, these patterns could also be implemented as generic reusable libraries.
These libraries could be written once by a community of developers and reused
repeatedly, saving time and improving reliability.
The Rise of Open Source Software
Though the concept of developers sharing source code has been around nearly since
the beginning of computing, and formal free software organizations have been in
existence since the mid-1980s, the very late 1990s and the 2000s saw a dramatic
A Brief History of Patterns in Software Development 
| 
3
