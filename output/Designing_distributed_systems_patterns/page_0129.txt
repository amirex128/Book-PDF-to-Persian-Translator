    job.spec = client.V1JobSpec()
    job.spec.template = client.V1PodTemplate()
    job.spec.template.spec = client.V1PodTemplateSpec()
    job.spec.template.spec.restart_policy = "Never"
    job.spec.template.spec.containers = [
        make_container(item, obj)
    ]
    return job
def update_queue(batch):
    response = requests.get("http://localhost:8000/items")
    obj = json.loads(response.text)
    items = obj['items']
    ret = batch.list_namespaced_job(namespace, watch=False)
    for item in items:
        found = False
        for i in ret.items:
            if i.metadata.name == item:
                found = True
        if not found:
            # This function creates the job object, omitted for
            # brevity
            job = make_job(item)
            batch.create_namespaced_job(namespace, job)
config.load_kube_config()
batch = client.BatchV1Api()
while True:
    update_queue(batch)
    time.sleep(10)
Hands On: Implementing a Video Thumbnailer
To provide a concrete example of how we might use a work queue, consider the task
of generating thumbnails for videos. These thumbnails help users determine which
videos they want to watch.
To implement this video thumbnailer, we need two different user containers. The first
is the work item source container. The simplest way for this to work is for the work
items to appear on a shared disk, such as a Network File System (NFS) share. The
work item source simply lists the files in this directory and returns them to the caller.
Hereâ€™s a simple node program that does this:
const http = require('http');
const fs = require('fs');
const port = 8080;
Hands On: Implementing a Video Thumbnailer 
| 
115
