functions and event-driven processing,
81-91
multi-node patterns, 41-43
replicated load-balanced services, 45-57
scatter/gather, 73-80
sharded services, 59-70
stateless services, 45-48
session tracked services, 48
sessions, requests and, 87
shard router service, 65
shard, defined, 59
sharded caching, 59-66
defined, 59
deploying ambassador and memcache for,
63-66
reasons to use, 60
replicated, sharded caches, 62
role in system performance, 61
sharded services, 59-70
hot sharding systems, 70
sharded caching, 59-66
sharding functions, 66-70
shared replicated serving, 70
sharding, 66-70
building a consistent HTTP sharding proxy,
69
consistent hashing functions, 68
event-driven batch processing systems, 125
leaf (see leaf sharding)
Redis, 23-25
selecting a key, 67
with ambassador patterns, 22-25
sharding ambassador proxy, 23
sidecar container, 5, 11
sidecar patterns, 11-20
adding HTTPS to a legacy service, 11
container documentation, 18
defining container APIs, 17
designing for modularity and reusability,
16-19
dynamic configuration with, 12
elements of, 11
modular application containers, 14
parameterized containers for, 17
simple PaaS with, 15
web cache deployment, 50
single-node container patterns, 7-9
ambassadors, 21-29
reasons for using, 7-9
sidecar patterns, 11-20
single-node patterns
adapters, 31-39
container patterns, 7-9
splitter pattern, 124
SSL termination, caching layer for, 54-57
stateless services, 45-48
caching layer, 49-53
creating a replicated service in Kubernetes,
47
defined, 45
readiness probes for load balancing, 46
storage layer sharding, 22-25
straggler problem, 78
sums, coordinated batch processing for, 137
systems development, history of, 1
T
team scaling, 8
teeing, 26
three-nines service, 46
time-to-live (TTL), 96, 99
topz sidecar, 14
twemproxy, 24
two-factor authentication, FaaS for, 87-89
U
user signup
event-driven flow for, 128
implementing a pipeline for, 89-91
V
Varnish, 50, 52-53
W
workflow systems, 121
(see also event-driven batch processing sys‚Äê
tems)
Index 
| 
149
