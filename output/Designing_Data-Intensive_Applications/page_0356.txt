configuration of the quorums, and depending on how you define strong consis‐
tency, this is not quite true.
“Last write wins” conflict resolution methods based on time-of-day clocks (e.g.,
in Cassandra; see “Relying on Synchronized Clocks” on page 291) are almost cer‐
tainly nonlinearizable, because clock timestamps cannot be guaranteed to be
consistent with actual event ordering due to clock skew. Sloppy quorums
(“Sloppy Quorums and Hinted Handoff” on page 183) also ruin any chance of
linearizability. Even with strict quorums, nonlinearizable behavior is possible, as
demonstrated in the next section.
Linearizability and quorums
Intuitively, it seems as though strict quorum reads and writes should be linearizable
in a Dynamo-style model. However, when we have variable network delays, it is pos‐
sible to have race conditions, as demonstrated in Figure 9-6.
Figure 9-6. A nonlinearizable execution, despite using a strict quorum.
In Figure 9-6, the initial value of x is 0, and a writer client is updating x to 1 by send‐
ing the write to all three replicas (n = 3, w = 3). Concurrently, client A reads from a
quorum of two nodes (r = 2) and sees the new value 1 on one of the nodes. Also con‐
currently with the write, client B reads from a different quorum of two nodes, and
gets back the old value 0 from both.
The quorum condition is met (w + r > n), but this execution is nevertheless not line‐
arizable: B’s request begins after A’s request completes, but B returns the old value
334 
| 
Chapter 9: Consistency and Consensus
