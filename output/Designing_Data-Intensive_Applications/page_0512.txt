Data Integration
A recurring theme in this book has been that for any given problem, there are several
solutions, all of which have different pros, cons, and trade-offs. For example, when
discussing storage engines in Chapter 3, we saw log-structured storage, B-trees, and
column-oriented storage. When discussing replication in Chapter 5, we saw single-
leader, multi-leader, and leaderless approaches.
If you have a problem such as “I want to store some data and look it up again later,”
there is no one right solution, but many different approaches that are each appropri‐
ate in different circumstances. A software implementation typically has to pick one
particular approach. It’s hard enough to get one code path robust and performing
well—trying to do everything in one piece of software almost guarantees that the
implementation will be poor.
Thus, the most appropriate choice of software tool also depends on the circumstan‐
ces. Every piece of software, even a so-called “general-purpose” database, is designed
for a particular usage pattern.
Faced with this profusion of alternatives, the first challenge is then to figure out the
mapping between the software products and the circumstances in which they are a
good fit. Vendors are understandably reluctant to tell you about the kinds of work‐
loads for which their software is poorly suited, but hopefully the previous chapters
have equipped you with some questions to ask in order to read between the lines and
better understand the trade-offs.
However, even if you perfectly understand the mapping between tools and circum‐
stances for their use, there is another challenge: in complex applications, data is often
used in several different ways. There is unlikely to be one piece of software that is
suitable for all the different circumstances in which the data is used, so you inevitably
end up having to cobble together several different pieces of software in order to pro‐
vide your application’s functionality.
Combining Specialized Tools by Deriving Data
For example, it is common to need to integrate an OLTP database with a full-text
search index in order to handle queries for arbitrary keywords. Although some data‐
bases (such as PostgreSQL) include a full-text indexing feature, which can be suffi‐
cient for simple applications [1], more sophisticated search facilities require specialist
information retrieval tools. Conversely, search indexes are generally not very suitable
as a durable system of record, and so many applications need to combine two differ‐
ent tools in order to satisfy all of the requirements.
We touched on the issue of integrating data systems in “Keeping Systems in Sync” on
page 452. As the number of different representations of the data increases, the inte‐
490 
| 
Chapter 12: The Future of Data Systems
