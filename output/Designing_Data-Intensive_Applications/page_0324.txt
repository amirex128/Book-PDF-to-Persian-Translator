• Only one user is allowed to register a particular username, because a username
must uniquely identify a user.
Implementing this in a distributed system requires care: even if a node believes that it
is “the chosen one” (the leader of the partition, the holder of the lock, the request
handler of the user who successfully grabbed the username), that doesn’t necessarily
mean a quorum of nodes agrees! A node may have formerly been the leader, but if
the other nodes declared it dead in the meantime (e.g., due to a network interruption
or GC pause), it may have been demoted and another leader may have already been
elected.
If a node continues acting as the chosen one, even though the majority of nodes have
declared it dead, it could cause problems in a system that is not carefully designed.
Such a node could send messages to other nodes in its self-appointed capacity, and if
other nodes believe it, the system as a whole may do something incorrect.
For example, Figure 8-4 shows a data corruption bug due to an incorrect implemen‐
tation of locking. (The bug is not theoretical: HBase used to have this problem [74,
75].) Say you want to ensure that a file in a storage service can only be accessed by
one client at a time, because if multiple clients tried to write to it, the file would
become corrupted. You try to implement this by requiring a client to obtain a lease
from a lock service before accessing the file.
Figure 8-4. Incorrect implementation of a distributed lock: client 1 believes that it still
has a valid lease, even though it has expired, and thus corrupts a file in storage.
The problem is an example of what we discussed in “Process Pauses” on page 295: if
the client holding the lease is paused for too long, its lease expires. Another client can
obtain a lease for the same file, and start writing to the file. When the paused client
comes back, it believes (incorrectly) that it still has a valid lease and proceeds to also
write to the file. As a result, the clients’ writes clash and corrupt the file.
302 
| 
Chapter 8: The Trouble with Distributed Systems
