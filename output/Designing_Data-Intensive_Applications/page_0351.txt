other requests, it would be okay for B’s read to return 2. However, client A has
already read the new value 4 before B’s read started, so B is not allowed to read
an older value than A. Again, it’s the same situation as with Alice and Bob in
Figure 9-1.
That is the intuition behind linearizability; the formal definition [6] describes it more
precisely. It is possible (though computationally expensive) to test whether a system’s
behavior is linearizable by recording the timings of all requests and responses, and
checking whether they can be arranged into a valid sequential order [11]. 
Linearizability Versus Serializability
Linearizability is easily confused with serializability (see “Serializability” on page 251),
as both words seem to mean something like “can be arranged in a sequential order.”
However, they are two quite different guarantees, and it is important to distinguish
between them:
Serializability
Serializability is an isolation property of transactions, where every transaction
may read and write multiple objects (rows, documents, records)—see “Single-
Object and Multi-Object Operations” on page 228. It guarantees that transac‐
tions behave the same as if they had executed in some serial order (each
transaction running to completion before the next transaction starts). It is okay
for that serial order to be different from the order in which transactions were
actually run [12].
Linearizability
Linearizability is a recency guarantee on reads and writes of a register (an indi‐
vidual object). It doesn’t group operations together into transactions, so it does
not prevent problems such as write skew (see “Write Skew and Phantoms” on
page 246), unless you take additional measures such as materializing conflicts
(see “Materializing conflicts” on page 251).
A database may provide both serializability and linearizability, and this combination
is known as strict serializability or strong one-copy serializability (strong-1SR) [4, 13].
Implementations of serializability based on two-phase locking (see “Two-Phase Lock‐
ing (2PL)” on page 257) or actual serial execution (see “Actual Serial Execution” on
page 252) are typically linearizable.
However, serializable snapshot isolation (see “Serializable Snapshot Isolation (SSI)”
on page 261) is not linearizable: by design, it makes reads from a consistent snapshot,
to avoid lock contention between readers and writers. The whole point of a consistent
snapshot is that it does not include writes that are more recent than the snapshot, and
thus reads from the snapshot are not linearizable.
Linearizability 
| 
329
