Epoch numbering and quorums
All of the consensus protocols discussed so far internally use a leader in some form or
another, but they don’t guarantee that the leader is unique. Instead, they can make a
weaker guarantee: the protocols define an epoch number (called the ballot number in
Paxos, view number in Viewstamped Replication, and term number in Raft) and
guarantee that within each epoch, the leader is unique.
Every time the current leader is thought to be dead, a vote is started among the nodes
to elect a new leader. This election is given an incremented epoch number, and thus
epoch numbers are totally ordered and monotonically increasing. If there is a conflict
between two different leaders in two different epochs (perhaps because the previous
leader actually wasn’t dead after all), then the leader with the higher epoch number
prevails.
Before a leader is allowed to decide anything, it must first check that there isn’t some
other leader with a higher epoch number which might take a conflicting decision.
How does a leader know that it hasn’t been ousted by another node? Recall “The
Truth Is Defined by the Majority” on page 300: a node cannot necessarily trust its
own judgment—just because a node thinks that it is the leader, that does not neces‐
sarily mean the other nodes accept it as their leader.
Instead, it must collect votes from a quorum of nodes (see “Quorums for reading and
writing” on page 179). For every decision that a leader wants to make, it must send
the proposed value to the other nodes and wait for a quorum of nodes to respond in
favor of the proposal. The quorum typically, but not always, consists of a majority of
nodes [105]. A node votes in favor of a proposal only if it is not aware of any other
leader with a higher epoch.
Thus, we have two rounds of voting: once to choose a leader, and a second time to
vote on a leader’s proposal. The key insight is that the quorums for those two votes
must overlap: if a vote on a proposal succeeds, at least one of the nodes that voted for
it must have also participated in the most recent leader election [105]. Thus, if the
vote on a proposal does not reveal any higher-numbered epoch, the current leader
can conclude that no leader election with a higher epoch number has happened, and
therefore be sure that it still holds the leadership. It can then safely decide the pro‐
posed value.
This voting process looks superficially similar to two-phase commit. The biggest dif‐
ferences are that in 2PC the coordinator is not elected, and that fault-tolerant consen‐
sus algorithms only require votes from a majority of nodes, whereas 2PC requires a
“yes” vote from every participant. Moreover, consensus algorithms define a recovery
process by which nodes can get into a consistent state after a new leader is elected,
ensuring that the safety properties are always met. These differences are key to the
correctness and fault tolerance of a consensus algorithm. 
368 
| 
Chapter 9: Consistency and Consensus
