tags.) This kind of dynamically generated schema simply wasn’t a design goal of
Thrift or Protocol Buffers, whereas it was for Avro.
Code generation and dynamically typed languages
Thrift and Protocol Buffers rely on code generation: after a schema has been defined,
you can generate code that implements this schema in a programming language of
your choice. This is useful in statically typed languages such as Java, C++, or C#,
because it allows efficient in-memory structures to be used for decoded data, and it
allows type checking and autocompletion in IDEs when writing programs that access
the data structures.
In dynamically typed programming languages such as JavaScript, Ruby, or Python,
there is not much point in generating code, since there is no compile-time type
checker to satisfy. Code generation is often frowned upon in these languages, since
they otherwise avoid an explicit compilation step. Moreover, in the case of a dynami‐
cally generated schema (such as an Avro schema generated from a database table),
code generation is an unnecessarily obstacle to getting to the data.
Avro provides optional code generation for statically typed programming languages,
but it can be used just as well without any code generation. If you have an object con‐
tainer file (which embeds the writer’s schema), you can simply open it using the Avro
library and look at the data in the same way as you could look at a JSON file. The file
is self-describing since it includes all the necessary metadata.
This property is especially useful in conjunction with dynamically typed data pro‐
cessing languages like Apache Pig [26]. In Pig, you can just open some Avro files,
start analyzing them, and write derived datasets to output files in Avro format
without even thinking about schemas. 
The Merits of Schemas
As we saw, Protocol Buffers, Thrift, and Avro all use a schema to describe a binary
encoding format. Their schema languages are much simpler than XML Schema or
JSON Schema, which support much more detailed validation rules (e.g., “the string
value of this field must match this regular expression” or “the integer value of this
field must be between 0 and 100”). As Protocol Buffers, Thrift, and Avro are simpler
to implement and simpler to use, they have grown to support a fairly wide range of
programming languages.
The ideas on which these encodings are based are by no means new. For example,
they have a lot in common with ASN.1, a schema definition language that was first
standardized in 1984 [27]. It was used to define various network protocols, and its
binary encoding (DER) is still used to encode SSL certificates (X.509), for example
[28]. ASN.1 supports schema evolution using tag numbers, similar to Protocol Buf‐
Formats for Encoding Data 
| 
127
