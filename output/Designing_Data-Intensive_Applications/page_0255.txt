Weak Isolation Levels
If two transactions don’t touch the same data, they can safely be run in parallel,
because neither depends on the other. Concurrency issues (race conditions) only
come into play when one transaction reads data that is concurrently modified by
another transaction, or when two transactions try to simultaneously modify the same
data.
Concurrency bugs are hard to find by testing, because such bugs are only triggered
when you get unlucky with the timing. Such timing issues might occur very rarely,
and are usually difficult to reproduce. Concurrency is also very difficult to reason
about, especially in a large application where you don’t necessarily know which other
pieces of code are accessing the database. Application development is difficult
enough if you just have one user at a time; having many concurrent users makes it
much harder still, because any piece of data could unexpectedly change at any time.
For that reason, databases have long tried to hide concurrency issues from applica‐
tion developers by providing transaction isolation. In theory, isolation should make
your life easier by letting you pretend that no concurrency is happening: serializable
isolation means that the database guarantees that transactions have the same effect as
if they ran serially (i.e., one at a time, without any concurrency).
In practice, isolation is unfortunately not that simple. Serializable isolation has a per‐
formance cost, and many databases don’t want to pay that price [8]. It’s therefore
common for systems to use weaker levels of isolation, which protect against some
concurrency issues, but not all. Those levels of isolation are much harder to under‐
stand, and they can lead to subtle bugs, but they are nevertheless used in practice
[23].
Concurrency bugs caused by weak transaction isolation are not just a theoretical
problem. They have caused substantial loss of money [24, 25], led to investigation by
financial auditors [26], and caused customer data to be corrupted [27]. A popular
comment on revelations of such problems is “Use an ACID database if you’re han‐
dling financial data!”—but that misses the point. Even many popular relational data‐
base systems (which are usually considered “ACID”) use weak isolation, so they
wouldn’t necessarily have prevented these bugs from occurring.
Rather than blindly relying on tools, we need to develop a good understanding of the
kinds of concurrency problems that exist, and how to prevent them. Then we can
build applications that are reliable and correct, using the tools at our disposal.
In this section we will look at several weak (nonserializable) isolation levels that are
used in practice, and discuss in detail what kinds of race conditions can and cannot
occur, so that you can decide what level is appropriate to your application. Once
we’ve done that, we will discuss serializability in detail (see “Serializability” on page
Weak Isolation Levels 
| 
233
