xii. Atomic commit is formalized slightly differently from consensus: an atomic transaction can commit only
if all participants vote to commit, and must abort if any participant needs to abort. Consensus is allowed to
decide on any value that is proposed by one of the participants. However, atomic commit and consensus are
reducible to each other [70, 71]. Nonblocking atomic commit is harder than consensus—see “Three-phase
commit” on page 359.
Atomic commit
In a database that supports transactions spanning several nodes or partitions, we
have the problem that a transaction may fail on some nodes but succeed on oth‐
ers. If we want to maintain transaction atomicity (in the sense of ACID; see
“Atomicity” on page 223), we have to get all nodes to agree on the outcome of the
transaction: either they all abort/roll back (if anything goes wrong) or they all
commit (if nothing goes wrong). This instance of consensus is known as the
atomic commit problem.xii
The Impossibility of Consensus
You may have heard about the FLP result [68]—named after the authors Fischer,
Lynch, and Paterson—which proves that there is no algorithm that is always able to
reach consensus if there is a risk that a node may crash. In a distributed system, we
must assume that nodes may crash, so reliable consensus is impossible. Yet, here we
are, discussing algorithms for achieving consensus. What is going on here?
The answer is that the FLP result is proved in the asynchronous system model (see
“System Model and Reality” on page 306), a very restrictive model that assumes a
deterministic algorithm that cannot use any clocks or timeouts. If the algorithm is
allowed to use timeouts, or some other way of identifying suspected crashed nodes
(even if the suspicion is sometimes wrong), then consensus becomes solvable [67].
Even just allowing the algorithm to use random numbers is sufficient to get around
the impossibility result [69].
Thus, although the FLP result about the impossibility of consensus is of great theoret‐
ical importance, distributed systems can usually achieve consensus in practice.
In this section we will first examine the atomic commit problem in more detail. In
particular, we will discuss the two-phase commit (2PC) algorithm, which is the most
common way of solving atomic commit and which is implemented in various data‐
bases, messaging systems, and application servers. It turns out that 2PC is a kind of
consensus algorithm—but not a very good one [70, 71].
By learning from 2PC we will then work our way toward better consensus algorithms,
such as those used in ZooKeeper (Zab) and etcd (Raft).
Distributed Transactions and Consensus 
| 
353
