view, as it would need to be updated when new documents appear that should be
included in the results of one of the common queries.
From this example we can see that an index is not the only possible boundary
between the write path and the read path. Caching of common search results is possi‐
ble, and grep-like scanning without the index is also possible on a small number of
documents. Viewed like this, the role of caches, indexes, and materialized views is
simple: they shift the boundary between the read path and the write path. They allow
us to do more work on the write path, by precomputing results, in order to save effort
on the read path.
Shifting the boundary between work done on the write path and the read path was in
fact the topic of the Twitter example at the beginning of this book, in “Describing
Load” on page 11. In that example, we also saw how the boundary between write path
and read path might be drawn differently for celebrities compared to ordinary users.
After 500 pages we have come full circle!
Stateful, offline-capable clients
I find the idea of a boundary between write and read paths interesting because we can
discuss shifting that boundary and explore what that shift means in practical terms.
Let’s look at the idea in a different context.
The huge popularity of web applications in the last two decades has led us to certain
assumptions about application development that are easy to take for granted. In par‐
ticular, the client/server model—in which clients are largely stateless and servers have
the authority over data—is so common that we almost forget that anything else
exists. However, technology keeps moving on, and I think it is important to question
the status quo from time to time.
Traditionally, web browsers have been stateless clients that can only do useful things
when you have an internet connection (just about the only thing you could do offline
was to scroll up and down in a page that you had previously loaded while online).
However, recent “single-page” JavaScript web apps have gained a lot of stateful capa‐
bilities, including client-side user interface interaction and persistent local storage in
the web browser. Mobile apps can similarly store a lot of state on the device and don’t
require a round-trip to the server for most user interactions.
These changing capabilities have led to a renewed interest in offline-first applications
that do as much as possible using a local database on the same device, without requir‐
ing an internet connection, and sync with remote servers in the background when a
network connection is available [42]. Since mobile devices often have slow and unre‐
liable cellular internet connections, it’s a big advantage for users if their user interface
does not have to wait for synchronous network requests, and if apps mostly work off‐
line (see “Clients with offline operation” on page 170).
Unbundling Databases 
| 
511
