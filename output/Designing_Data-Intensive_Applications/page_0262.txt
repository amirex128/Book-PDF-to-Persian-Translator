Figure 7-7. Implementing snapshot isolation using multi-version objects.
Each row in a table has a created_by field, containing the ID of the transaction that
inserted this row into the table. Moreover, each row has a deleted_by field, which is
initially empty. If a transaction deletes a row, the row isnâ€™t actually deleted from the
database, but it is marked for deletion by setting the deleted_by field to the ID of the
transaction that requested the deletion. At some later time, when it is certain that no
transaction can any longer access the deleted data, a garbage collection process in the
database removes any rows marked for deletion and frees their space.
An update is internally translated into a delete and a create. For example, in
Figure 7-7, transaction 13 deducts $100 from account 2, changing the balance from
$500 to $400. The accounts table now actually contains two rows for account 2: a
row with a balance of $500 which was marked as deleted by transaction 13, and a row
with a balance of $400 which was created by transaction 13.
Visibility rules for observing a consistent snapshot
When a transaction reads from the database, transaction IDs are used to decide
which objects it can see and which are invisible. By carefully defining visibility rules,
240 
| 
Chapter 7: Transactions
