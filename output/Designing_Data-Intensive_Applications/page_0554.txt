include in an integrity check, the fewer opportunities there are for corruption to go
unnoticed at some stage of the process. If we can check that an entire derived data
pipeline is correct end to end, then any disks, networks, services, and algorithms
along the path are implicitly included in the check.
Having continuous end-to-end integrity checks gives you increased confidence about
the correctness of your systems, which in turn allows you to move faster [70]. Like
automated testing, auditing increases the chances that bugs will be found quickly,
and thus reduces the risk that a change to the system or a new storage technology will
cause damage. If you are not afraid of making changes, you can much better evolve
an application to meet changing requirements.
Tools for auditable data systems
At present, not many data systems make auditability a top-level concern. Some appli‐
cations implement their own audit mechanisms, for example by logging all changes
to a separate audit table, but guaranteeing the integrity of the audit log and the data‐
base state is still difficult. A transaction log can be made tamper-proof by periodically
signing it with a hardware security module, but that does not guarantee that the right
transactions went into the log in the first place.
It would be interesting to use cryptographic tools to prove the integrity of a system in
a way that is robust to a wide range of hardware and software issues, and even poten‐
tially malicious actions. Cryptocurrencies, blockchains, and distributed ledger tech‐
nologies such as Bitcoin, Ethereum, Ripple, Stellar, and various others [71, 72, 73]
have sprung up to explore this area.
I am not qualified to comment on the merits of these technologies as currencies or
mechanisms for agreeing contracts. However, from a data systems point of view they
contain some interesting ideas. Essentially, they are distributed databases, with a data
model and transaction mechanism, in which different replicas can be hosted by
mutually untrusting organizations. The replicas continually check each other’s integ‐
rity and use a consensus protocol to agree on the transactions that should be exe‐
cuted.
I am somewhat skeptical about the Byzantine fault tolerance aspects of these technol‐
ogies (see “Byzantine Faults” on page 304), and I find the technique of proof of work
(e.g., Bitcoin mining) extraordinarily wasteful. The transaction throughput of Bitcoin
is rather low, albeit for political and economic reasons more than for technical ones.
However, the integrity checking aspects are interesting.
Cryptographic auditing and integrity checking often relies on Merkle trees [74],
which are trees of hashes that can be used to efficiently prove that a record appears in
some dataset (and a few other things). Outside of the hype of cryptocurrencies, certif‐
icate transparency is a security technology that relies on Merkle trees to check the val‐
idity of TLS/SSL certificates [75, 76].
532 
| 
Chapter 12: The Future of Data Systems
