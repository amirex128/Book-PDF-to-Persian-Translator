Figure 6-5. Partitioning secondary indexes by term.
Partitioning Secondary Indexes by Term
Rather than each partition having its own secondary index (a local index), we can
construct a global index that covers data in all partitions. However, we can’t just store
that index on one node, since it would likely become a bottleneck and defeat the pur‐
pose of partitioning. A global index must also be partitioned, but it can be partitioned
differently from the primary key index.
Figure 6-5 illustrates what this could look like: red cars from all partitions appear
under color:red in the index, but the index is partitioned so that colors starting with
the letters a to r appear in partition 0 and colors starting with s to z appear in parti‐
tion 1. The index on the make of car is partitioned similarly (with the partition
boundary being between f and h).
We call this kind of index term-partitioned, because the term we’re looking for deter‐
mines the partition of the index. Here, a term would be color:red, for example. The
name term comes from full-text indexes (a particular kind of secondary index), where
the terms are all the words that occur in a document.
As before, we can partition the index by the term itself, or using a hash of the term.
Partitioning by the term itself can be useful for range scans (e.g., on a numeric prop‐
erty, such as the asking price of the car), whereas partitioning on a hash of the term
gives a more even distribution of load.
The advantage of a global (term-partitioned) index over a document-partitioned
index is that it can make reads more efficient: rather than doing scatter/gather over
all partitions, a client only needs to make a request to the partition containing the
term that it wants. However, the downside of a global index is that writes are slower
and more complicated, because a write to a single document may now affect multiple
208 
| 
Chapter 6: Partitioning
