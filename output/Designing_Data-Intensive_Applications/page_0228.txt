ii. If your database only supports a key-value model, you might be tempted to implement a secondary index
yourself by creating a mapping from values to document IDs in application code. If you go down this route,
you need to take great care to ensure your indexes remain consistent with the underlying data. Race condi‐
tions and intermittent write failures (where some changes were saved but others weren’t) can very easily cause
the data to go out of sync—see “The need for multi-object transactions” on page 231.
Partitioning and Secondary Indexes
The partitioning schemes we have discussed so far rely on a key-value data model. If
records are only ever accessed via their primary key, we can determine the partition
from that key and use it to route read and write requests to the partition responsible
for that key.
The situation becomes more complicated if secondary indexes are involved (see also
“Other Indexing Structures” on page 85). A secondary index usually doesn’t identify
a record uniquely but rather is a way of searching for occurrences of a particular
value: find all actions by user 123, find all articles containing the word hogwash, find
all cars whose color is red, and so on.
Secondary indexes are the bread and butter of relational databases, and they are com‐
mon in document databases too. Many key-value stores (such as HBase and Volde‐
mort) have avoided secondary indexes because of their added implementation
complexity, but some (such as Riak) have started adding them because they are so
useful for data modeling. And finally, secondary indexes are the raison d’être of
search servers such as Solr and Elasticsearch.
The problem with secondary indexes is that they don’t map neatly to partitions.
There are two main approaches to partitioning a database with secondary indexes:
document-based partitioning and term-based partitioning.
Partitioning Secondary Indexes by Document
For example, imagine you are operating a website for selling used cars (illustrated in
Figure 6-4). Each listing has a unique ID—call it the document ID—and you partition
the database by the document ID (for example, IDs 0 to 499 in partition 0, IDs 500 to
999 in partition 1, etc.).
You want to let users search for cars, allowing them to filter by color and by make, so
you need a secondary index on color and make (in a document database these would
be fields; in a relational database they would be columns). If you have declared the
index, the database can perform the indexing automatically.ii For example, whenever
a red car is added to the database, the database partition automatically adds it to the
list of document IDs for the index entry color:red.
206 
| 
Chapter 6: Partitioning
