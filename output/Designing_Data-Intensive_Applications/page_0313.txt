wrong. If your NTP daemon is misconfigured, or a firewall is blocking NTP traffic,
the clock error due to drift can quickly become large. 
Relying on Synchronized Clocks
The problem with clocks is that while they seem simple and easy to use, they have a
surprising number of pitfalls: a day may not have exactly 86,400 seconds, time-of-day
clocks may move backward in time, and the time on one node may be quite different
from the time on another node.
Earlier in this chapter we discussed networks dropping and arbitrarily delaying pack‐
ets. Even though networks are well behaved most of the time, software must be
designed on the assumption that the network will occasionally be faulty, and the soft‐
ware must handle such faults gracefully. The same is true with clocks: although they
work quite well most of the time, robust software needs to be prepared to deal with
incorrect clocks.
Part of the problem is that incorrect clocks easily go unnoticed. If a machine’s CPU is
defective or its network is misconfigured, it most likely won’t work at all, so it will
quickly be noticed and fixed. On the other hand, if its quartz clock is defective or its
NTP client is misconfigured, most things will seem to work fine, even though its
clock gradually drifts further and further away from reality. If some piece of software
is relying on an accurately synchronized clock, the result is more likely to be silent
and subtle data loss than a dramatic crash [53, 54].
Thus, if you use software that requires synchronized clocks, it is essential that you
also carefully monitor the clock offsets between all the machines. Any node whose
clock drifts too far from the others should be declared dead and removed from the
cluster. Such monitoring ensures that you notice the broken clocks before they can
cause too much damage.
Timestamps for ordering events
Let’s consider one particular situation in which it is tempting, but dangerous, to rely
on clocks: ordering of events across multiple nodes. For example, if two clients write
to a distributed database, who got there first? Which write is the more recent one?
Figure 8-3 illustrates a dangerous use of time-of-day clocks in a database with multi-
leader replication (the example is similar to Figure 5-9). Client A writes x = 1 on node
1; the write is replicated to node 3; client B increments x on node 3 (we now have
x = 2); and finally, both writes are replicated to node 2.
Unreliable Clocks 
| 
291
