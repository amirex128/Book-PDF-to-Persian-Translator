things less likely. The question is whether violations of our assumptions happen often
enough that we may encounter them in practice.
We have seen that data can become corrupted while it is sitting untouched on disks
(see “Replication and Durability” on page 227), and data corruption on the network
can sometimes evade the TCP checksums (see “Weak forms of lying” on page 306).
Maybe this is something we should be paying more attention to?
One application that I worked on in the past collected crash reports from clients, and
some of the reports we received could only be explained by random bit-flips in the
memory of those devices. It seems unlikely, but if you have enough devices running
your software, even very unlikely things do happen. Besides random memory corrup‐
tion due to hardware faults or radiation, certain pathological memory access patterns
can flip bits even in memory that has no faults [62]—an effect that can be used to
break security mechanisms in operating systems [63] (this technique is known as
rowhammer). Once you look closely, hardware isn’t quite the perfect abstraction that
it may seem.
To be clear, random bit-flips are still very rare on modern hardware [64]. I just want
to point out that they are not beyond the realm of possibility, and so they deserve
some attention.
Maintaining integrity in the face of software bugs
Besides such hardware issues, there is always the risk of software bugs, which would
not be caught by lower-level network, memory, or filesystem checksums. Even widely
used database software has bugs: I have personally seen cases of MySQL failing to
correctly maintain a uniqueness constraint [65] and PostgreSQL’s serializable isola‐
tion level exhibiting write skew anomalies [66], even though MySQL and PostgreSQL
are robust and well-regarded databases that have been battle-tested by many people
for many years. In less mature software, the situation is likely to be much worse.
Despite considerable efforts in careful design, testing, and review, bugs still creep in.
Although they are rare, and they eventually get found and fixed, there is still a period
during which such bugs can corrupt data.
When it comes to application code, we have to assume many more bugs, since most
applications don’t receive anywhere near the amount of review and testing that data‐
base code does. Many applications don’t even correctly use the features that databases
offer for preserving integrity, such as foreign key or uniqueness constraints [36].
Consistency in the sense of ACID (see “Consistency” on page 224) is based on the
idea that the database starts off in a consistent state, and a transaction transforms it
from one consistent state to another consistent state. Thus, we expect the database to
always be in a consistent state. However, this notion only makes sense if you assume
that the transaction is free from bugs. If the application uses the database incorrectly
Aiming for Correctness 
| 
529
