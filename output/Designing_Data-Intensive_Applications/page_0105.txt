iii. This variant is sometimes known as a B+ tree, although the optimization is so common that it often isn’t
distinguished from other B-tree variants.
rency control, as we shall see in “Snapshot Isolation and Repeatable Read” on
page 237.
• We can save space in pages by not storing the entire key, but abbreviating it.
Especially in pages on the interior of the tree, keys only need to provide enough
information to act as boundaries between key ranges. Packing more keys into a
page allows the tree to have a higher branching factor, and thus fewer levels.iii
• In general, pages can be positioned anywhere on disk; there is nothing requiring
pages with nearby key ranges to be nearby on disk. If a query needs to scan over a
large part of the key range in sorted order, that page-by-page layout can be ineffi‐
cient, because a disk seek may be required for every page that is read. Many B-
tree implementations therefore try to lay out the tree so that leaf pages appear in
sequential order on disk. However, it’s difficult to maintain that order as the tree
grows. By contrast, since LSM-trees rewrite large segments of the storage in one
go during merging, it’s easier for them to keep sequential keys close to each other
on disk.
• Additional pointers have been added to the tree. For example, each leaf page may
have references to its sibling pages to the left and right, which allows scanning
keys in order without jumping back to parent pages.
• B-tree variants such as fractal trees [22] borrow some log-structured ideas to
reduce disk seeks (and they have nothing to do with fractals). 
Comparing B-Trees and LSM-Trees
Even though B-tree implementations are generally more mature than LSM-tree
implementations, LSM-trees are also interesting due to their performance character‐
istics. As a rule of thumb, LSM-trees are typically faster for writes, whereas B-trees
are thought to be faster for reads [23]. Reads are typically slower on LSM-trees
because they have to check several different data structures and SSTables at different
stages of compaction.
However, benchmarks are often inconclusive and sensitive to details of the workload.
You need to test systems with your particular workload in order to make a valid com‐
parison. In this section we will briefly discuss a few things that are worth considering
when measuring the performance of a storage engine.
Data Structures That Power Your Database 
| 
83
