Similarly, it would be great to be able to precompute and update caches more easily.
Recall that a materialized view is essentially a precomputed cache, so you could imag‐
ine creating a cache by declaratively specifying materialized views for complex quer‐
ies, including recursive queries on graphs (see “Graph-Like Data Models” on page
49) and application logic. There is interesting early-stage research in this area, such as
differential dataflow [24, 25], and I hope that these ideas will find their way into pro‐
duction systems. 
Designing Applications Around Dataflow
The approach of unbundling databases by composing specialized storage and pro‐
cessing systems with application code is also becoming known as the “database
inside-out” approach [26], after the title of a conference talk I gave in 2014 [27].
However, calling it a “new architecture” is too grandiose. I see it more as a design
pattern, a starting point for discussion, and we give it a name simply so that we can
better talk about it.
These ideas are not mine; they are simply an amalgamation of other people’s ideas
from which I think we should learn. In particular, there is a lot of overlap with data‐
flow languages such as Oz [28] and Juttle [29], functional reactive programming (FRP)
languages such as Elm [30, 31], and logic programming languages such as Bloom [32].
The term unbundling in this context was proposed by Jay Kreps [7].
Even spreadsheets have dataflow programming capabilities that are miles ahead of
most mainstream programming languages [33]. In a spreadsheet, you can put a for‐
mula in one cell (for example, the sum of cells in another column), and whenever any
input to the formula changes, the result of the formula is automatically recalculated.
This is exactly what we want at a data system level: when a record in a database
changes, we want any index for that record to be automatically updated, and any
cached views or aggregations that depend on the record to be automatically
refreshed. You should not have to worry about the technical details of how this
refresh happens, but be able to simply trust that it works correctly.
Thus, I think that most data systems still have something to learn from the features
that VisiCalc already had in 1979 [34]. The difference from spreadsheets is that
today’s data systems need to be fault-tolerant, scalable, and store data durably. They
also need to be able to integrate disparate technologies written by different groups of
people over time, and reuse existing libraries and services: it is unrealistic to expect all
software to be developed using one particular language, framework, or tool.
In this section I will expand on these ideas and explore some ways of building appli‐
cations around the ideas of unbundled databases and dataflow.
504 
| 
Chapter 12: The Future of Data Systems
