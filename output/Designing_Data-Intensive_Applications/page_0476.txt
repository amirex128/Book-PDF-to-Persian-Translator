Change Data Capture
The problem with most databases’ replication logs is that they have long been consid‐
ered to be an internal implementation detail of the database, not a public API. Clients
are supposed to query the database through its data model and query language, not
parse the replication logs and try to extract data from them.
For decades, many databases simply did not have a documented way of getting the
log of changes written to them. For this reason it was difficult to take all the changes
made in a database and replicate them to a different storage technology such as a
search index, cache, or data warehouse.
More recently, there has been growing interest in change data capture (CDC), which
is the process of observing all data changes written to a database and extracting them
in a form in which they can be replicated to other systems. CDC is especially interest‐
ing if changes are made available as a stream, immediately as they are written.
For example, you can capture the changes in a database and continually apply the
same changes to a search index. If the log of changes is applied in the same order, you
can expect the data in the search index to match the data in the database. The search
index and any other derived data systems are just consumers of the change stream, as
illustrated in Figure 11-5.
Figure 11-5. Taking data in the order it was written to one database, and applying the
changes to other systems in the same order.
Implementing change data capture
We can call the log consumers derived data systems, as discussed in the introduction
to Part III: the data stored in the search index and the data warehouse is just another
view onto the data in the system of record. Change data capture is a mechanism for
ensuring that all changes made to the system of record are also reflected in the
derived data systems so that the derived systems have an accurate copy of the data.
454 
| 
Chapter 11: Stream Processing
