Message passing and RPC
In “Message-Passing Dataflow” on page 136 we discussed message-passing systems as
an alternative to RPC—i.e., as a mechanism for services to communicate, as used for
example in the actor model. Although these systems are also based on messages and
events, we normally don’t think of them as stream processors:
• Actor frameworks are primarily a mechanism for managing concurrency and
distributed execution of communicating modules, whereas stream processing is
primarily a data management technique.
• Communication between actors is often ephemeral and one-to-one, whereas
event logs are durable and multi-subscriber.
• Actors can communicate in arbitrary ways (including cyclic request/response
patterns), but stream processors are usually set up in acyclic pipelines where
every stream is the output of one particular job, and derived from a well-defined
set of input streams.
That said, there is some crossover area between RPC-like systems and stream pro‐
cessing. For example, Apache Storm has a feature called distributed RPC, which
allows user queries to be farmed out to a set of nodes that also process event streams;
these queries are then interleaved with events from the input streams, and results can
be aggregated and sent back to the user [78]. (See also “Multi-partition data process‐
ing” on page 514.)
It is also possible to process streams using actor frameworks. However, many such
frameworks do not guarantee message delivery in the case of crashes, so the process‐
ing is not fault-tolerant unless you implement additional retry logic.
Reasoning About Time
Stream processors often need to deal with time, especially when used for analytics
purposes, which frequently use time windows such as “the average over the last five
minutes.” It might seem that the meaning of “the last five minutes” should be unam‐
biguous and clear, but unfortunately the notion is surprisingly tricky.
In a batch process, the processing tasks rapidly crunch through a large collection of
historical events. If some kind of breakdown by time needs to happen, the batch pro‐
cess needs to look at the timestamp embedded in each event. There is no point in
looking at the system clock of the machine running the batch process, because the
time at which the process is run has nothing to do with the time at which the events
actually occurred.
A batch process may read a year’s worth of historical events within a few minutes; in
most cases, the timeline of interest is the year of history, not the few minutes of pro‐
cessing. Moreover, using the timestamps in the events allows the processing to be
468 
| 
Chapter 11: Stream Processing
