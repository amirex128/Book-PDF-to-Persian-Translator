• If the consumer exposes a service on the network, producers can make a direct
HTTP or RPC request (see “Dataflow Through Services: REST and RPC” on page
131) to push messages to the consumer. This is the idea behind webhooks [12], a
pattern in which a callback URL of one service is registered with another service,
and it makes a request to that URL whenever an event occurs.
Although these direct messaging systems work well in the situations for which they
are designed, they generally require the application code to be aware of the possibility
of message loss. The faults they can tolerate are quite limited: even if the protocols
detect and retransmit packets that are lost in the network, they generally assume that
producers and consumers are constantly online.
If a consumer is offline, it may miss messages that were sent while it is unreachable.
Some protocols allow the producer to retry failed message deliveries, but this
approach may break down if the producer crashes, losing the buffer of messages that
it was supposed to retry.
Message brokers
A widely used alternative is to send messages via a message broker (also known as a
message queue), which is essentially a kind of database that is optimized for handling
message streams [13]. It runs as a server, with producers and consumers connecting
to it as clients. Producers write messages to the broker, and consumers receive them
by reading them from the broker.
By centralizing the data in the broker, these systems can more easily tolerate clients
that come and go (connect, disconnect, and crash), and the question of durability is
moved to the broker instead. Some message brokers only keep messages in memory,
while others (depending on configuration) write them to disk so that they are not lost
in case of a broker crash. Faced with slow consumers, they generally allow unboun‐
ded queueing (as opposed to dropping messages or backpressure), although this
choice may also depend on the configuration.
A consequence of queueing is also that consumers are generally asynchronous: when
a producer sends a message, it normally only waits for the broker to confirm that it
has buffered the message and does not wait for the message to be processed by con‐
sumers. The delivery to consumers will happen at some undetermined future point in
time—often within a fraction of a second, but sometimes significantly later if there is
a queue backlog.
Message brokers compared to databases
Some message brokers can even participate in two-phase commit protocols using XA
or JTA (see “Distributed Transactions in Practice” on page 360). This feature makes
Transmitting Event Streams 
| 
443
