In the late 2000s, nonrelational (NoSQL) databases started gaining popularity. They
aimed to improve upon the relational status quo by offering a choice of new data
models (see Chapter 2), and by including replication (Chapter 5) and partitioning
(Chapter 6) by default. Transactions were the main casualty of this movement: many
of this new generation of databases abandoned transactions entirely, or redefined the
word to describe a much weaker set of guarantees than had previously been under‐
stood [4].
With the hype around this new crop of distributed databases, there emerged a popu‐
lar belief that transactions were the antithesis of scalability, and that any large-scale
system would have to abandon transactions in order to maintain good performance
and high availability [5, 6]. On the other hand, transactional guarantees are some‐
times presented by database vendors as an essential requirement for “serious applica‐
tions” with “valuable data.” Both viewpoints are pure hyperbole.
The truth is not that simple: like every other technical design choice, transactions
have advantages and limitations. In order to understand those trade-offs, let’s go into
the details of the guarantees that transactions can provide—both in normal operation
and in various extreme (but realistic) circumstances.
The Meaning of ACID
The safety guarantees provided by transactions are often described by the well-
known acronym ACID, which stands for Atomicity, Consistency, Isolation, and Dura‐
bility. It was coined in 1983 by Theo Härder and Andreas Reuter [7] in an effort to
establish precise terminology for fault-tolerance mechanisms in databases.
However, in practice, one database’s implementation of ACID does not equal
another’s implementation. For example, as we shall see, there is a lot of ambiguity
around the meaning of isolation [8]. The high-level idea is sound, but the devil is in
the details. Today, when a system claims to be “ACID compliant,” it’s unclear what
guarantees you can actually expect. ACID has unfortunately become mostly a mar‐
keting term.
(Systems that do not meet the ACID criteria are sometimes called BASE, which
stands for Basically Available, Soft state, and Eventual consistency [9]. This is even
more vague than the definition of ACID. It seems that the only sensible definition of
BASE is “not ACID”; i.e., it can mean almost anything you want.)
Let’s dig into the definitions of atomicity, consistency, isolation, and durability, as
this will let us refine our idea of transactions.
Atomicity
In general, atomic refers to something that cannot be broken down into smaller parts.
The word means similar but subtly different things in different branches of comput‐
The Slippery Concept of a Transaction 
| 
223
