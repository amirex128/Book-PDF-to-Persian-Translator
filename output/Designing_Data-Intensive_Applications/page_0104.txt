Making B-trees reliable
The basic underlying write operation of a B-tree is to overwrite a page on disk with
new data. It is assumed that the overwrite does not change the location of the page;
i.e., all references to that page remain intact when the page is overwritten. This is in
stark contrast to log-structured indexes such as LSM-trees, which only append to files
(and eventually delete obsolete files) but never modify files in place.
You can think of overwriting a page on disk as an actual hardware operation. On a
magnetic hard drive, this means moving the disk head to the right place, waiting for
the right position on the spinning platter to come around, and then overwriting the
appropriate sector with new data. On SSDs, what happens is somewhat more compli‐
cated, due to the fact that an SSD must erase and rewrite fairly large blocks of a stor‐
age chip at a time [19].
Moreover, some operations require several different pages to be overwritten. For
example, if you split a page because an insertion caused it to be overfull, you need to
write the two pages that were split, and also overwrite their parent page to update the
references to the two child pages. This is a dangerous operation, because if the data‐
base crashes after only some of the pages have been written, you end up with a cor‐
rupted index (e.g., there may be an orphan page that is not a child of any parent).
In order to make the database resilient to crashes, it is common for B-tree implemen‐
tations to include an additional data structure on disk: a write-ahead log (WAL, also
known as a redo log). This is an append-only file to which every B-tree modification
must be written before it can be applied to the pages of the tree itself. When the data‐
base comes back up after a crash, this log is used to restore the B-tree back to a con‐
sistent state [5, 20].
An additional complication of updating pages in place is that careful concurrency
control is required if multiple threads are going to access the B-tree at the same time
—otherwise a thread may see the tree in an inconsistent state. This is typically done
by protecting the tree’s data structures with latches (lightweight locks). Log-
structured approaches are simpler in this regard, because they do all the merging in
the background without interfering with incoming queries and atomically swap old
segments for new segments from time to time.
B-tree optimizations
As B-trees have been around for so long, it’s not surprising that many optimizations
have been developed over the years. To mention just a few:
• Instead of overwriting pages and maintaining a WAL for crash recovery, some
databases (like LMDB) use a copy-on-write scheme [21]. A modified page is
written to a different location, and a new version of the parent pages in the tree is
created, pointing at the new location. This approach is also useful for concur‐
82 
| 
Chapter 3: Storage and Retrieval
