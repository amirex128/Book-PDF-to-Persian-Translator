• If you have access to the management interface of the network switches in your
datacenter, you can query them to detect link failures at a hardware level (e.g., if
the remote machine is powered down). This option is ruled out if you’re con‐
necting via the internet, or if you’re in a shared datacenter with no access to the
switches themselves, or if you can’t reach the management interface due to a net‐
work problem.
• If a router is sure that the IP address you’re trying to connect to is unreachable, it
may reply to you with an ICMP Destination Unreachable packet. However, the
router doesn’t have a magic failure detection capability either—it is subject to the
same limitations as other participants of the network.
Rapid feedback about a remote node being down is useful, but you can’t count on it.
Even if TCP acknowledges that a packet was delivered, the application may have
crashed before handling it. If you want to be sure that a request was successful, you
need a positive response from the application itself [24].
Conversely, if something has gone wrong, you may get an error response at some
level of the stack, but in general you have to assume that you will get no response at
all. You can retry a few times (TCP retries transparently, but you may also retry at the
application level), wait for a timeout to elapse, and eventually declare the node dead if
you don’t hear back within the timeout. 
Timeouts and Unbounded Delays
If a timeout is the only sure way of detecting a fault, then how long should the time‐
out be? There is unfortunately no simple answer.
A long timeout means a long wait until a node is declared dead (and during this time,
users may have to wait or see error messages). A short timeout detects faults faster,
but carries a higher risk of incorrectly declaring a node dead when in fact it has only
suffered a temporary slowdown (e.g., due to a load spike on the node or the network).
Prematurely declaring a node dead is problematic: if the node is actually alive and in
the middle of performing some action (for example, sending an email), and another
node takes over, the action may end up being performed twice. We will discuss this
issue in more detail in “Knowledge, Truth, and Lies” on page 300, and in Chapters 9
and 11.
When a node is declared dead, its responsibilities need to be transferred to other
nodes, which places additional load on other nodes and the network. If the system is
already struggling with high load, declaring nodes dead prematurely can make the
problem worse. In particular, it could happen that the node actually wasn’t dead but
only slow to respond due to overload; transferring its load to other nodes can cause a
cascading failure (in the extreme case, all nodes declare each other dead, and every‐
thing stops working).
Unreliable Networks 
| 
281
