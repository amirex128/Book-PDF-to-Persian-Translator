objects than is strictly necessary to maintain serializability), but since they have much
lower overheads, they are a good compromise.
If there is no suitable index where a range lock can be attached, the database can fall
back to a shared lock on the entire table. This will not be good for performance, since
it will stop all other transactions writing to the table, but it’s a safe fallback position. 
Serializable Snapshot Isolation (SSI)
This chapter has painted a bleak picture of concurrency control in databases. On the
one hand, we have implementations of serializability that don’t perform well (two-
phase locking) or don’t scale well (serial execution). On the other hand, we have weak
isolation levels that have good performance, but are prone to various race conditions
(lost updates, write skew, phantoms, etc.). Are serializable isolation and good perfor‐
mance fundamentally at odds with each other?
Perhaps not: an algorithm called serializable snapshot isolation (SSI) is very promis‐
ing. It provides full serializability, but has only a small performance penalty com‐
pared to snapshot isolation. SSI is fairly new: it was first described in 2008 [40] and is
the subject of Michael Cahill’s PhD thesis [51].
Today SSI is used both in single-node databases (the serializable isolation level in
PostgreSQL since version 9.1 [41]) and distributed databases (FoundationDB uses a
similar algorithm). As SSI is so young compared to other concurrency control mech‐
anisms, it is still proving its performance in practice, but it has the possibility of being
fast enough to become the new default in the future.
Pessimistic versus optimistic concurrency control
Two-phase locking is a so-called pessimistic concurrency control mechanism: it is
based on the principle that if anything might possibly go wrong (as indicated by a
lock held by another transaction), it’s better to wait until the situation is safe again
before doing anything. It is like mutual exclusion, which is used to protect data struc‐
tures in multi-threaded programming.
Serial execution is, in a sense, pessimistic to the extreme: it is essentially equivalent to
each transaction having an exclusive lock on the entire database (or one partition of
the database) for the duration of the transaction. We compensate for the pessimism
by making each transaction very fast to execute, so it only needs to hold the “lock” for
a short time.
By contrast, serializable snapshot isolation is an optimistic concurrency control tech‐
nique. Optimistic in this context means that instead of blocking if something poten‐
tially dangerous happens, transactions continue anyway, in the hope that everything
will turn out all right. When a transaction wants to commit, the database checks
whether anything bad happened (i.e., whether isolation was violated); if so, the trans‐
Serializability 
| 
261
