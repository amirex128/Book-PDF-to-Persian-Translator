while A returns the new value. (It’s once again the Alice and Bob situation from
Figure 9-1.)
Interestingly, it is possible to make Dynamo-style quorums linearizable at the cost of
reduced performance: a reader must perform read repair (see “Read repair and anti-
entropy” on page 178) synchronously, before returning results to the application
[23], and a writer must read the latest state of a quorum of nodes before sending its
writes [24, 25]. However, Riak does not perform synchronous read repair due to the
performance penalty [26]. Cassandra does wait for read repair to complete on quo‐
rum reads [27], but it loses linearizability if there are multiple concurrent writes to
the same key, due to its use of last-write-wins conflict resolution.
Moreover, only linearizable read and write operations can be implemented in this
way; a linearizable compare-and-set operation cannot, because it requires a consen‐
sus algorithm [28].
In summary, it is safest to assume that a leaderless system with Dynamo-style replica‐
tion does not provide linearizability. 
The Cost of Linearizability
As some replication methods can provide linearizability and others cannot, it is inter‐
esting to explore the pros and cons of linearizability in more depth.
We already discussed some use cases for different replication methods in Chapter 5;
for example, we saw that multi-leader replication is often a good choice for multi-
datacenter replication (see “Multi-datacenter operation” on page 168). An example of
such a deployment is illustrated in Figure 9-7.
Figure 9-7. A network interruption forcing a choice between linearizability and availa‐
bility.
Linearizability 
| 
335
