Distributed Transactions in Practice
Distributed transactions, especially those implemented with two-phase commit, have
a mixed reputation. On the one hand, they are seen as providing an important safety
guarantee that would be hard to achieve otherwise; on the other hand, they are criti‐
cized for causing operational problems, killing performance, and promising more
than they can deliver [81, 82, 83, 84]. Many cloud services choose not to implement
distributed transactions due to the operational problems they engender [85, 86].
Some implementations of distributed transactions carry a heavy performance penalty
—for example, distributed transactions in MySQL are reported to be over 10 times
slower than single-node transactions [87], so it is not surprising when people advise
against using them. Much of the performance cost inherent in two-phase commit is
due to the additional disk forcing (fsync) that is required for crash recovery [88], and
the additional network round-trips.
However, rather than dismissing distributed transactions outright, we should exam‐
ine them in some more detail, because there are important lessons to be learned from
them. To begin, we should be precise about what we mean by “distributed transac‐
tions.” Two quite different types of distributed transactions are often conflated:
Database-internal distributed transactions
Some distributed databases (i.e., databases that use replication and partitioning
in their standard configuration) support internal transactions among the nodes
of that database. For example, VoltDB and MySQL Cluster’s NDB storage engine
have such internal transaction support. In this case, all the nodes participating in
the transaction are running the same database software.
Heterogeneous distributed transactions
In a heterogeneous transaction, the participants are two or more different tech‐
nologies: for example, two databases from different vendors, or even non-
database systems such as message brokers. A distributed transaction across these
systems must ensure atomic commit, even though the systems may be entirely
different under the hood.
Database-internal transactions do not have to be compatible with any other system,
so they can use any protocol and apply optimizations specific to that particular tech‐
nology. For that reason, database-internal distributed transactions can often work
quite well. On the other hand, transactions spanning heterogeneous technologies are
a lot more challenging.
Exactly-once message processing
Heterogeneous distributed transactions allow diverse systems to be integrated in
powerful ways. For example, a message from a message queue can be acknowledged
as processed if and only if the database transaction for processing the message was
360 
| 
Chapter 9: Consistency and Consensus
