partition. However, causal dependencies sometimes arise in more subtle ways (see
also “Ordering and Causality” on page 339).
For example, consider a social networking service, and two users who were in a rela‐
tionship but have just broken up. One of the users removes the other as a friend, and
then sends a message to their remaining friends complaining about their ex-partner.
The user’s intention is that their ex-partner should not see the rude message, since
the message was sent after the friend status was revoked.
However, in a system that stores friendship status in one place and messages in
another place, that ordering dependency between the unfriend event and the message-
send event may be lost. If the causal dependency is not captured, a service that sends
notifications about new messages may process the message-send event before the
unfriend event, and thus incorrectly send a notification to the ex-partner.
In this example, the notifications are effectively a join between the messages and the
friend list, making it related to the timing issues of joins that we discussed previously
(see “Time-dependence of joins” on page 475). Unfortunately, there does not seem to
be a simple answer to this problem [2, 3]. Starting points include: 
• Logical timestamps can provide total ordering without coordination (see
“Sequence Number Ordering” on page 343), so they may help in cases where
total order broadcast is not feasible. However, they still require recipients to han‐
dle events that are delivered out of order, and they require additional metadata to
be passed around.
• If you can log an event to record the state of the system that the user saw before
making a decision, and give that event a unique identifier, then any later events
can reference that event identifier in order to record the causal dependency [4].
We will return to this idea in “Reads are events too” on page 513.
• Conflict resolution algorithms (see “Automatic Conflict Resolution” on page
174) help with processing events that are delivered in an unexpected order. They
are useful for maintaining state, but they do not help if actions have external side
effects (such as sending a notification to a user).
Perhaps, over time, patterns for application development will emerge that allow
causal dependencies to be captured efficiently, and derived state to be maintained
correctly, without forcing all events to go through the bottleneck of total order
broadcast. 
Batch and Stream Processing
I would say that the goal of data integration is to make sure that data ends up in the
right form in all the right places. Doing so requires consuming inputs, transforming,
joining, filtering, aggregating, training models, evaluating, and eventually writing to
494 
| 
Chapter 12: The Future of Data Systems
