them quite similar in nature to databases, although there are still important practical
differences between message brokers and databases:
• Databases usually keep data until it is explicitly deleted, whereas most message
brokers automatically delete a message when it has been successfully delivered to
its consumers. Such message brokers are not suitable for long-term data storage.
• Since they quickly delete messages, most message brokers assume that their
working set is fairly small—i.e., the queues are short. If the broker needs to buffer
a lot of messages because the consumers are slow (perhaps spilling messages to
disk if they no longer fit in memory), each individual message takes longer to
process, and the overall throughput may degrade [6].
• Databases often support secondary indexes and various ways of searching for
data, while message brokers often support some way of subscribing to a subset of
topics matching some pattern. The mechanisms are different, but both are essen‐
tially ways for a client to select the portion of the data that it wants to know
about.
• When querying a database, the result is typically based on a point-in-time snap‐
shot of the data; if another client subsequently writes something to the database
that changes the query result, the first client does not find out that its prior result
is now outdated (unless it repeats the query, or polls for changes). By contrast,
message brokers do not support arbitrary queries, but they do notify clients when
data changes (i.e., when new messages become available).
This is the traditional view of message brokers, which is encapsulated in standards
like JMS [14] and AMQP [15] and implemented in software like RabbitMQ,
ActiveMQ, HornetQ, Qpid, TIBCO Enterprise Message Service, IBM MQ, Azure Ser‐
vice Bus, and Google Cloud Pub/Sub [16].
Multiple consumers
When multiple consumers read messages in the same topic, two main patterns of
messaging are used, as illustrated in Figure 11-1:
Load balancing
Each message is delivered to one of the consumers, so the consumers can share
the work of processing the messages in the topic. The broker may assign mes‐
sages to consumers arbitrarily. This pattern is useful when the messages are
expensive to process, and so you want to be able to add consumers to parallelize
the processing. (In AMQP, you can implement load balancing by having multi‐
ple clients consuming from the same queue, and in JMS it is called a shared
subscription.)
444 
| 
Chapter 11: Stream Processing
