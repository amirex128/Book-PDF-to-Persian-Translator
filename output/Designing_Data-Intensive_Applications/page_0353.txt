This situation is actually similar to a lock: when a user registers for your service, you
can think of them acquiring a “lock” on their chosen username. The operation is also
very similar to an atomic compare-and-set, setting the username to the ID of the user
who claimed it, provided that the username is not already taken.
Similar issues arise if you want to ensure that a bank account balance never goes neg‐
ative, or that you don’t sell more items than you have in stock in the warehouse, or
that two people don’t concurrently book the same seat on a flight or in a theater.
These constraints all require there to be a single up-to-date value (the account bal‐
ance, the stock level, the seat occupancy) that all nodes agree on.
In real applications, it is sometimes acceptable to treat such constraints loosely (for
example, if a flight is overbooked, you can move customers to a different flight and
offer them compensation for the inconvenience). In such cases, linearizability may
not be needed, and we will discuss such loosely interpreted constraints in “Timeliness
and Integrity” on page 524.
However, a hard uniqueness constraint, such as the one you typically find in rela‐
tional databases, requires linearizability. Other kinds of constraints, such as foreign
key or attribute constraints, can be implemented without requiring linearizability
[19].
Cross-channel timing dependencies
Notice a detail in Figure 9-1: if Alice hadn’t exclaimed the score, Bob wouldn’t have
known that the result of his query was stale. He would have just refreshed the page
again a few seconds later, and eventually seen the final score. The linearizability viola‐
tion was only noticed because there was an additional communication channel in the
system (Alice’s voice to Bob’s ears).
Similar situations can arise in computer systems. For example, say you have a website
where users can upload a photo, and a background process resizes the photos to
lower resolution for faster download (thumbnails). The architecture and dataflow of
this system is illustrated in Figure 9-5.
The image resizer needs to be explicitly instructed to perform a resizing job, and this
instruction is sent from the web server to the resizer via a message queue (see Chap‐
ter 11). The web server doesn’t place the entire photo on the queue, since most mes‐
sage brokers are designed for small messages, and a photo may be several megabytes
in size. Instead, the photo is first written to a file storage service, and once the write is
complete, the instruction to the resizer is placed on the queue.
Linearizability 
| 
331
