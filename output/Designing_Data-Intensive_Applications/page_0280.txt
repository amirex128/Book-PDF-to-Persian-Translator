The blocking of readers and writers is implemented by a having a lock on each object
in the database. The lock can either be in shared mode or in exclusive mode. The lock
is used as follows:
• If a transaction wants to read an object, it must first acquire the lock in shared
mode. Several transactions are allowed to hold the lock in shared mode simulta‐
neously, but if another transaction already has an exclusive lock on the object,
these transactions must wait.
• If a transaction wants to write to an object, it must first acquire the lock in exclu‐
sive mode. No other transaction may hold the lock at the same time (either in
shared or in exclusive mode), so if there is any existing lock on the object, the
transaction must wait.
• If a transaction first reads and then writes an object, it may upgrade its shared
lock to an exclusive lock. The upgrade works the same as getting an exclusive
lock directly.
• After a transaction has acquired the lock, it must continue to hold the lock until
the end of the transaction (commit or abort). This is where the name “two-
phase” comes from: the first phase (while the transaction is executing) is when
the locks are acquired, and the second phase (at the end of the transaction) is
when all the locks are released.
Since so many locks are in use, it can happen quite easily that transaction A is stuck
waiting for transaction B to release its lock, and vice versa. This situation is called
deadlock. The database automatically detects deadlocks between transactions and
aborts one of them so that the others can make progress. The aborted transaction
needs to be retried by the application.
Performance of two-phase locking
The big downside of two-phase locking, and the reason why it hasn’t been used by
everybody since the 1970s, is performance: transaction throughput and response
times of queries are significantly worse under two-phase locking than under weak
isolation.
This is partly due to the overhead of acquiring and releasing all those locks, but more
importantly due to reduced concurrency. By design, if two concurrent transactions
try to do anything that may in any way result in a race condition, one has to wait for
the other to complete.
Traditional relational databases don’t limit the duration of a transaction, because
they are designed for interactive applications that wait for human input. Conse‐
quently, when one transaction has to wait on another, there is no limit on how long it
may have to wait. Even if you make sure that you keep all your transactions short, a
258 
| 
Chapter 7: Transactions
