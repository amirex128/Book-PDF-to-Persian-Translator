ii. Another example of a uniform interface is URLs and HTTP, the foundations of the web. A URL identifies
a particular thing (resource) on a website, and you can link to any URL from any other website. A user with a
web browser can thus seamlessly jump between websites by following links, even though the servers may be
operated by entirely unrelated organizations. This principle seems obvious today, but it was a key insight in
making the web the success that it is today. Prior systems were not so uniform: for example, in the era of
bulletin board systems (BBSs), each system had its own phone number and baud rate configuration. A refer‐
ence from one BBS to another would have to be in the form of a phone number and modem settings; the user
would have to hang up, dial the other BBS, and then manually find the information they were looking for. It
wasn’t possible to link directly to some piece of content inside another BBS.
The sort tool is a great example of a program that does one thing well. It is arguably
a better sorting implementation than most programming languages have in their
standard libraries (which do not spill to disk and do not use multiple threads, even
when that would be beneficial). And yet, sort is barely useful in isolation. It only
becomes powerful in combination with the other Unix tools, such as uniq.
A Unix shell like bash lets us easily compose these small programs into surprisingly
powerful data processing jobs. Even though many of these programs are written by
different groups of people, they can be joined together in flexible ways. What does
Unix do to enable this composability?
A uniform interface
If you expect the output of one program to become the input to another program,
that means those programs must use the same data format—in other words, a com‐
patible interface. If you want to be able to connect any program’s output to any pro‐
gram’s input, that means that all programs must use the same input/output interface.
In Unix, that interface is a file (or, more precisely, a file descriptor). A file is just an
ordered sequence of bytes. Because that is such a simple interface, many different
things can be represented using the same interface: an actual file on the filesystem, a
communication channel to another process (Unix socket, stdin, stdout), a device
driver (say /dev/audio or /dev/lp0), a socket representing a TCP connection, and so
on. It’s easy to take this for granted, but it’s actually quite remarkable that these very
different things can share a uniform interface, so they can easily be plugged together.ii
By convention, many (but not all) Unix programs treat this sequence of bytes as
ASCII text. Our log analysis example used this fact: awk, sort, uniq, and head all treat
their input file as a list of records separated by the \n (newline, ASCII 0x0A) charac‐
ter. The choice of \n is arbitrary—arguably, the ASCII record separator 0x1E would
have been a better choice, since it’s intended for this purpose [14]—but in any case,
the fact that all these programs have standardized on using the same record separator
allows them to interoperate.
Batch Processing with Unix Tools 
| 
395
