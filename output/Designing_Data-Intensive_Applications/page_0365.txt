In order to maintain causality, you need to know which operation happened before
which other operation. This is a partial order: concurrent operations may be pro‐
cessed in any order, but if one operation happened before another, then they must be
processed in that order on every replica. Thus, when a replica processes an operation,
it must ensure that all causally preceding operations (all operations that happened
before) have already been processed; if some preceding operation is missing, the later
operation must wait until the preceding operation has been processed.
In order to determine causal dependencies, we need some way of describing the
“knowledge” of a node in the system. If a node had already seen the value X when it
issued the write Y, then X and Y may be causally related. The analysis uses the kinds
of questions you would expect in a criminal investigation of fraud charges: did the
CEO know about X at the time when they made decision Y?
The techniques for determining which operation happened before which other oper‐
ation are similar to what we discussed in “Detecting Concurrent Writes” on page 184.
That section discussed causality in a leaderless datastore, where we need to detect
concurrent writes to the same key in order to prevent lost updates. Causal consis‐
tency goes further: it needs to track causal dependencies across the entire database,
not just for a single key. Version vectors can be generalized to do this [54].
In order to determine the causal ordering, the database needs to know which version
of the data was read by the application. This is why, in Figure 5-13, the version num‐
ber from the prior operation is passed back to the database on a write. A similar idea
appears in the conflict detection of SSI, as discussed in “Serializable Snapshot Isola‐
tion (SSI)” on page 261: when a transaction wants to commit, the database checks
whether the version of the data that it read is still up to date. To this end, the database
keeps track of which data has been read by which transaction. 
Sequence Number Ordering
Although causality is an important theoretical concept, actually keeping track of all
causal dependencies can become impractical. In many applications, clients read lots
of data before writing something, and then it is not clear whether the write is causally
dependent on all or only some of those prior reads. Explicitly tracking all the data
that has been read would mean a large overhead.
However, there is a better way: we can use sequence numbers or timestamps to order
events. A timestamp need not come from a time-of-day clock (or physical clock,
which have many problems, as discussed in “Unreliable Clocks” on page 287). It can
instead come from a logical clock, which is an algorithm to generate a sequence of
numbers to identify operations, typically using counters that are incremented for
every operation.
Ordering Guarantees 
| 
343
