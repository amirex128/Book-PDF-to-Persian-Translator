Constructing and maintaining SSTables
Fine so far—but how do you get your data to be sorted by key in the first place? Our
incoming writes can occur in any order.
Maintaining a sorted structure on disk is possible (see “B-Trees” on page 79), but
maintaining it in memory is much easier. There are plenty of well-known tree data
structures that you can use, such as red-black trees or AVL trees [2]. With these data
structures, you can insert keys in any order and read them back in sorted order.
We can now make our storage engine work as follows:
• When a write comes in, add it to an in-memory balanced tree data structure (for
example, a red-black tree). This in-memory tree is sometimes called a memtable.
• When the memtable gets bigger than some threshold—typically a few megabytes
—write it out to disk as an SSTable file. This can be done efficiently because the
tree already maintains the key-value pairs sorted by key. The new SSTable file
becomes the most recent segment of the database. While the SSTable is being
written out to disk, writes can continue to a new memtable instance.
• In order to serve a read request, first try to find the key in the memtable, then in
the most recent on-disk segment, then in the next-older segment, etc.
• From time to time, run a merging and compaction process in the background to
combine segment files and to discard overwritten or deleted values.
This scheme works very well. It only suffers from one problem: if the database
crashes, the most recent writes (which are in the memtable but not yet written out to
disk) are lost. In order to avoid that problem, we can keep a separate log on disk to
which every write is immediately appended, just like in the previous section. That log
is not in sorted order, but that doesn’t matter, because its only purpose is to restore
the memtable after a crash. Every time the memtable is written out to an SSTable, the
corresponding log can be discarded.
Making an LSM-tree out of SSTables
The algorithm described here is essentially what is used in LevelDB [6] and RocksDB
[7], key-value storage engine libraries that are designed to be embedded into other
applications. Among other things, LevelDB can be used in Riak as an alternative to
Bitcask. Similar storage engines are used in Cassandra and HBase [8], both of which
were inspired by Google’s Bigtable paper [9] (which introduced the terms SSTable
and memtable).
Originally this indexing structure was described by Patrick O’Neil et al. under the
name Log-Structured Merge-Tree (or LSM-Tree) [10], building on earlier work on
78 
| 
Chapter 3: Storage and Retrieval
