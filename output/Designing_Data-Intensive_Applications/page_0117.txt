its stock-keeping unit (SKU), description, brand name, category, fat content, package
size, etc. Each row in the fact_sales table uses a foreign key to indicate which prod‐
uct was sold in that particular transaction. (For simplicity, if the customer buys sev‐
eral different products at once, they are represented as separate rows in the fact
table.)
Even date and time are often represented using dimension tables, because this allows
additional information about dates (such as public holidays) to be encoded, allowing
queries to differentiate between sales on holidays and non-holidays.
The name “star schema” comes from the fact that when the table relationships are
visualized, the fact table is in the middle, surrounded by its dimension tables; the
connections to these tables are like the rays of a star.
A variation of this template is known as the snowflake schema, where dimensions are
further broken down into subdimensions. For example, there could be separate tables
for brands and product categories, and each row in the dim_product table could ref‐
erence the brand and category as foreign keys, rather than storing them as strings in
the dim_product table. Snowflake schemas are more normalized than star schemas,
but star schemas are often preferred because they are simpler for analysts to work
with [55].
In a typical data warehouse, tables are often very wide: fact tables often have over 100
columns, sometimes several hundred [51]. Dimension tables can also be very wide, as
they include all the metadata that may be relevant for analysis—for example, the
dim_store table may include details of which services are offered at each store,
whether it has an in-store bakery, the square footage, the date when the store was first
opened, when it was last remodeled, how far it is from the nearest highway, etc. 
Column-Oriented Storage
If you have trillions of rows and petabytes of data in your fact tables, storing and
querying them efficiently becomes a challenging problem. Dimension tables are usu‐
ally much smaller (millions of rows), so in this section we will concentrate primarily
on storage of facts.
Although fact tables are often over 100 columns wide, a typical data warehouse query
only accesses 4 or 5 of them at one time ("SELECT *" queries are rarely needed for
analytics) [51]. Take the query in Example 3-1: it accesses a large number of rows
(every occurrence of someone buying fruit or candy during the 2013 calendar year),
but it only needs to access three columns of the fact_sales table: date_key,
product_sk, and quantity. The query ignores all other columns.
Column-Oriented Storage 
| 
95
