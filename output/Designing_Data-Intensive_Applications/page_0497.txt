iii. If you regard a stream as the derivative of a table, as in Figure 11-6, and regard a join as a product of two
tables u·v, something interesting happens: the stream of changes to the materialized join follows the product
rule (u·v)′ = u′v + uv′. In words: any change of tweets is joined with the current followers, and any change of
followers is joined with the current tweets [49, 50].
• When a user deletes a tweet, it is removed from all users’ timelines.
• When user u1 starts following user u2, recent tweets by u2 are added to u1’s
timeline.
• When user u1 unfollows user u2, tweets by u2 are removed from u1’s timeline.
To implement this cache maintenance in a stream processor, you need streams of
events for tweets (sending and deleting) and for follow relationships (following and
unfollowing). The stream process needs to maintain a database containing the set of
followers for each user so that it knows which timelines need to be updated when a
new tweet arrives [86].
Another way of looking at this stream process is that it maintains a materialized view
for a query that joins two tables (tweets and follows), something like the following:
SELECT follows.follower_id AS timeline_id,
  array_agg(tweets.* ORDER BY tweets.timestamp DESC)
FROM tweets
JOIN follows ON follows.followee_id = tweets.sender_id
GROUP BY follows.follower_id
The join of the streams corresponds directly to the join of the tables in that query.
The timelines are effectively a cache of the result of this query, updated every time the
underlying tables change.iii
Time-dependence of joins
The three types of joins described here (stream-stream, stream-table, and table-table)
have a lot in common: they all require the stream processor to maintain some state
(search and click events, user profiles, or follower list) based on one join input, and
query that state on messages from the other join input.
The order of the events that maintain the state is important (it matters whether you
first follow and then unfollow, or the other way round). In a partitioned log, the
ordering of events within a single partition is preserved, but there is typically no
ordering guarantee across different streams or partitions.
This raises a question: if events on different streams happen around a similar time, in
which order are they processed? In the stream-table join example, if a user updates
their profile, which activity events are joined with the old profile (processed before
the profile update), and which are joined with the new profile (processed after the
Processing Streams 
| 
475
