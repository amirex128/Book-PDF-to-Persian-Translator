Moreover, a server can itself be a client to another service (for example, a typical web
app server acts as client to a database). This approach is often used to decompose a
large application into smaller services by area of functionality, such that one service
makes a request to another when it requires some functionality or data from that
other service. This way of building applications has traditionally been called a service-
oriented architecture (SOA), more recently refined and rebranded as microservices
architecture [31, 32].
In some ways, services are similar to databases: they typically allow clients to submit
and query data. However, while databases allow arbitrary queries using the query lan‐
guages we discussed in Chapter 2, services expose an application-specific API that
only allows inputs and outputs that are predetermined by the business logic (applica‐
tion code) of the service [33]. This restriction provides a degree of encapsulation:
services can impose fine-grained restrictions on what clients can and cannot do.
A key design goal of a service-oriented/microservices architecture is to make the
application easier to change and maintain by making services independently deploya‐
ble and evolvable. For example, each service should be owned by one team, and that
team should be able to release new versions of the service frequently, without having
to coordinate with other teams. In other words, we should expect old and new ver‐
sions of servers and clients to be running at the same time, and so the data encoding
used by servers and clients must be compatible across versions of the service API—
precisely what we’ve been talking about in this chapter.
Web services
When HTTP is used as the underlying protocol for talking to the service, it is called a
web service. This is perhaps a slight misnomer, because web services are not only used
on the web, but in several different contexts. For example:
1. A client application running on a user’s device (e.g., a native app on a mobile
device, or JavaScript web app using Ajax) making requests to a service over
HTTP. These requests typically go over the public internet.
2. One service making requests to another service owned by the same organization,
often located within the same datacenter, as part of a service-oriented/microser‐
vices architecture. (Software that supports this kind of use case is sometimes
called middleware.)
3. One service making requests to a service owned by a different organization, usu‐
ally via the internet. This is used for data exchange between different organiza‐
tions’ backend systems. This category includes public APIs provided by online
services, such as credit card processing systems, or OAuth for shared access to
user data.
132 
| 
Chapter 4: Encoding and Evolution
