In order to prevent this anomaly, the database needs to track when a transaction
ignores another transaction’s writes due to MVCC visibility rules. When the transac‐
tion wants to commit, the database checks whether any of the ignored writes have
now been committed. If so, the transaction must be aborted.
Why wait until committing? Why not abort transaction 43 immediately when the
stale read is detected? Well, if transaction 43 was a read-only transaction, it wouldn’t
need to be aborted, because there is no risk of write skew. At the time when transac‐
tion 43 makes its read, the database doesn’t yet know whether that transaction is
going to later perform a write. Moreover, transaction 42 may yet abort or may still be
uncommitted at the time when transaction 43 is committed, and so the read may
turn out not to have been stale after all. By avoiding unnecessary aborts, SSI preserves
snapshot isolation’s support for long-running reads from a consistent snapshot.
Detecting writes that affect prior reads
The second case to consider is when another transaction modifies data after it has
been read. This case is illustrated in Figure 7-11.
Figure 7-11. In serializable snapshot isolation, detecting when one transaction modifies
another transaction’s reads.
In the context of two-phase locking we discussed index-range locks (see “Index-range
locks” on page 260), which allow the database to lock access to all rows matching
some search query, such as WHERE shift_id = 1234. We can use a similar technique
here, except that SSI locks don’t block other transactions.
264 
| 
Chapter 7: Transactions
