intricacies of sovereign states and nations), and varying granularity of data (Lucy’s
current residence is specified as a city, whereas her place of birth is specified only at
the level of a state).
You could imagine extending the graph to also include many other facts about Lucy
and Alain, or other people. For instance, you could use it to indicate any food aller‐
gies they have (by introducing a vertex for each allergen, and an edge between a per‐
son and an allergen to indicate an allergy), and link the allergens with a set of vertices
that show which foods contain which substances. Then you could write a query to
find out what is safe for each person to eat. Graphs are good for evolvability: as you
add features to your application, a graph can easily be extended to accommodate
changes in your application’s data structures.
The Cypher Query Language
Cypher is a declarative query language for property graphs, created for the Neo4j
graph database [37]. (It is named after a character in the movie The Matrix and is not
related to ciphers in cryptography [38].)
Example 2-3 shows the Cypher query to insert the lefthand portion of Figure 2-5 into
a graph database. The rest of the graph can be added similarly and is omitted for
readability. Each vertex is given a symbolic name like USA or Idaho, and other parts of
the query can use those names to create edges between the vertices, using an arrow
notation: (Idaho) -[:WITHIN]-> (USA) creates an edge labeled WITHIN, with Idaho
as the tail node and USA as the head node.
Example 2-3. A subset of the data in Figure 2-5, represented as a Cypher query
CREATE
  (NAmerica:Location {name:'North America', type:'continent'}),
  (USA:Location      {name:'United States', type:'country'  }),
  (Idaho:Location    {name:'Idaho',         type:'state'    }),
  (Lucy:Person       {name:'Lucy' }),
  (Idaho) -[:WITHIN]->  (USA)  -[:WITHIN]-> (NAmerica),
  (Lucy)  -[:BORN_IN]-> (Idaho)
When all the vertices and edges of Figure 2-5 are added to the database, we can start
asking interesting questions: for example, find the names of all the people who emigra‐
ted from the United States to Europe. To be more precise, here we want to find all the
vertices that have a BORN_IN edge to a location within the US, and also a LIVING_IN
edge to a location within Europe, and return the name property of each of those verti‐
ces.
Example 2-4 shows how to express that query in Cypher. The same arrow notation is
used in a MATCH clause to find patterns in the graph: (person) -[:BORN_IN]-> ()
52 
| 
Chapter 2: Data Models and Query Languages
