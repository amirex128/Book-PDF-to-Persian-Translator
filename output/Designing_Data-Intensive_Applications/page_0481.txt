Commands and events
The event sourcing philosophy is careful to distinguish between events and com‐
mands [48]. When a request from a user first arrives, it is initially a command: at this
point it may still fail, for example because some integrity condition is violated. The
application must first validate that it can execute the command. If the validation is
successful and the command is accepted, it becomes an event, which is durable and
immutable.
For example, if a user tries to register a particular username, or reserve a seat on an
airplane or in a theater, then the application needs to check that the username or seat
is not already taken. (We previously discussed this example in “Fault-Tolerant Con‐
sensus” on page 364.) When that check has succeeded, the application can generate
an event to indicate that a particular username was registered by a particular user ID,
or that a particular seat has been reserved for a particular customer.
At the point when the event is generated, it becomes a fact. Even if the customer later
decides to change or cancel the reservation, the fact remains true that they formerly
held a reservation for a particular seat, and the change or cancellation is a separate
event that is added later.
A consumer of the event stream is not allowed to reject an event: by the time the con‐
sumer sees the event, it is already an immutable part of the log, and it may have
already been seen by other consumers. Thus, any validation of a command needs to
happen synchronously, before it becomes an event—for example, by using a serializa‐
ble transaction that atomically validates the command and publishes the event.
Alternatively, the user request to reserve a seat could be split into two events: first a
tentative reservation, and then a separate confirmation event once the reservation has
been validated (as discussed in “Implementing linearizable storage using total order
broadcast” on page 350). This split allows the validation to take place in an asynchro‐
nous process. 
State, Streams, and Immutability
We saw in Chapter 10 that batch processing benefits from the immutability of its
input files, so you can run experimental processing jobs on existing input files
without fear of damaging them. This principle of immutability is also what makes
event sourcing and change data capture so powerful.
We normally think of databases as storing the current state of the application—this
representation is optimized for reads, and it is usually the most convenient for serv‐
ing queries. The nature of state is that it changes, so databases support updating and
deleting data as well as inserting it. How does this fit with immutability?
Databases and Streams 
| 
459
