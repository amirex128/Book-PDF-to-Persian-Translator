Graphs and Iterative Processing
In “Graph-Like Data Models” on page 49 we discussed using graphs for modeling
data, and using graph query languages to traverse the edges and vertices in a graph.
The discussion in Chapter 2 was focused around OLTP-style use: quickly executing
queries to find a small number of vertices matching certain criteria.
It is also interesting to look at graphs in a batch processing context, where the goal is
to perform some kind of offline processing or analysis on an entire graph. This need
often arises in machine learning applications such as recommendation engines, or in
ranking systems. For example, one of the most famous graph analysis algorithms is
PageRank [69], which tries to estimate the popularity of a web page based on what
other web pages link to it. It is used as part of the formula that determines the order
in which web search engines present their results.
Dataflow engines like Spark, Flink, and Tez (see “Materialization of
Intermediate State” on page 419) typically arrange the operators in
a job as a directed acyclic graph (DAG). This is not the same as
graph processing: in dataflow engines, the flow of data from one
operator to another is structured as a graph, while the data itself
typically consists of relational-style tuples. In graph processing, the
data itself has the form of a graph. Another unfortunate naming
confusion!
Many graph algorithms are expressed by traversing one edge at a time, joining one
vertex with an adjacent vertex in order to propagate some information, and repeating
until some condition is met—for example, until there are no more edges to follow, or
until some metric converges. We saw an example in Figure 2-6, which made a list of
all the locations in North America contained in a database by repeatedly following
edges indicating which location is within which other location (this kind of algorithm
is called a transitive closure).
It is possible to store a graph in a distributed filesystem (in files containing lists of
vertices and edges), but this idea of “repeating until done” cannot be expressed in
plain MapReduce, since it only performs a single pass over the data. This kind of
algorithm is thus often implemented in an iterative style:
1. An external scheduler runs a batch process to calculate one step of the algorithm.
2. When the batch process completes, the scheduler checks whether it has finished
(based on the completion condition—e.g., there are no more edges to follow, or
the change compared to the last iteration is below some threshold).
3. If it has not yet finished, the scheduler goes back to step 1 and runs another
round of the batch process.
424 
| 
Chapter 10: Batch Processing
