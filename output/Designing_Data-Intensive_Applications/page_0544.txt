Uniqueness in log-based messaging
The log ensures that all consumers see messages in the same order—a guarantee that
is formally known as total order broadcast and is equivalent to consensus (see “Total
Order Broadcast” on page 348). In the unbundled database approach with log-based
messaging, we can use a very similar approach to enforce uniqueness constraints.
A stream processor consumes all the messages in a log partition sequentially on a sin‐
gle thread (see “Logs compared to traditional messaging” on page 448). Thus, if the
log is partitioned based on the value that needs to be unique, a stream processor can
unambiguously and deterministically decide which one of several conflicting opera‐
tions came first. For example, in the case of several users trying to claim the same
username [57]:
1. Every request for a username is encoded as a message, and appended to a parti‐
tion determined by the hash of the username.
2. A stream processor sequentially reads the requests in the log, using a local data‐
base to keep track of which usernames are taken. For every request for a user‐
name that is available, it records the name as taken and emits a success message
to an output stream. For every request for a username that is already taken, it
emits a rejection message to an output stream.
3. The client that requested the username watches the output stream and waits for a
success or rejection message corresponding to its request.
This algorithm is basically the same as in “Implementing linearizable storage using
total order broadcast” on page 350. It scales easily to a large request throughput by
increasing the number of partitions, as each partition can be processed independ‐
ently.
The approach works not only for uniqueness constraints, but also for many other
kinds of constraints. Its fundamental principle is that any writes that may conflict are
routed to the same partition and processed sequentially. As discussed in “What is a
conflict?” on page 174 and “Write Skew and Phantoms” on page 246, the definition of
a conflict may depend on the application, but the stream processor can use arbitrary
logic to validate a request. This idea is similar to the approach pioneered by Bayou in
the 1990s [58].
Multi-partition request processing
Ensuring that an operation is executed atomically, while satisfying constraints,
becomes more interesting when several partitions are involved. In Example 12-2,
there are potentially three partitions: the one containing the request ID, the one con‐
taining the payee account, and the one containing the payer account. There is no rea‐
522 
| 
Chapter 12: The Future of Data Systems
