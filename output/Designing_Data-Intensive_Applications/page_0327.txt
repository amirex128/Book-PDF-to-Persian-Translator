A system is Byzantine fault-tolerant if it continues to operate correctly even if some
of the nodes are malfunctioning and not obeying the protocol, or if malicious attack‐
ers are interfering with the network. This concern is relevant in certain specific cir‐
cumstances. For example:
• In aerospace environments, the data in a computer’s memory or CPU register
could become corrupted by radiation, leading it to respond to other nodes in
arbitrarily unpredictable ways. Since a system failure would be very expensive
(e.g., an aircraft crashing and killing everyone on board, or a rocket colliding
with the International Space Station), flight control systems must tolerate Byzan‐
tine faults [81, 82].
• In a system with multiple participating organizations, some participants may
attempt to cheat or defraud others. In such circumstances, it is not safe for a
node to simply trust another node’s messages, since they may be sent with mali‐
cious intent. For example, peer-to-peer networks like Bitcoin and other block‐
chains can be considered to be a way of getting mutually untrusting parties to
agree whether a transaction happened or not, without relying on a central
authority [83].
However, in the kinds of systems we discuss in this book, we can usually safely
assume that there are no Byzantine faults. In your datacenter, all the nodes are con‐
trolled by your organization (so they can hopefully be trusted) and radiation levels
are low enough that memory corruption is not a major problem. Protocols for mak‐
ing systems Byzantine fault-tolerant are quite complicated [84], and fault-tolerant
embedded systems rely on support from the hardware level [81]. In most server-side
data systems, the cost of deploying Byzantine fault-tolerant solutions makes them
impractical.
Web applications do need to expect arbitrary and malicious behavior of clients that
are under end-user control, such as web browsers. This is why input validation, sani‐
tization, and output escaping are so important: to prevent SQL injection and cross-
site scripting, for example. However, we typically don’t use Byzantine fault-tolerant
protocols here, but simply make the server the authority on deciding what client
behavior is and isn’t allowed. In peer-to-peer networks, where there is no such cen‐
tral authority, Byzantine fault tolerance is more relevant.
A bug in the software could be regarded as a Byzantine fault, but if you deploy the
same software to all nodes, then a Byzantine fault-tolerant algorithm cannot save you.
Most Byzantine fault-tolerant algorithms require a supermajority of more than two-
thirds of the nodes to be functioning correctly (i.e., if you have four nodes, at most
one may malfunction). To use this approach against bugs, you would have to have
four independent implementations of the same software and hope that a bug only
appears in one of the four implementations.
Knowledge, Truth, and Lies 
| 
305
