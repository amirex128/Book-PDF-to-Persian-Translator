erately violated for business reasons, and compensation processes (refunds,
upgrades, providing a complimentary room at a neighboring hotel) are put in
place to handle situations in which demand exceeds supply. Even if there was no
overbooking, apology and compensation processes would be needed in order to
deal with flights being cancelled due to bad weather or staff on strike—recover‐
ing from such issues is just a normal part of business [3].
• If someone withdraws more money than they have in their account, the bank can
charge them an overdraft fee and ask them to pay back what they owe. By limit‐
ing the total withdrawals per day, the risk to the bank is bounded.
In many business contexts, it is actually acceptable to temporarily violate a constraint
and fix it up later by apologizing. The cost of the apology (in terms of money or repu‐
tation) varies, but it is often quite low: you can’t unsend an email, but you can send a
follow-up email with a correction. If you accidentally charge a credit card twice, you
can refund one of the charges, and the cost to you is just the processing fees and per‐
haps a customer complaint. Once money has been paid out of an ATM, you can’t
directly get it back, although in principle you can send debt collectors to recover the
money if the account was overdrawn and the customer won’t pay it back.
Whether the cost of the apology is acceptable is a business decision. If it is acceptable,
the traditional model of checking all constraints before even writing the data is
unnecessarily restrictive, and a linearizable constraint is not needed. It may well be a
reasonable choice to go ahead with a write optimistically, and to check the constraint
after the fact. You can still ensure that the validation occurs before doing things that
would be expensive to recover from, but that doesn’t imply you must do the valida‐
tion before you even write the data.
These applications do require integrity: you would not want to lose a reservation, or
have money disappear due to mismatched credits and debits. But they don’t require
timeliness on the enforcement of the constraint: if you have sold more items than you
have in the warehouse, you can patch up the problem after the fact by apologizing.
Doing so is similar to the conflict resolution approaches we discussed in “Handling
Write Conflicts” on page 171.
Coordination-avoiding data systems
We have now made two interesting observations:
1. Dataflow systems can maintain integrity guarantees on derived data without
atomic commit, linearizability, or synchronous cross-partition coordination.
2. Although strict uniqueness constraints require timeliness and coordination,
many applications are actually fine with loose constraints that may be temporar‐
ily violated and fixed up later, as long as integrity is preserved throughout.
Aiming for Correctness 
| 
527
