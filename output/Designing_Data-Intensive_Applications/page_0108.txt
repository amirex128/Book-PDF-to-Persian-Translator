mand, and they are often crucial for performing joins efficiently. For example, in
Figure 2-1 in Chapter 2 you would most likely have a secondary index on the
user_id columns so that you can find all the rows belonging to the same user in each
of the tables.
A secondary index can easily be constructed from a key-value index. The main differ‐
ence is that keys are not unique; i.e., there might be many rows (documents, vertices)
with the same key. This can be solved in two ways: either by making each value in the
index a list of matching row identifiers (like a postings list in a full-text index) or by
making each key unique by appending a row identifier to it. Either way, both B-trees
and log-structured indexes can be used as secondary indexes.
Storing values within the index
The key in an index is the thing that queries search for, but the value can be one of
two things: it could be the actual row (document, vertex) in question, or it could be a
reference to the row stored elsewhere. In the latter case, the place where rows are
stored is known as a heap file, and it stores data in no particular order (it may be
append-only, or it may keep track of deleted rows in order to overwrite them with
new data later). The heap file approach is common because it avoids duplicating data
when multiple secondary indexes are present: each index just references a location in
the heap file, and the actual data is kept in one place.
When updating a value without changing the key, the heap file approach can be quite
efficient: the record can be overwritten in place, provided that the new value is not
larger than the old value. The situation is more complicated if the new value is larger,
as it probably needs to be moved to a new location in the heap where there is enough
space. In that case, either all indexes need to be updated to point at the new heap
location of the record, or a forwarding pointer is left behind in the old heap location
[5].
In some situations, the extra hop from the index to the heap file is too much of a per‐
formance penalty for reads, so it can be desirable to store the indexed row directly
within an index. This is known as a clustered index. For example, in MySQL’s
InnoDB storage engine, the primary key of a table is always a clustered index, and
secondary indexes refer to the primary key (rather than a heap file location) [31]. In
SQL Server, you can specify one clustered index per table [32].
A compromise between a clustered index (storing all row data within the index) and
a nonclustered index (storing only references to the data within the index) is known
as a covering index or index with included columns, which stores some of a table’s col‐
umns within the index [33]. This allows some queries to be answered by using the
index alone (in which case, the index is said to cover the query) [32].
86 
| 
Chapter 3: Storage and Retrieval
