• The structure of the data is determined by external systems over which you have
no control and which may change at any time.
In situations like these, a schema may hurt more than it helps, and schemaless docu‐
ments can be a much more natural data model. But in cases where all records are
expected to have the same structure, schemas are a useful mechanism for document‐
ing and enforcing that structure. We will discuss schemas and schema evolution in
more detail in Chapter 4.
Data locality for queries
A document is usually stored as a single continuous string, encoded as JSON, XML,
or a binary variant thereof (such as MongoDB’s BSON). If your application often
needs to access the entire document (for example, to render it on a web page), there is
a performance advantage to this storage locality. If data is split across multiple tables,
like in Figure 2-1, multiple index lookups are required to retrieve it all, which may
require more disk seeks and take more time.
The locality advantage only applies if you need large parts of the document at the
same time. The database typically needs to load the entire document, even if you
access only a small portion of it, which can be wasteful on large documents. On
updates to a document, the entire document usually needs to be rewritten—only
modifications that don’t change the encoded size of a document can easily be per‐
formed in place [19]. For these reasons, it is generally recommended that you keep
documents fairly small and avoid writes that increase the size of a document [9].
These performance limitations significantly reduce the set of situations in which
document databases are useful.
It’s worth pointing out that the idea of grouping related data together for locality is
not limited to the document model. For example, Google’s Spanner database offers
the same locality properties in a relational data model, by allowing the schema to
declare that a table’s rows should be interleaved (nested) within a parent table [27].
Oracle allows the same, using a feature called multi-table index cluster tables [28].
The column-family concept in the Bigtable data model (used in Cassandra and
HBase) has a similar purpose of managing locality [29].
We will also see more on locality in Chapter 3.
Convergence of document and relational databases
Most relational database systems (other than MySQL) have supported XML since the
mid-2000s. This includes functions to make local modifications to XML documents
and the ability to index and query inside XML documents, which allows applications
to use data models very similar to what they would do when using a document data‐
base.
Relational Model Versus Document Model 
| 
41
