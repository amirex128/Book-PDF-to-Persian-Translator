that application servers can be added and removed at will. However, when the
coordinator is part of the application server, it changes the nature of the deploy‐
ment. Suddenly, the coordinator’s logs become a crucial part of the durable sys‐
tem state—as important as the databases themselves, since the coordinator logs
are required in order to recover in-doubt transactions after a crash. Such applica‐
tion servers are no longer stateless.
• Since XA needs to be compatible with a wide range of data systems, it is necessar‐
ily a lowest common denominator. For example, it cannot detect deadlocks
across different systems (since that would require a standardized protocol for
systems to exchange information on the locks that each transaction is waiting
for), and it does not work with SSI (see “Serializable Snapshot Isolation (SSI)” on
page 261), since that would require a protocol for identifying conflicts across dif‐
ferent systems.
• For database-internal distributed transactions (not XA), the limitations are not
so great—for example, a distributed version of SSI is possible. However, there
remains the problem that for 2PC to successfully commit a transaction, all par‐
ticipants must respond. Consequently, if any part of the system is broken, the
transaction also fails. Distributed transactions thus have a tendency of amplifying
failures, which runs counter to our goal of building fault-tolerant systems.
Do these facts mean we should give up all hope of keeping several systems consistent
with each other? Not quite—there are alternative methods that allow us to achieve
the same thing without the pain of heterogeneous distributed transactions. We will
return to these in Chapters 11 and 12. But first, we should wrap up the topic of
consensus. 
Fault-Tolerant Consensus
Informally, consensus means getting several nodes to agree on something. For exam‐
ple, if several people concurrently try to book the last seat on an airplane, or the same
seat in a theater, or try to register an account with the same username, then a consen‐
sus algorithm could be used to determine which one of these mutually incompatible
operations should be the winner.
The consensus problem is normally formalized as follows: one or more nodes may
propose values, and the consensus algorithm decides on one of those values. In the
seat-booking example, when several customers are concurrently trying to buy the last
seat, each node handling a customer request may propose the ID of the customer it is
serving, and the decision indicates which one of those customers got the seat.
364 
| 
Chapter 9: Consistency and Consensus
