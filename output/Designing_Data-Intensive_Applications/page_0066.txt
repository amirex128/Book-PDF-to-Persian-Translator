Declarative Queries on the Web
The advantages of declarative query languages are not limited to just databases. To
illustrate the point, let’s compare declarative and imperative approaches in a com‐
pletely different environment: a web browser.
Say you have a website about animals in the ocean. The user is currently viewing the
page on sharks, so you mark the navigation item “Sharks” as currently selected, like
this:
<ul>
    <li class="selected"> 
        <p>Sharks</p> 
        <ul>
            <li>Great White Shark</li>
            <li>Tiger Shark</li>
            <li>Hammerhead Shark</li>
        </ul>
    </li>
    <li>
        <p>Whales</p>
        <ul>
            <li>Blue Whale</li>
            <li>Humpback Whale</li>
            <li>Fin Whale</li>
        </ul>
    </li>
</ul>
The selected item is marked with the CSS class "selected".
<p>Sharks</p> is the title of the currently selected page.
Now say you want the title of the currently selected page to have a blue background,
so that it is visually highlighted. This is easy, using CSS:
li.selected > p {
    background-color: blue;
}
Here the CSS selector li.selected > p declares the pattern of elements to which we
want to apply the blue style: namely, all <p> elements whose direct parent is an <li>
element with a CSS class of selected. The element <p>Sharks</p> in the example
matches this pattern, but <p>Whales</p> does not match because its <li> parent
lacks class="selected".
44 
| 
Chapter 2: Data Models and Query Languages
