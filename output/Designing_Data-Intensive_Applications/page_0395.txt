A membership service determines which nodes are currently active and live members
of a cluster. As we saw throughout Chapter 8, due to unbounded network delays it’s
not possible to reliably detect whether another node has failed. However, if you cou‐
ple failure detection with consensus, nodes can come to an agreement about which
nodes should be considered alive or not.
It could still happen that a node is incorrectly declared dead by consensus, even
though it is actually alive. But it is nevertheless very useful for a system to have agree‐
ment on which nodes constitute the current membership. For example, choosing a
leader could mean simply choosing the lowest-numbered among the current mem‐
bers, but this approach would not work if different nodes have divergent opinions on
who the current members are. 
Summary
In this chapter we examined the topics of consistency and consensus from several dif‐
ferent angles. We looked in depth at linearizability, a popular consistency model: its
goal is to make replicated data appear as though there were only a single copy, and to
make all operations act on it atomically. Although linearizability is appealing because
it is easy to understand—it makes a database behave like a variable in a single-
threaded program—it has the downside of being slow, especially in environments
with large network delays.
We also explored causality, which imposes an ordering on events in a system (what
happened before what, based on cause and effect). Unlike linearizability, which puts
all operations in a single, totally ordered timeline, causality provides us with a weaker
consistency model: some things can be concurrent, so the version history is like a
timeline with branching and merging. Causal consistency does not have the coordi‐
nation overhead of linearizability and is much less sensitive to network problems.
However, even if we capture the causal ordering (for example using Lamport time‐
stamps), we saw that some things cannot be implemented this way: in “Timestamp
ordering is not sufficient” on page 347 we considered the example of ensuring that a
username is unique and rejecting concurrent registrations for the same username. If
one node is going to accept a registration, it needs to somehow know that another
node isn’t concurrently in the process of registering the same name. This problem led
us toward consensus.
We saw that achieving consensus means deciding something in such a way that all
nodes agree on what was decided, and such that the decision is irrevocable. With
some digging, it turns out that a wide range of problems are actually reducible to
consensus and are equivalent to each other (in the sense that if you have a solution
for one of them, you can easily transform it into a solution for one of the others).
Such equivalent problems include:
Summary 
| 
373
