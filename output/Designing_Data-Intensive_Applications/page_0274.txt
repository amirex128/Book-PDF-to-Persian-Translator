• If you look at your application code, it’s difficult to tell whether it is safe to run at
a particular isolation level—especially in a large application, where you might not
be aware of all the things that may be happening concurrently.
• There are no good tools to help us detect race conditions. In principle, static
analysis may help [26], but research techniques have not yet found their way into
practical use. Testing for concurrency issues is hard, because they are usually
nondeterministic—problems only occur if you get unlucky with the timing.
This is not a new problem—it has been like this since the 1970s, when weak isolation
levels were first introduced [2]. All along, the answer from researchers has been sim‐
ple: use serializable isolation!
Serializable isolation is usually regarded as the strongest isolation level. It guarantees
that even though transactions may execute in parallel, the end result is the same as if
they had executed one at a time, serially, without any concurrency. Thus, the database
guarantees that if the transactions behave correctly when run individually, they con‐
tinue to be correct when run concurrently—in other words, the database prevents all
possible race conditions.
But if serializable isolation is so much better than the mess of weak isolation levels,
then why isn’t everyone using it? To answer this question, we need to look at the
options for implementing serializability, and how they perform. Most databases that
provide serializability today use one of three techniques, which we will explore in the
rest of this chapter:
• Literally executing transactions in a serial order (see “Actual Serial Execution” on
page 252)
• Two-phase locking (see “Two-Phase Locking (2PL)” on page 257), which for sev‐
eral decades was the only viable option
• Optimistic concurrency control techniques such as serializable snapshot isolation
(see “Serializable Snapshot Isolation (SSI)” on page 261)
For now, we will discuss these techniques primarily in the context of single-node
databases; in Chapter 9 we will examine how they can be generalized to transactions
that involve multiple nodes in a distributed system.
Actual Serial Execution
The simplest way of avoiding concurrency problems is to remove the concurrency
entirely: to execute only one transaction at a time, in serial order, on a single thread.
By doing so, we completely sidestep the problem of detecting and preventing con‐
flicts between transactions: the resulting isolation is by definition serializable.
252 
| 
Chapter 7: Transactions
