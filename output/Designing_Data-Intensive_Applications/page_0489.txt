Maintaining materialized views
We saw in “Databases and Streams” on page 451 that a stream of changes to a data‐
base can be used to keep derived data systems, such as caches, search indexes, and
data warehouses, up to date with a source database. We can regard these examples as
specific cases of maintaining materialized views (see “Aggregation: Data Cubes and
Materialized Views” on page 101): deriving an alternative view onto some dataset so
that you can query it efficiently, and updating that view whenever the underlying
data changes [50].
Similarly, in event sourcing, application state is maintained by applying a log of
events; here the application state is also a kind of materialized view. Unlike stream
analytics scenarios, it is usually not sufficient to consider only events within some
time window: building the materialized view potentially requires all events over an
arbitrary time period, apart from any obsolete events that may be discarded by log
compaction (see “Log compaction” on page 456). In effect, you need a window that
stretches all the way back to the beginning of time.
In principle, any stream processor could be used for materialized view maintenance,
although the need to maintain events forever runs counter to the assumptions of
some analytics-oriented frameworks that mostly operate on windows of a limited
duration. Samza and Kafka Streams support this kind of usage, building upon Kafka’s
support for log compaction [75].
Search on streams
Besides CEP, which allows searching for patterns consisting of multiple events, there
is also sometimes a need to search for individual events based on complex criteria,
such as full-text search queries.
For example, media monitoring services subscribe to feeds of news articles and
broadcasts from media outlets, and search for any news mentioning companies,
products, or topics of interest. This is done by formulating a search query in advance,
and then continually matching the stream of news items against this query. Similar
features exist on some websites: for example, users of real estate websites can ask to
be notified when a new property matching their search criteria appears on the mar‐
ket. The percolator feature of Elasticsearch [76] is one option for implementing this
kind of stream search.
Conventional search engines first index the documents and then run queries over the
index. By contrast, searching a stream turns the processing on its head: the queries
are stored, and the documents run past the queries, like in CEP. In the simplest case,
you can test every document against every query, although this can get slow if you
have a large number of queries. To optimize the process, it is possible to index the
queries as well as the documents, and thus narrow down the set of queries that may
match [77].
Processing Streams 
| 
467
