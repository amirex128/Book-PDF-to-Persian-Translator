An application makes a query, reads the result, perhaps makes another query
depending on the result of the first query, and so on. The queries and results are sent
back and forth between the application code (running on one machine) and the data‐
base server (on another machine).
In this interactive style of transaction, a lot of time is spent in network communica‐
tion between the application and the database. If you were to disallow concurrency in
the database and only process one transaction at a time, the throughput would be
dreadful because the database would spend most of its time waiting for the applica‐
tion to issue the next query for the current transaction. In this kind of database, it’s
necessary to process multiple transactions concurrently in order to get reasonable
performance.
For this reason, systems with single-threaded serial transaction processing don’t
allow interactive multi-statement transactions. Instead, the application must submit
the entire transaction code to the database ahead of time, as a stored procedure. The
differences between these approaches is illustrated in Figure 7-9. Provided that all
data required by a transaction is in memory, the stored procedure can execute very
fast, without waiting for any network or disk I/O.
Figure 7-9. The difference between an interactive transaction and a stored procedure
(using the example transaction of Figure 7-8).
254 
| 
Chapter 7: Transactions
