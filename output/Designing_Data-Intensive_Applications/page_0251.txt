iii. This is not ideal. If the TCP connection is interrupted, the transaction must be aborted. If the interruption
happens after the client has requested a commit but before the server acknowledges that the commit hap‐
pened, the client doesn’t know whether the transaction was committed or not. To solve this issue, a transac‐
tion manager can group operations by a unique transaction identifier that is not bound to a particular TCP
connection. We will return to this topic in “The End-to-End Argument for Databases” on page 516.
Figure 7-2. Violating isolation: one transaction reads another transaction’s uncommit‐
ted writes (a “dirty read”).
Figure 7-3 illustrates the need for atomicity: if an error occurs somewhere over the
course of the transaction, the contents of the mailbox and the unread counter might
become out of sync. In an atomic transaction, if the update to the counter fails, the
transaction is aborted and the inserted email is rolled back.
Figure 7-3. Atomicity ensures that if an error occurs any prior writes from that transac‐
tion are undone, to avoid an inconsistent state.
Multi-object transactions require some way of determining which read and write
operations belong to the same transaction. In relational databases, that is typically
done based on the client’s TCP connection to the database server: on any particular
connection, everything between a BEGIN TRANSACTION and a COMMIT statement is
considered to be part of the same transaction.iii
The Slippery Concept of a Transaction 
| 
229
