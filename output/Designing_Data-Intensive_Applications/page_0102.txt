Introduced in 1970 [17] and called “ubiquitous” less than 10 years later [18], B-trees
have stood the test of time very well. They remain the standard index implementation
in almost all relational databases, and many nonrelational databases use them too.
Like SSTables, B-trees keep key-value pairs sorted by key, which allows efficient key-
value lookups and range queries. But that’s where the similarity ends: B-trees have a
very different design philosophy.
The log-structured indexes we saw earlier break the database down into variable-size
segments, typically several megabytes or more in size, and always write a segment
sequentially. By contrast, B-trees break the database down into fixed-size blocks or
pages, traditionally 4 KB in size (sometimes bigger), and read or write one page at a
time. This design corresponds more closely to the underlying hardware, as disks are
also arranged in fixed-size blocks.
Each page can be identified using an address or location, which allows one page to
refer to another—similar to a pointer, but on disk instead of in memory. We can use
these page references to construct a tree of pages, as illustrated in Figure 3-6.
Figure 3-6. Looking up a key using a B-tree index.
One page is designated as the root of the B-tree; whenever you want to look up a key
in the index, you start here. The page contains several keys and references to child
pages. Each child is responsible for a continuous range of keys, and the keys between
the references indicate where the boundaries between those ranges lie.
In the example in Figure 3-6, we are looking for the key 251, so we know that we need
to follow the page reference between the boundaries 200 and 300. That takes us to a
similar-looking page that further breaks down the 200–300 range into subranges.
80 
| 
Chapter 3: Storage and Retrieval
