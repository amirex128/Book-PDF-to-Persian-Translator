As with any kind of duplication of data, clustered and covering indexes can speed up
reads, but they require additional storage and can add overhead on writes. Databases
also need to go to additional effort to enforce transactional guarantees, because appli‐
cations should not see inconsistencies due to the duplication.
Multi-column indexes
The indexes discussed so far only map a single key to a value. That is not sufficient if
we need to query multiple columns of a table (or multiple fields in a document)
simultaneously.
The most common type of multi-column index is called a concatenated index, which
simply combines several fields into one key by appending one column to another (the
index definition specifies in which order the fields are concatenated). This is like an
old-fashioned paper phone book, which provides an index from (lastname, first‐
name) to phone number. Due to the sort order, the index can be used to find all the
people with a particular last name, or all the people with a particular lastname-
firstname combination. However, the index is useless if you want to find all the peo‐
ple with a particular first name.
Multi-dimensional indexes are a more general way of querying several columns at
once, which is particularly important for geospatial data. For example, a restaurant-
search website may have a database containing the latitude and longitude of each res‐
taurant. When a user is looking at the restaurants on a map, the website needs to
search for all the restaurants within the rectangular map area that the user is cur‐
rently viewing. This requires a two-dimensional range query like the following:
SELECT * FROM restaurants WHERE latitude  > 51.4946 AND latitude  < 51.5079
                            AND longitude > -0.1162 AND longitude < -0.1004;
A standard B-tree or LSM-tree index is not able to answer that kind of query effi‐
ciently: it can give you either all the restaurants in a range of latitudes (but at any lon‐
gitude), or all the restaurants in a range of longitudes (but anywhere between the
North and South poles), but not both simultaneously.
One option is to translate a two-dimensional location into a single number using a
space-filling curve, and then to use a regular B-tree index [34]. More commonly, spe‐
cialized spatial indexes such as R-trees are used. For example, PostGIS implements
geospatial indexes as R-trees using PostgreSQL’s Generalized Search Tree indexing
facility [35]. We don’t have space to describe R-trees in detail here, but there is plenty
of literature on them.
An interesting idea is that multi-dimensional indexes are not just for geographic
locations. For example, on an ecommerce website you could use a three-dimensional
index on the dimensions (red, green, blue) to search for products in a certain range of
colors, or in a database of weather observations you could have a two-dimensional
Data Structures That Power Your Database 
| 
87
