That’s a fairly abstract idea—there are many ways data can flow from one process to
another. Who encodes the data, and who decodes it? In the rest of this chapter we
will explore some of the most common ways how data flows between processes:
• Via databases (see “Dataflow Through Databases” on page 129)
• Via service calls (see “Dataflow Through Services: REST and RPC” on page 131)
• Via asynchronous message passing (see “Message-Passing Dataflow” on page 136)
Dataflow Through Databases
In a database, the process that writes to the database encodes the data, and the pro‐
cess that reads from the database decodes it. There may just be a single process
accessing the database, in which case the reader is simply a later version of the same
process—in that case you can think of storing something in the database as sending a
message to your future self.
Backward compatibility is clearly necessary here; otherwise your future self won’t be
able to decode what you previously wrote.
In general, it’s common for several different processes to be accessing a database at
the same time. Those processes might be several different applications or services, or
they may simply be several instances of the same service (running in parallel for scal‐
ability or fault tolerance). Either way, in an environment where the application is
changing, it is likely that some processes accessing the database will be running newer
code and some will be running older code—for example because a new version is cur‐
rently being deployed in a rolling upgrade, so some instances have been updated
while others haven’t yet.
This means that a value in the database may be written by a newer version of the
code, and subsequently read by an older version of the code that is still running.
Thus, forward compatibility is also often required for databases.
However, there is an additional snag. Say you add a field to a record schema, and the
newer code writes a value for that new field to the database. Subsequently, an older
version of the code (which doesn’t yet know about the new field) reads the record,
updates it, and writes it back. In this situation, the desirable behavior is usually for
the old code to keep the new field intact, even though it couldn’t be interpreted.
The encoding formats discussed previously support such preservation of unknown
fields, but sometimes you need to take care at an application level, as illustrated in
Figure 4-7. For example, if you decode a database value into model objects in the
application, and later reencode those model objects, the unknown field might be lost
in that translation process. Solving this is not a hard problem; you just need to be
aware of it.
Modes of Dataflow 
| 
129
