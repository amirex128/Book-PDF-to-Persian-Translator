Figure II-1. A database split into two partitions, with two replicas per partition.
With an understanding of those concepts, we can discuss the difficult trade-offs that
you need to make in a distributed system. We’ll discuss transactions in Chapter 7, as
that will help you understand all the many things that can go wrong in a data system,
and what you can do about them. We’ll conclude this part of the book by discussing
the fundamental limitations of distributed systems in Chapters 8 and 9.
Later, in Part III of this book, we will discuss how you can take several (potentially
distributed) datastores and integrate them into a larger system, satisfying the needs of
a complex application. But first, let’s talk about distributed data.
References
[1] Ulrich Drepper: “What Every Programmer Should Know About Memory,” akka‐
dia.org, November 21, 2007.
[2] Ben Stopford: “Shared Nothing vs. Shared Disk Architectures: An Independent
View,” benstopford.com, November 24, 2009.
[3] Michael Stonebraker: “The Case for Shared Nothing,” IEEE Database Engineering
Bulletin, volume 9, number 1, pages 4–9, March 1986.
[4] Frank McSherry, Michael Isard, and Derek G. Murray: “Scalability! But at What
COST?,” at 15th USENIX Workshop on Hot Topics in Operating Systems (HotOS),
May 2015.
