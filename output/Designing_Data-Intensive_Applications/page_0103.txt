ii. Inserting a new key into a B-tree is reasonably intuitive, but deleting one (while keeping the tree balanced)
is somewhat more involved [2].
Eventually we get down to a page containing individual keys (a leaf page), which
either contains the value for each key inline or contains references to the pages where
the values can be found.
The number of references to child pages in one page of the B-tree is called the
branching factor. For example, in Figure 3-6 the branching factor is six. In practice,
the branching factor depends on the amount of space required to store the page refer‐
ences and the range boundaries, but typically it is several hundred.
If you want to update the value for an existing key in a B-tree, you search for the leaf
page containing that key, change the value in that page, and write the page back to
disk (any references to that page remain valid). If you want to add a new key, you
need to find the page whose range encompasses the new key and add it to that page.
If there isn’t enough free space in the page to accommodate the new key, it is split
into two half-full pages, and the parent page is updated to account for the new subdi‐
vision of key ranges—see Figure 3-7.ii
Figure 3-7. Growing a B-tree by splitting a page.
This algorithm ensures that the tree remains balanced: a B-tree with n keys always
has a depth of O(log n). Most databases can fit into a B-tree that is three or four levels
deep, so you don’t need to follow many page references to find the page you are look‐
ing for. (A four-level tree of 4 KB pages with a branching factor of 500 can store up to
256 TB.)
Data Structures That Power Your Database 
| 
81
