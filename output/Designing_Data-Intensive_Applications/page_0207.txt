The problem is that events may arrive in a different order at different nodes, due to
variable network delays and partial failures. For example, Figure 5-12 shows two cli‐
ents, A and B, simultaneously writing to a key X in a three-node datastore:
• Node 1 receives the write from A, but never receives the write from B due to a
transient outage.
• Node 2 first receives the write from A, then the write from B.
• Node 3 first receives the write from B, then the write from A.
Figure 5-12. Concurrent writes in a Dynamo-style datastore: there is no well-defined
ordering.
If each node simply overwrote the value for a key whenever it received a write request
from a client, the nodes would become permanently inconsistent, as shown by the
final get request in Figure 5-12: node 2 thinks that the final value of X is B, whereas
the other nodes think that the value is A.
In order to become eventually consistent, the replicas should converge toward the
same value. How do they do that? One might hope that replicated databases would
handle this automatically, but unfortunately most implementations are quite poor: if
you want to avoid losing data, you—the application developer—need to know a lot
about the internals of your database’s conflict handling.
We briefly touched on some techniques for conflict resolution in “Handling Write
Conflicts” on page 171. Before we wrap up this chapter, let’s explore the issue in a bit
more detail.
Leaderless Replication 
| 
185
