ii. This approach is known as fencing or, more emphatically, Shoot The Other Node In The Head (STONITH).
We will discuss fencing in more detail in “The leader and the lock” on page 301.
rows, but because the new leader’s counter lagged behind the old leader’s, it
reused some primary keys that were previously assigned by the old leader. These
primary keys were also used in a Redis store, so the reuse of primary keys resul‐
ted in inconsistency between MySQL and Redis, which caused some private data
to be disclosed to the wrong users.
• In certain fault scenarios (see Chapter 8), it could happen that two nodes both
believe that they are the leader. This situation is called split brain, and it is dan‐
gerous: if both leaders accept writes, and there is no process for resolving con‐
flicts (see “Multi-Leader Replication” on page 168), data is likely to be lost or
corrupted. As a safety catch, some systems have a mechanism to shut down one
node if two leaders are detected.ii However, if this mechanism is not carefully
designed, you can end up with both nodes being shut down [14].
• What is the right timeout before the leader is declared dead? A longer timeout
means a longer time to recovery in the case where the leader fails. However, if the
timeout is too short, there could be unnecessary failovers. For example, a tempo‐
rary load spike could cause a node’s response time to increase above the timeout,
or a network glitch could cause delayed packets. If the system is already strug‐
gling with high load or network problems, an unnecessary failover is likely to
make the situation worse, not better.
There are no easy solutions to these problems. For this reason, some operations
teams prefer to perform failovers manually, even if the software supports automatic
failover.
These issues—node failures; unreliable networks; and trade-offs around replica con‐
sistency, durability, availability, and latency—are in fact fundamental problems in
distributed systems. In Chapter 8 and Chapter 9 we will discuss them in greater
depth.
Implementation of Replication Logs
How does leader-based replication work under the hood? Several different replica‐
tion methods are used in practice, so let’s look at each one briefly.
Statement-based replication
In the simplest case, the leader logs every write request (statement) that it executes
and sends that statement log to its followers. For a relational database, this means
that every INSERT, UPDATE, or DELETE statement is forwarded to followers, and each
158 
| 
Chapter 5: Replication
