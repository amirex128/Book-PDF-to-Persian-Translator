Figure 9-9. A successful execution of two-phase commit (2PC).
Don’t confuse 2PC and 2PL
Two-phase commit (2PC) and two-phase locking (see “Two-Phase
Locking (2PL)” on page 257) are two very different things. 2PC
provides atomic commit in a distributed database, whereas 2PL
provides serializable isolation. To avoid confusion, it’s best to think
of them as entirely separate concepts and to ignore the unfortunate
similarity in the names.
2PC uses a new component that does not normally appear in single-node transac‐
tions: a coordinator (also known as transaction manager). The coordinator is often
implemented as a library within the same application process that is requesting the
transaction (e.g., embedded in a Java EE container), but it can also be a separate pro‐
cess or service. Examples of such coordinators include Narayana, JOTM, BTM, or
MSDTC.
A 2PC transaction begins with the application reading and writing data on multiple
database nodes, as normal. We call these database nodes participants in the transac‐
tion. When the application is ready to commit, the coordinator begins phase 1: it
sends a prepare request to each of the nodes, asking them whether they are able to
commit. The coordinator then tracks the responses from the participants:
• If all participants reply “yes,” indicating they are ready to commit, then the coor‐
dinator sends out a commit request in phase 2, and the commit actually takes
place.
• If any of the participants replies “no,” the coordinator sends an abort request to
all nodes in phase 2.
This process is somewhat like the traditional marriage ceremony in Western cultures:
the minister asks the bride and groom individually whether each wants to marry the
other, and typically receives the answer “I do” from both. After receiving both
356 
| 
Chapter 9: Consistency and Consensus
