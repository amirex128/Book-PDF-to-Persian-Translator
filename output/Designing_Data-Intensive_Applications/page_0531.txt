the failure of another service. The fastest and most reliable network request is no net‐
work request at all! Instead of RPC, we now have a stream join between purchase
events and exchange rate update events (see “Stream-table join (stream enrichment)”
on page 473).
The join is time-dependent: if the purchase events are reprocessed at a later point in
time, the exchange rate will have changed. If you want to reconstruct the original out‐
put, you will need to obtain the historical exchange rate at the original time of pur‐
chase. No matter whether you query a service or subscribe to a stream of exchange
rate updates, you will need to handle this time dependence (see “Time-dependence of
joins” on page 475).
Subscribing to a stream of changes, rather than querying the current state when
needed, brings us closer to a spreadsheet-like model of computation: when some
piece of data changes, any derived data that depends on it can swiftly be updated.
There are still many open questions, for example around issues like time-dependent
joins, but I believe that building applications around dataflow ideas is a very promis‐
ing direction to go in. 
Observing Derived State
At an abstract level, the dataflow systems discussed in the last section give you a pro‐
cess for creating derived datasets (such as search indexes, materialized views, and
predictive models) and keeping them up to date. Let’s call that process the write path:
whenever some piece of information is written to the system, it may go through mul‐
tiple stages of batch and stream processing, and eventually every derived dataset is
updated to incorporate the data that was written. Figure 12-1 shows an example of
updating a search index.
Figure 12-1. In a search index, writes (document updates) meet reads (queries).
But why do you create the derived dataset in the first place? Most likely because you
want to query it again at a later time. This is the read path: when serving a user
Unbundling Databases 
| 
509
