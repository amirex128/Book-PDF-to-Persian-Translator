Large Hadron Collider (LHC), 64
last write wins (LWW), 173, 334
discarding concurrent writes, 186
problems with, 292
prone to lost updates, 246
late binding, 396
latency
instability under two-phase locking, 259
network latency and resource utilization,
286
response time versus, 14
tail latency, 15, 207
leader-based replication, 152-161
(see also replication)
failover, 157, 301
handling node outages, 156
implementation of replication logs
change data capture, 454-457
(see also changelogs)
statement-based, 158
trigger-based replication, 161
write-ahead log (WAL) shipping, 159
linearizability of operations, 333
locking and leader election, 330
log sequence number, 156, 449
read-scaling architecture, 161
relation to consensus, 367
setting up new followers, 155
synchronous versus asynchronous, 153-155
leaderless replication, 177-191
(see also replication)
detecting concurrent writes, 184-191
capturing happens-before relationship,
187
happens-before relationship and concur‚Äê
rency, 186
last write wins, 186
merging concurrently written values,
190
version vectors, 191
multi-datacenter, 184
quorums, 179-182
consistency limitations, 181-183, 334
sloppy quorums and hinted handoff, 183
read repair and anti-entropy, 178
leap seconds, 8, 290
in time-of-day clocks, 288
leases, 295
implementation with ZooKeeper, 370
need for fencing, 302
ledgers, 460
distributed ledger technologies, 532
legacy systems, maintenance of, 18
less (Unix tool), 397
LevelDB (storage engine), 78
leveled compaction, 79
Levenshtein automata, 88
limping (partial failure), 311
linearizability, 324-338, 555
cost of, 335-338
CAP theorem, 336
memory on multi-core CPUs, 338
definition, 325-329
implementing with total order broadcast,
350
in ZooKeeper, 370
of derived data systems, 492, 524
avoiding coordination, 527
of different replication methods, 332-335
using quorums, 334
relying on, 330-332
constraints and uniqueness, 330
cross-channel timing dependencies, 331
locking and leader election, 330
stronger than causal consistency, 342
using to implement total order broadcast,
351
versus serializability, 329
LinkedIn
Azkaban (workflow scheduler), 402
Databus (change data capture), 161, 455
Espresso (database), 31, 126, 130, 153, 216
Helix (cluster manager) (see Helix)
profile (example), 30
reference to company entity (example), 34
Rest.li (RPC framework), 135
Voldemort (database) (see Voldemort)
Linux, leap second bug, 8, 290
liveness properties, 308
LMDB (storage engine), 82, 242
load
approaches to coping with, 17
describing, 11
load testing, 16
load balancing (messaging), 444
local indexes (see document-partitioned
indexes)
locality (data access), 32, 41, 555
574 
| 
Index
