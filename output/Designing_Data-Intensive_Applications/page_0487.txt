change: with a batch job that has been running for a few minutes, a failed task can
simply be restarted from the beginning, but with a stream job that has been running
for several years, restarting from the beginning after a crash may not be a viable
option.
Uses of Stream Processing
Stream processing has long been used for monitoring purposes, where an organiza‐
tion wants to be alerted if certain things happen. For example:
• Fraud detection systems need to determine if the usage patterns of a credit card
have unexpectedly changed, and block the card if it is likely to have been stolen.
• Trading systems need to examine price changes in a financial market and execute
trades according to specified rules.
• Manufacturing systems need to monitor the status of machines in a factory, and
quickly identify the problem if there is a malfunction.
• Military and intelligence systems need to track the activities of a potential aggres‐
sor, and raise the alarm if there are signs of an attack.
These kinds of applications require quite sophisticated pattern matching and correla‐
tions. However, other uses of stream processing have also emerged over time. In this
section we will briefly compare and contrast some of these applications.
Complex event processing
Complex event processing (CEP) is an approach developed in the 1990s for analyzing
event streams, especially geared toward the kind of application that requires search‐
ing for certain event patterns [65, 66]. Similarly to the way that a regular expression
allows you to search for certain patterns of characters in a string, CEP allows you to
specify rules to search for certain patterns of events in a stream.
CEP systems often use a high-level declarative query language like SQL, or a graphi‐
cal user interface, to describe the patterns of events that should be detected. These
queries are submitted to a processing engine that consumes the input streams and
internally maintains a state machine that performs the required matching. When a
match is found, the engine emits a complex event (hence the name) with the details of
the event pattern that was detected [67].
In these systems, the relationship between queries and data is reversed compared to
normal databases. Usually, a database stores data persistently and treats queries as
transient: when a query comes in, the database searches for data matching the query,
and then forgets about the query when it has finished. CEP engines reverse these
roles: queries are stored long-term, and events from the input streams continuously
flow past them in search of a query that matches an event pattern [68].
Processing Streams 
| 
465
