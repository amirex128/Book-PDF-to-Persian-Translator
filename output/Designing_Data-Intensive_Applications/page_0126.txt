Finishing off the OLTP side, we did a brief tour through some more complicated
indexing structures, and databases that are optimized for keeping all data in memory.
We then took a detour from the internals of storage engines to look at the high-level
architecture of a typical data warehouse. This background illustrated why analytic
workloads are so different from OLTP: when your queries require sequentially scan‐
ning across a large number of rows, indexes are much less relevant. Instead it
becomes important to encode data very compactly, to minimize the amount of data
that the query needs to read from disk. We discussed how column-oriented storage
helps achieve this goal.
As an application developer, if you’re armed with this knowledge about the internals
of storage engines, you are in a much better position to know which tool is best suited
for your particular application. If you need to adjust a database’s tuning parameters,
this understanding allows you to imagine what effect a higher or a lower value may
have.
Although this chapter couldn’t make you an expert in tuning any one particular stor‐
age engine, it has hopefully equipped you with enough vocabulary and ideas that you
can make sense of the documentation for the database of your choice. 
References
[1] Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman: Data Structures and
Algorithms. Addison-Wesley, 1983. ISBN: 978-0-201-00023-8
[2] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein:
Introduction to Algorithms, 3rd edition. MIT Press, 2009. ISBN: 978-0-262-53305-8
[3] Justin Sheehy and David Smith: “Bitcask: A Log-Structured Hash Table for Fast
Key/Value Data,” Basho Technologies, April 2010.
[4] Yinan Li, Bingsheng He, Robin Jun Yang, et al.: “Tree Indexing on Solid State
Drives,” Proceedings of the VLDB Endowment, volume 3, number 1, pages 1195–1206,
September 2010.
[5] Goetz Graefe: “Modern B-Tree Techniques,” Foundations and Trends in Data‐
bases, volume 3, number 4, pages 203–402, August 2011. doi:10.1561/1900000028
[6] Jeffrey Dean and Sanjay Ghemawat: “LevelDB Implementation Notes,” lev‐
eldb.googlecode.com.
[7] Dhruba Borthakur: “The History of RocksDB,” rocksdb.blogspot.com, November
24, 2013.
[8] Matteo Bertozzi: “Apache HBase I/O – HFile,” blog.cloudera.com, June, 29 2012.
104 
| 
Chapter 3: Storage and Retrieval
