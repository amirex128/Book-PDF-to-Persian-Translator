If a system obeys the ordering imposed by causality, we say that it is causally consis‐
tent. For example, snapshot isolation provides causal consistency: when you read
from the database, and you see some piece of data, then you must also be able to see
any data that causally precedes it (assuming it has not been deleted in the meantime).
The causal order is not a total order
A total order allows any two elements to be compared, so if you have two elements,
you can always say which one is greater and which one is smaller. For example, natu‐
ral numbers are totally ordered: if I give you any two numbers, say 5 and 13, you can
tell me that 13 is greater than 5.
However, mathematical sets are not totally ordered: is {a, b} greater than {b, c}? Well,
you can’t really compare them, because neither is a subset of the other. We say they
are incomparable, and therefore mathematical sets are partially ordered: in some cases
one set is greater than another (if one set contains all the elements of another), but in
other cases they are incomparable.
The difference between a total order and a partial order is reflected in different data‐
base consistency models:
Linearizability
In a linearizable system, we have a total order of operations: if the system behaves
as if there is only a single copy of the data, and every operation is atomic, this
means that for any two operations we can always say which one happened first.
This total ordering is illustrated as a timeline in Figure 9-4.
Causality
We said that two operations are concurrent if neither happened before the other
(see “The “happens-before” relationship and concurrency” on page 186). Put
another way, two events are ordered if they are causally related (one happened
before the other), but they are incomparable if they are concurrent. This means
that causality defines a partial order, not a total order: some operations are
ordered with respect to each other, but some are incomparable.
Therefore, according to this definition, there are no concurrent operations in a line‐
arizable datastore: there must be a single timeline along which all operations are
totally ordered. There might be several requests waiting to be handled, but the data‐
store ensures that every request is handled atomically at a single point in time, acting
on a single copy of the data, along a single timeline, without any concurrency.
Concurrency would mean that the timeline branches and merges again—and in this
case, operations on different branches are incomparable (i.e., concurrent). We saw
this phenomenon in Chapter 5: for example, Figure 5-14 is not a straight-line total
order, but rather a jumble of different operations going on concurrently. The arrows
in the diagram indicate causal dependencies—the partial ordering of operations.
Ordering Guarantees 
| 
341
