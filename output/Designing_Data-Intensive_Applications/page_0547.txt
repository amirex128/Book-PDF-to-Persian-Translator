If integrity is violated, the inconsistency is permanent: waiting and trying again is
not going to fix database corruption in most cases. Instead, explicit checking and
repair is needed. In the context of ACID transactions (see “The Meaning of
ACID” on page 223), consistency is usually understood as some kind of
application-specific notion of integrity. Atomicity and durability are important
tools for preserving integrity.
In slogan form: violations of timeliness are “eventual consistency,” whereas violations
of integrity are “perpetual inconsistency.”
I am going to assert that in most applications, integrity is much more important than
timeliness. Violations of timeliness can be annoying and confusing, but violations of
integrity can be catastrophic.
For example, on your credit card statement, it is not surprising if a transaction that
you made within the last 24 hours does not yet appear—it is normal that these sys‐
tems have a certain lag. We know that banks reconcile and settle transactions asyn‐
chronously, and timeliness is not very important here [3]. However, it would be very
bad if the statement balance was not equal to the sum of the transactions plus the
previous statement balance (an error in the sums), or if a transaction was charged to
you but not paid to the merchant (disappearing money). Such problems would be
violations of the integrity of the system.
Correctness of dataflow systems
ACID transactions usually provide both timeliness (e.g., linearizability) and integrity
(e.g., atomic commit) guarantees. Thus, if you approach application correctness from
the point of view of ACID transactions, the distinction between timeliness and integ‐
rity is fairly inconsequential.
On the other hand, an interesting property of the event-based dataflow systems that
we have discussed in this chapter is that they decouple timeliness and integrity. When
processing event streams asynchronously, there is no guarantee of timeliness, unless
you explicitly build consumers that wait for a message to arrive before returning. But
integrity is in fact central to streaming systems.
Exactly-once or effectively-once semantics (see “Fault Tolerance” on page 476) is a
mechanism for preserving integrity. If an event is lost, or if an event takes effect
twice, the integrity of a data system could be violated. Thus, fault-tolerant message
delivery and duplicate suppression (e.g., idempotent operations) are important for
maintaining the integrity of a data system in the face of faults.
As we saw in the last section, reliable stream processing systems can preserve integ‐
rity without requiring distributed transactions and an atomic commit protocol,
which means they can potentially achieve comparable correctness with much better
Aiming for Correctness 
| 
525
