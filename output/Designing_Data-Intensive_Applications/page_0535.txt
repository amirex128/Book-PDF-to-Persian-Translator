internal client-side state by subscribing to a stream of events representing user input
or responses from a server, structured similarly to event sourcing (see “Event Sourc‐
ing” on page 457).
It would be very natural to extend this programming model to also allow a server to
push state-change events into this client-side event pipeline. Thus, state changes
could flow through an end-to-end write path: from the interaction on one device that
triggers a state change, via event logs and through several derived data systems and
stream processors, all the way to the user interface of a person observing the state on
another device. These state changes could be propagated with fairly low delay—say,
under one second end to end.
Some applications, such as instant messaging and online games, already have such a
“real-time” architecture (in the sense of interactions with low delay, not in the sense
of “Response time guarantees” on page 298). But why don’t we build all applications
this way?
The challenge is that the assumption of stateless clients and request/response interac‐
tions is very deeply ingrained in our databases, libraries, frameworks, and protocols.
Many datastores support read and write operations where a request returns one
response, but much fewer provide an ability to subscribe to changes—i.e., a request
that returns a stream of responses over time (see “API support for change streams”
on page 456).
In order to extend the write path all the way to the end user, we would need to funda‐
mentally rethink the way we build many of these systems: moving away from request/
response interaction and toward publish/subscribe dataflow [27]. I think that the
advantages of more responsive user interfaces and better offline support would make
it worth the effort. If you are designing data systems, I hope that you will keep in
mind the option of subscribing to changes, not just querying the current state.
Reads are events too
We discussed that when a stream processor writes derived data to a store (database,
cache, or index), and when user requests query that store, the store acts as the bound‐
ary between the write path and the read path. The store allows random-access read
queries to the data that would otherwise require scanning the whole event log.
In many cases, the data storage is separate from the streaming system. But recall that
stream processors also need to maintain state to perform aggregations and joins (see
“Stream Joins” on page 472). This state is normally hidden inside the stream pro‐
cessor, but some frameworks allow it to also be queried by outside clients [45], turn‐
ing the stream processor itself into a kind of simple database.
I would like to take that idea further. As discussed so far, the writes to the store go
through an event log, while reads are transient network requests that go directly to
Unbundling Databases 
| 
513
