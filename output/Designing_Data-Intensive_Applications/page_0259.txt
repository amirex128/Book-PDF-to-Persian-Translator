vi. At the time of writing, the only mainstream databases that use locks for read committed isolation are IBM
DB2 and Microsoft SQL Server in the read_committed_snapshot=off configuration [23, 36].
For that reason, most databasesvi prevent dirty reads using the approach illustrated in
Figure 7-4: for every object that is written, the database remembers both the old com‐
mitted value and the new value set by the transaction that currently holds the write
lock. While the transaction is ongoing, any other transactions that read the object are
simply given the old value. Only when the new value is committed do transactions
switch over to reading the new value. 
Snapshot Isolation and Repeatable Read
If you look superficially at read committed isolation, you could be forgiven for think‐
ing that it does everything that a transaction needs to do: it allows aborts (required
for atomicity), it prevents reading the incomplete results of transactions, and it pre‐
vents concurrent writes from getting intermingled. Indeed, those are useful features,
and much stronger guarantees than you can get from a system that has no transac‐
tions.
However, there are still plenty of ways in which you can have concurrency bugs when
using this isolation level. For example, Figure 7-6 illustrates a problem that can occur
with read committed.
Figure 7-6. Read skew: Alice observes the database in an inconsistent state.
Say Alice has $1,000 of savings at a bank, split across two accounts with $500 each.
Now a transaction transfers $100 from one of her accounts to the other. If she is
unlucky enough to look at her list of account balances in the same moment as that
transaction is being processed, she may see one account balance at a time before the
Weak Isolation Levels 
| 
237
