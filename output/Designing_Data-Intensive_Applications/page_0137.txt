• There is optional schema support for both XML [11] and JSON [12]. These
schema languages are quite powerful, and thus quite complicated to learn and
implement. Use of XML schemas is fairly widespread, but many JSON-based
tools don’t bother using schemas. Since the correct interpretation of data (such
as numbers and binary strings) depends on information in the schema, applica‐
tions that don’t use XML/JSON schemas need to potentially hardcode the appro‐
priate encoding/decoding logic instead.
• CSV does not have any schema, so it is up to the application to define the mean‐
ing of each row and column. If an application change adds a new row or column,
you have to handle that change manually. CSV is also a quite vague format (what
happens if a value contains a comma or a newline character?). Although its
escaping rules have been formally specified [13], not all parsers implement them
correctly.
Despite these flaws, JSON, XML, and CSV are good enough for many purposes. It’s
likely that they will remain popular, especially as data interchange formats (i.e., for
sending data from one organization to another). In these situations, as long as people
agree on what the format is, it often doesn’t matter how pretty or efficient the format
is. The difficulty of getting different organizations to agree on anything outweighs
most other concerns.
Binary encoding
For data that is used only internally within your organization, there is less pressure to
use a lowest-common-denominator encoding format. For example, you could choose
a format that is more compact or faster to parse. For a small dataset, the gains are
negligible, but once you get into the terabytes, the choice of data format can have a
big impact.
JSON is less verbose than XML, but both still use a lot of space compared to binary
formats. This observation led to the development of a profusion of binary encodings
for JSON (MessagePack, BSON, BJSON, UBJSON, BISON, and Smile, to name a few)
and for XML (WBXML and Fast Infoset, for example). These formats have been
adopted in various niches, but none of them are as widely adopted as the textual ver‐
sions of JSON and XML.
Some of these formats extend the set of datatypes (e.g., distinguishing integers and
floating-point numbers, or adding support for binary strings), but otherwise they
keep the JSON/XML data model unchanged. In particular, since they don’t prescribe
a schema, they need to include all the object field names within the encoded data.
That is, in a binary encoding of the JSON document in Example 4-1, they will need to
include the strings userName, favoriteNumber, and interests somewhere.
Formats for Encoding Data 
| 
115
