i. Explaining a joke rarely improves it, but I don’t want anyone to feel left out. Here, Church is a reference to
the mathematician Alonzo Church, who created the lambda calculus, an early form of computation that is the
basis for most functional programming languages. The lambda calculus has no mutable state (i.e., no vari‐
ables that can be overwritten), so one could say that mutable state is separate from Church’s work.
poorly suited for this purpose. They do not fit well with the requirements of modern
application development, such as dependency and package management, version
control, rolling upgrades, evolvability, monitoring, metrics, calls to network services,
and integration with external systems.
On the other hand, deployment and cluster management tools such as Mesos, YARN,
Docker, Kubernetes, and others are designed specifically for the purpose of running
application code. By focusing on doing one thing well, they are able to do it much
better than a database that provides execution of user-defined functions as one of its
many features.
I think it makes sense to have some parts of a system that specialize in durable data
storage, and other parts that specialize in running application code. The two can
interact while still remaining independent.
Most web applications today are deployed as stateless services, in which any user
request can be routed to any application server, and the server forgets everything
about the request once it has sent the response. This style of deployment is conve‐
nient, as servers can be added or removed at will, but the state has to go somewhere:
typically, a database. The trend has been to keep stateless application logic separate
from state management (databases): not putting application logic in the database and
not putting persistent state in the application [36]. As people in the functional pro‐
gramming community like to joke, “We believe in the separation of Church and
state” [37].i
In this typical web application model, the database acts as a kind of mutable shared
variable that can be accessed synchronously over the network. The application can
read and update the variable, and the database takes care of making it durable, pro‐
viding some concurrency control and fault tolerance.
However, in most programming languages you cannot subscribe to changes in a
mutable variable—you can only read it periodically. Unlike in a spreadsheet, readers
of the variable don’t get notified if the value of the variable changes. (You can imple‐
ment such notifications in your own code—this is known as the observer pattern—
but most languages do not have this pattern as a built-in feature.)
Databases have inherited this passive approach to mutable data: if you want to find
out whether the content of the database has changed, often your only option is to poll
(i.e., to repeat your query periodically). Subscribing to changes is only just beginning
to emerge as a feature (see “API support for change streams” on page 456).
506 
| 
Chapter 12: The Future of Data Systems
