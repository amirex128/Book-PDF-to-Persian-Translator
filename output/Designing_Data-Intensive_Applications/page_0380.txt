mitted when it recovers—since the participant voted “yes,” it cannot refuse to
commit when it recovers.
Thus, the protocol contains two crucial “points of no return”: when a participant
votes “yes,” it promises that it will definitely be able to commit later (although the
coordinator may still choose to abort); and once the coordinator decides, that deci‐
sion is irrevocable. Those promises ensure the atomicity of 2PC. (Single-node atomic
commit lumps these two events into one: writing the commit record to the transac‐
tion log.)
Returning to the marriage analogy, before saying “I do,” you and your bride/groom
have the freedom to abort the transaction by saying “No way!” (or something to that
effect). However, after saying “I do,” you cannot retract that statement. If you faint
after saying “I do” and you don’t hear the minister speak the words “You are now
husband and wife,” that doesn’t change the fact that the transaction was committed.
When you recover consciousness later, you can find out whether you are married or
not by querying the minister for the status of your global transaction ID, or you can
wait for the minister’s next retry of the commit request (since the retries will have
continued throughout your period of unconsciousness).
Coordinator failure
We have discussed what happens if one of the participants or the network fails during
2PC: if any of the prepare requests fail or time out, the coordinator aborts the trans‐
action; if any of the commit or abort requests fail, the coordinator retries them indefi‐
nitely. However, it is less clear what happens if the coordinator crashes.
If the coordinator fails before sending the prepare requests, a participant can safely
abort the transaction. But once the participant has received a prepare request and
voted “yes,” it can no longer abort unilaterally—it must wait to hear back from the
coordinator whether the transaction was committed or aborted. If the coordinator
crashes or the network fails at this point, the participant can do nothing but wait. A
participant’s transaction in this state is called in doubt or uncertain.
The situation is illustrated in Figure 9-10. In this particular example, the coordinator
actually decided to commit, and database 2 received the commit request. However,
the coordinator crashed before it could send the commit request to database 1, and so
database 1 does not know whether to commit or abort. Even a timeout does not help
here: if database 1 unilaterally aborts after a timeout, it will end up inconsistent with
database 2, which has committed. Similarly, it is not safe to unilaterally commit,
because another participant may have aborted.
358 
| 
Chapter 9: Consistency and Consensus
