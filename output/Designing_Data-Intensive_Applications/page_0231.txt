partitions of the index (every term in the document might be on a different partition,
on a different node).
In an ideal world, the index would always be up to date, and every document written
to the database would immediately be reflected in the index. However, in a term-
partitioned index, that would require a distributed transaction across all partitions
affected by a write, which is not supported in all databases (see Chapter 7 and Chap‐
ter 9).
In practice, updates to global secondary indexes are often asynchronous (that is, if
you read the index shortly after a write, the change you just made may not yet be
reflected in the index). For example, Amazon DynamoDB states that its global secon‐
dary indexes are updated within a fraction of a second in normal circumstances, but
may experience longer propagation delays in cases of faults in the infrastructure [20].
Other uses of global term-partitioned indexes include Riak’s search feature [21] and
the Oracle data warehouse, which lets you choose between local and global indexing
[22]. We will return to the topic of implementing term-partitioned secondary indexes
in Chapter 12. 
Rebalancing Partitions
Over time, things change in a database:
• The query throughput increases, so you want to add more CPUs to handle the
load.
• The dataset size increases, so you want to add more disks and RAM to store it.
• A machine fails, and other machines need to take over the failed machine’s
responsibilities.
All of these changes call for data and requests to be moved from one node to another.
The process of moving load from one node in the cluster to another is called reba‐
lancing.
No matter which partitioning scheme is used, rebalancing is usually expected to meet
some minimum requirements:
• After rebalancing, the load (data storage, read and write requests) should be
shared fairly between the nodes in the cluster.
• While rebalancing is happening, the database should continue accepting reads
and writes.
• No more data than necessary should be moved between nodes, to make rebalanc‐
ing fast and to minimize the network and disk I/O load.
Rebalancing Partitions 
| 
209
