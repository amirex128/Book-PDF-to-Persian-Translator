Dynamic partitioning
For databases that use key range partitioning (see “Partitioning by Key Range” on
page 202), a fixed number of partitions with fixed boundaries would be very incon‐
venient: if you got the boundaries wrong, you could end up with all of the data in one
partition and all of the other partitions empty. Reconfiguring the partition bound‐
aries manually would be very tedious.
For that reason, key range–partitioned databases such as HBase and RethinkDB cre‐
ate partitions dynamically. When a partition grows to exceed a configured size (on
HBase, the default is 10 GB), it is split into two partitions so that approximately half
of the data ends up on each side of the split [26]. Conversely, if lots of data is deleted
and a partition shrinks below some threshold, it can be merged with an adjacent par‐
tition. This process is similar to what happens at the top level of a B-tree (see “B-
Trees” on page 79).
Each partition is assigned to one node, and each node can handle multiple partitions,
like in the case of a fixed number of partitions. After a large partition has been split,
one of its two halves can be transferred to another node in order to balance the load.
In the case of HBase, the transfer of partition files happens through HDFS, the
underlying distributed filesystem [3].
An advantage of dynamic partitioning is that the number of partitions adapts to the
total data volume. If there is only a small amount of data, a small number of parti‐
tions is sufficient, so overheads are small; if there is a huge amount of data, the size of
each individual partition is limited to a configurable maximum [23].
However, a caveat is that an empty database starts off with a single partition, since
there is no a priori information about where to draw the partition boundaries. While
the dataset is small—until it hits the point at which the first partition is split—all
writes have to be processed by a single node while the other nodes sit idle. To miti‐
gate this issue, HBase and MongoDB allow an initial set of partitions to be configured
on an empty database (this is called pre-splitting). In the case of key-range partition‐
ing, pre-splitting requires that you already know what the key distribution is going to
look like [4, 26].
Dynamic partitioning is not only suitable for key range–partitioned data, but can
equally well be used with hash-partitioned data. MongoDB since version 2.4 supports
both key-range and hash partitioning, and it splits partitions dynamically in either
case.
Partitioning proportionally to nodes
With dynamic partitioning, the number of partitions is proportional to the size of the
dataset, since the splitting and merging processes keep the size of each partition
between some fixed minimum and maximum. On the other hand, with a fixed num‐
212 
| 
Chapter 6: Partitioning
