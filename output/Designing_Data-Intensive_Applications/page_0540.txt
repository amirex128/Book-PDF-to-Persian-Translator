work fault, and tell it whether to commit or abort an in-doubt transaction. Is this suf‐
ficient to ensure that the transaction will only be executed once? Unfortunately not.
Even if we can suppress duplicate transactions between the database client and
server, we still need to worry about the network between the end-user device and the
application server. For example, if the end-user client is a web browser, it probably
uses an HTTP POST request to submit an instruction to the server. Perhaps the user
is on a weak cellular data connection, and they succeed in sending the POST, but the
signal becomes too weak before they are able to receive the response from the server.
In this case, the user will probably be shown an error message, and they may retry
manually. Web browsers warn, “Are you sure you want to submit this form again?”—
and the user says yes, because they wanted the operation to happen. (The Post/Redi‐
rect/Get pattern [54] avoids this warning message in normal operation, but it doesn’t
help if the POST request times out.) From the web server’s point of view the retry is a
separate request, and from the database’s point of view it is a separate transaction.
The usual deduplication mechanisms don’t help.
Operation identifiers
To make the operation idempotent through several hops of network communication,
it is not sufficient to rely just on a transaction mechanism provided by a database—
you need to consider the end-to-end flow of the request.
For example, you could generate a unique identifier for an operation (such as a
UUID) and include it as a hidden form field in the client application, or calculate a
hash of all the relevant form fields to derive the operation ID [3]. If the web browser
submits the POST request twice, the two requests will have the same operation ID.
You can then pass that operation ID all the way through to the database and check
that you only ever execute one operation with a given ID, as shown in Example 12-2.
Example 12-2. Suppressing duplicate requests using a unique ID
ALTER TABLE requests ADD UNIQUE (request_id);
BEGIN TRANSACTION;
INSERT INTO requests
  (request_id, from_account, to_account, amount)
  VALUES('0286FDB8-D7E1-423F-B40B-792B3608036C', 4321, 1234, 11.00);
UPDATE accounts SET balance = balance + 11.00 WHERE account_id = 1234;
UPDATE accounts SET balance = balance - 11.00 WHERE account_id = 4321;
COMMIT;
518 
| 
Chapter 12: The Future of Data Systems
