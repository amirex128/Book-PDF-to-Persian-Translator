CHAPTER 3
Storage and Retrieval
Wer Ordnung hält, ist nur zu faul zum Suchen.
(If you keep things tidily ordered, you’re just too lazy to go searching.)
—German proverb
On the most fundamental level, a database needs to do two things: when you give it
some data, it should store the data, and when you ask it again later, it should give the
data back to you.
In Chapter 2 we discussed data models and query languages—i.e., the format in
which you (the application developer) give the database your data, and the mecha‐
nism by which you can ask for it again later. In this chapter we discuss the same from
the database’s point of view: how we can store the data that we’re given, and how we
can find it again when we’re asked for it.
Why should you, as an application developer, care how the database handles storage
and retrieval internally? You’re probably not going to implement your own storage
engine from scratch, but you do need to select a storage engine that is appropriate for
your application, from the many that are available. In order to tune a storage engine
to perform well on your kind of workload, you need to have a rough idea of what the
storage engine is doing under the hood.
In particular, there is a big difference between storage engines that are optimized for
transactional workloads and those that are optimized for analytics. We will explore
that distinction later in “Transaction Processing or Analytics?” on page 90, and in
“Column-Oriented Storage” on page 95 we’ll discuss a family of storage engines that
is optimized for analytics.
However, first we’ll start this chapter by talking about storage engines that are used in
the kinds of databases that you’re probably familiar with: traditional relational data‐
bases, and also most so-called NoSQL databases. We will examine two families of
69
