In some cases it is possible to use a special message to indicate, “From now on there
will be no more messages with a timestamp earlier than t,” which can be used by con‐
sumers to trigger windows [81]. However, if several producers on different machines
are generating events, each with their own minimum timestamp thresholds, the con‐
sumers need to keep track of each producer individually. Adding and removing pro‐
ducers is trickier in this case.
Whose clock are you using, anyway?
Assigning timestamps to events is even more difficult when events can be buffered at
several points in the system. For example, consider a mobile app that reports events
for usage metrics to a server. The app may be used while the device is offline, in
which case it will buffer events locally on the device and send them to a server when
an internet connection is next available (which may be hours or even days later). To
any consumers of this stream, the events will appear as extremely delayed stragglers.
In this context, the timestamp on the events should really be the time at which the
user interaction occurred, according to the mobile device’s local clock. However, the
clock on a user-controlled device often cannot be trusted, as it may be accidentally or
deliberately set to the wrong time (see “Clock Synchronization and Accuracy” on
page 289). The time at which the event was received by the server (according to the
server’s clock) is more likely to be accurate, since the server is under your control, but
less meaningful in terms of describing the user interaction.
To adjust for incorrect device clocks, one approach is to log three timestamps [82]:
• The time at which the event occurred, according to the device clock
• The time at which the event was sent to the server, according to the device clock
• The time at which the event was received by the server, according to the server
clock
By subtracting the second timestamp from the third, you can estimate the offset
between the device clock and the server clock (assuming the network delay is negligi‐
ble compared to the required timestamp accuracy). You can then apply that offset to
the event timestamp, and thus estimate the true time at which the event actually
occurred (assuming the device clock offset did not change between the time the event
occurred and the time it was sent to the server).
This problem is not unique to stream processing—batch processing suffers from
exactly the same issues of reasoning about time. It is just more noticeable in a stream‐
ing context, where we are more aware of the passage of time.
Processing Streams 
| 
471
