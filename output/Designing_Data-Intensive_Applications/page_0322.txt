Knowledge, Truth, and Lies
So far in this chapter we have explored the ways in which distributed systems are dif‐
ferent from programs running on a single computer: there is no shared memory, only
message passing via an unreliable network with variable delays, and the systems may
suffer from partial failures, unreliable clocks, and processing pauses.
The consequences of these issues are profoundly disorienting if you’re not used to
distributed systems. A node in the network cannot know anything for sure—it can
only make guesses based on the messages it receives (or doesn’t receive) via the net‐
work. A node can only find out what state another node is in (what data it has stored,
whether it is correctly functioning, etc.) by exchanging messages with it. If a remote
node doesn’t respond, there is no way of knowing what state it is in, because prob‐
lems in the network cannot reliably be distinguished from problems at a node.
Discussions of these systems border on the philosophical: What do we know to be
true or false in our system? How sure can we be of that knowledge, if the mechanisms
for perception and measurement are unreliable? Should software systems obey the
laws that we expect of the physical world, such as cause and effect?
Fortunately, we don’t need to go as far as figuring out the meaning of life. In a dis‐
tributed system, we can state the assumptions we are making about the behavior (the
system model) and design the actual system in such a way that it meets those assump‐
tions. Algorithms can be proved to function correctly within a certain system model.
This means that reliable behavior is achievable, even if the underlying system model
provides very few guarantees.
However, although it is possible to make software well behaved in an unreliable sys‐
tem model, it is not straightforward to do so. In the rest of this chapter we will further
explore the notions of knowledge and truth in distributed systems, which will help us
think about the kinds of assumptions we can make and the guarantees we may want
to provide. In Chapter 9 we will proceed to look at some examples of distributed sys‐
tems, algorithms that provide particular guarantees under particular assumptions.
The Truth Is Defined by the Majority
Imagine a network with an asymmetric fault: a node is able to receive all messages
sent to it, but any outgoing messages from that node are dropped or delayed [19].
Even though that node is working perfectly well, and is receiving requests from other
nodes, the other nodes cannot hear its responses. After some timeout, the other
nodes declare it dead, because they haven’t heard from the node. The situation
unfolds like a nightmare: the semi-disconnected node is dragged to the graveyard,
kicking and screaming “I’m not dead!”—but since nobody can hear its screaming, the
funeral procession continues with stoic determination.
300 
| 
Chapter 8: The Trouble with Distributed Systems
