Whenever a mapper finishes reading its input file and writing its sorted output files,
the MapReduce scheduler notifies the reducers that they can start fetching the output
files from that mapper. The reducers connect to each of the mappers and download
the files of sorted key-value pairs for their partition. The process of partitioning by
reducer, sorting, and copying data partitions from mappers to reducers is known as
the shuffle [26] (a confusing term—unlike shuffling a deck of cards, there is no ran‐
domness in MapReduce).
The reduce task takes the files from the mappers and merges them together, preserv‐
ing the sort order. Thus, if different mappers produced records with the same key,
they will be adjacent in the merged reducer input.
The reducer is called with a key and an iterator that incrementally scans over all
records with the same key (which may in some cases not all fit in memory). The
reducer can use arbitrary logic to process these records, and can generate any number
of output records. These output records are written to a file on the distributed filesys‐
tem (usually, one copy on the local disk of the machine running the reducer, with
replicas on other machines).
MapReduce workflows
The range of problems you can solve with a single MapReduce job is limited. Refer‐
ring back to the log analysis example, a single MapReduce job could determine the
number of page views per URL, but not the most popular URLs, since that requires a
second round of sorting.
Thus, it is very common for MapReduce jobs to be chained together into workflows,
such that the output of one job becomes the input to the next job. The Hadoop Map‐
Reduce framework does not have any particular support for workflows, so this chain‐
ing is done implicitly by directory name: the first job must be configured to write its
output to a designated directory in HDFS, and the second job must be configured to
read that same directory name as its input. From the MapReduce framework’s point
of view, they are two independent jobs.
Chained MapReduce jobs are therefore less like pipelines of Unix commands (which
pass the output of one process as input to another process directly, using only a small
in-memory buffer) and more like a sequence of commands where each command’s
output is written to a temporary file, and the next command reads from the tempo‐
rary file. This design has advantages and disadvantages, which we will discuss in
“Materialization of Intermediate State” on page 419.
A batch job’s output is only considered valid when the job has completed successfully
(MapReduce discards the partial output of a failed job). Therefore, one job in a work‐
flow can only start when the prior jobs—that is, the jobs that produce its input direc‐
tories—have completed successfully. To handle these dependencies between job
402 
| 
Chapter 10: Batch Processing
