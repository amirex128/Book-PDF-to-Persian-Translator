In the ebook editions we have included links to the full text of online resources. All
links were verified at the time of publication, but unfortunately links tend to break
frequently due to the nature of the web. If you come across a broken link, or if you
are reading a print copy of this book, you can look up references using a search
engine. For academic papers, you can search for the title in Google Scholar to find
open-access PDF files. Alternatively, you can find all of the references at https://
github.com/ept/ddia-references, where we maintain up-to-date links.
We look primarily at the architecture of data systems and the ways they are integrated
into data-intensive applications. This book doesn’t have space to cover deployment,
operations, security, management, and other areas—those are complex and impor‐
tant topics, and we wouldn’t do them justice by making them superficial side notes in
this book. They deserve books of their own.
Many of the technologies described in this book fall within the realm of the Big Data
buzzword. However, the term “Big Data” is so overused and underdefined that it is
not useful in a serious engineering discussion. This book uses less ambiguous terms,
such as single-node versus distributed systems, or online/interactive versus offline/
batch processing systems.
This book has a bias toward free and open source software (FOSS), because reading,
modifying, and executing source code is a great way to understand how something
works in detail. Open platforms also reduce the risk of vendor lock-in. However,
where appropriate, we also discuss proprietary software (closed-source software, soft‐
ware as a service, or companies’ in-house software that is only described in literature
but not released publicly).
Outline of This Book
This book is arranged into three parts:
1. In Part I, we discuss the fundamental ideas that underpin the design of data-
intensive applications. We start in Chapter 1 by discussing what we’re actually
trying to achieve: reliability, scalability, and maintainability; how we need to
think about them; and how we can achieve them. In Chapter 2 we compare sev‐
eral different data models and query languages, and see how they are appropriate
to different situations. In Chapter 3 we talk about storage engines: how databases
arrange data on disk so that we can find it again efficiently. Chapter 4 turns to
formats for data encoding (serialization) and evolution of schemas over time.
2. In Part II, we move from data stored on one machine to data that is distributed
across multiple machines. This is often necessary for scalability, but brings with
it a variety of unique challenges. We first discuss replication (Chapter 5), parti‐
tioning/sharding (Chapter 6), and transactions (Chapter 7). We then go into
xvi 
| 
Preface
