An application may initially run only on a single node, but eventually may grow to
thousands of nodes. Trying to perform majority votes over so many nodes would be
terribly inefficient. Instead, ZooKeeper runs on a fixed number of nodes (usually
three or five) and performs its majority votes among those nodes while supporting a
potentially large number of clients. Thus, ZooKeeper provides a way of “outsourcing”
some of the work of coordinating nodes (consensus, operation ordering, and failure
detection) to an external service.
Normally, the kind of data managed by ZooKeeper is quite slow-changing: it repre‐
sents information like “the node running on 10.1.1.23 is the leader for partition 7,”
which may change on a timescale of minutes or hours. It is not intended for storing
the runtime state of the application, which may change thousands or even millions of
times per second. If application state needs to be replicated from one node to
another, other tools (such as Apache BookKeeper [108]) can be used.
Service discovery
ZooKeeper, etcd, and Consul are also often used for service discovery—that is, to find
out which IP address you need to connect to in order to reach a particular service. In
cloud datacenter environments, where it is common for virtual machines to continu‐
ally come and go, you often don’t know the IP addresses of your services ahead of
time. Instead, you can configure your services such that when they start up they reg‐
ister their network endpoints in a service registry, where they can then be found by
other services.
However, it is less clear whether service discovery actually requires consensus. DNS is
the traditional way of looking up the IP address for a service name, and it uses multi‐
ple layers of caching to achieve good performance and availability. Reads from DNS
are absolutely not linearizable, and it is usually not considered problematic if the
results from a DNS query are a little stale [109]. It is more important that DNS is reli‐
ably available and robust to network interruptions.
Although service discovery does not require consensus, leader election does. Thus, if
your consensus system already knows who the leader is, then it can make sense to
also use that information to help other services discover who the leader is. For this
purpose, some consensus systems support read-only caching replicas. These replicas
asynchronously receive the log of all decisions of the consensus algorithm, but do not
actively participate in voting. They are therefore able to serve read requests that do
not need to be linearizable.
Membership services
ZooKeeper and friends can be seen as part of a long history of research into member‐
ship services, which goes back to the 1980s and has been important for building
highly reliable systems, e.g., for air traffic control [110].
372 
| 
Chapter 9: Consistency and Consensus
