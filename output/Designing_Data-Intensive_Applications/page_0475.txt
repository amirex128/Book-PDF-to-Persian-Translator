item X: client 1 wants to set the value to A, and client 2 wants to set it to B. Both
clients first write the new value to the database, then write it to the search index. Due
to unlucky timing, the requests are interleaved: the database first sees the write from
client 1 setting the value to A, then the write from client 2 setting the value to B, so
the final value in the database is B. The search index first sees the write from client 2,
then client 1, so the final value in the search index is A. The two systems are now
permanently inconsistent with each other, even though no error occurred.
Figure 11-4. In the database, X is first set to A and then to B, while at the search index
the writes arrive in the opposite order.
Unless you have some additional concurrency detection mechanism, such as the ver‐
sion vectors we discussed in “Detecting Concurrent Writes” on page 184, you will not
even notice that concurrent writes occurred—one value will simply silently overwrite
another value.
Another problem with dual writes is that one of the writes may fail while the other
succeeds. This is a fault-tolerance problem rather than a concurrency problem, but it
also has the effect of the two systems becoming inconsistent with each other. Ensur‐
ing that they either both succeed or both fail is a case of the atomic commit problem,
which is expensive to solve (see “Atomic Commit and Two-Phase Commit (2PC)” on
page 354).
If you only have one replicated database with a single leader, then that leader deter‐
mines the order of writes, so the state machine replication approach works among
replicas of the database. However, in Figure 11-4 there isn’t a single leader: the data‐
base may have a leader and the search index may have a leader, but neither follows
the other, and so conflicts can occur (see “Multi-Leader Replication” on page 168).
The situation would be better if there really was only one leader—for example, the
database—and if we could make the search index a follower of the database. But is
this possible in practice? 
Databases and Streams 
| 
453
