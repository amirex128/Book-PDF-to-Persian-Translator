• Materialized views, which are a kind of precomputed cache of query results (see
“Aggregation: Data Cubes and Materialized Views” on page 101)
• Replication logs, which keep copies of the data on other nodes up to date (see
“Implementation of Replication Logs” on page 158)
• Full-text search indexes, which allow keyword search in text (see “Full-text
search and fuzzy indexes” on page 88) and which are built into some relational
databases [1]
In Chapters 10 and 11, similar themes emerged. We talked about building full-text
search indexes (see “The Output of Batch Workflows” on page 411), about material‐
ized view maintenance (see “Maintaining materialized views” on page 467), and
about replicating changes from a database to derived data systems (see “Change Data
Capture” on page 454).
It seems that there are parallels between the features that are built into databases and
the derived data systems that people are building with batch and stream processors.
Creating an index
Think about what happens when you run CREATE INDEX to create a new index in a
relational database. The database has to scan over a consistent snapshot of a table,
pick out all of the field values being indexed, sort them, and write out the index. Then
it must process the backlog of writes that have been made since the consistent snap‐
shot was taken (assuming the table was not locked while creating the index, so writes
could continue). Once that is done, the database must continue to keep the index up
to date whenever a transaction writes to the table.
This process is remarkably similar to setting up a new follower replica (see “Setting
Up New Followers” on page 155), and also very similar to bootstrapping change data
capture in a streaming system (see “Initial snapshot” on page 455).
Whenever you run CREATE INDEX, the database essentially reprocesses the existing
dataset (as discussed in “Reprocessing data for application evolution” on page 496)
and derives the index as a new view onto the existing data. The existing data may be a
snapshot of the state rather than a log of all changes that ever happened, but the two
are closely related (see “State, Streams, and Immutability” on page 459).
The meta-database of everything
In this light, I think that the dataflow across an entire organization starts looking like
one huge database [7]. Whenever a batch, stream, or ETL process transports data
from one place and form to another place and form, it is acting like the database sub‐
system that keeps indexes or materialized views up to date.
500 
| 
Chapter 12: The Future of Data Systems
