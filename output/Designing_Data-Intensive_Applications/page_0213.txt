lem, an item cannot simply be deleted from the database when it is removed; instead,
the system must leave a marker with an appropriate version number to indicate that
the item has been removed when merging siblings. Such a deletion marker is known
as a tombstone. (We previously saw tombstones in the context of log compaction in
“Hash Indexes” on page 72.)
As merging siblings in application code is complex and error-prone, there are some
efforts to design data structures that can perform this merging automatically, as dis‐
cussed in “Automatic Conflict Resolution” on page 174. For example, Riak’s datatype
support uses a family of data structures called CRDTs [38, 39, 55] that can automati‐
cally merge siblings in sensible ways, including preserving deletions.
Version vectors
The example in Figure 5-13 used only a single replica. How does the algorithm
change when there are multiple replicas, but no leader?
Figure 5-13 uses a single version number to capture dependencies between opera‐
tions, but that is not sufficient when there are multiple replicas accepting writes con‐
currently. Instead, we need to use a version number per replica as well as per key.
Each replica increments its own version number when processing a write, and also
keeps track of the version numbers it has seen from each of the other replicas. This
information indicates which values to overwrite and which values to keep as siblings.
The collection of version numbers from all the replicas is called a version vector [56].
A few variants of this idea are in use, but the most interesting is probably the dotted
version vector [57], which is used in Riak 2.0 [58, 59]. We won’t go into the details,
but the way it works is quite similar to what we saw in our cart example.
Like the version numbers in Figure 5-13, version vectors are sent from the database
replicas to clients when values are read, and need to be sent back to the database
when a value is subsequently written. (Riak encodes the version vector as a string that
it calls causal context.) The version vector allows the database to distinguish between
overwrites and concurrent writes.
Also, like in the single-replica example, the application may need to merge siblings.
The version vector structure ensures that it is safe to read from one replica and subse‐
quently write back to another replica. Doing so may result in siblings being created,
but no data is lost as long as siblings are merged correctly.
Version vectors and vector clocks
A version vector is sometimes also called a vector clock, even though
they are not quite the same. The difference is subtle—please see the
references for details [57, 60, 61]. In brief, when comparing the
state of replicas, version vectors are the right data structure to use. 
Leaderless Replication 
| 
191
