ii. Arguably, an incorrect counter in an email application is not a particularly critical problem. Alternatively,
think of a customer account balance instead of an unread counter, and a payment transaction instead of an
email.
Single-Object and Multi-Object Operations
To recap, in ACID, atomicity and isolation describe what the database should do if a
client makes several writes within the same transaction:
Atomicity
If an error occurs halfway through a sequence of writes, the transaction should
be aborted, and the writes made up to that point should be discarded. In other
words, the database saves you from having to worry about partial failure, by giv‐
ing an all-or-nothing guarantee.
Isolation
Concurrently running transactions shouldn’t interfere with each other. For
example, if one transaction makes several writes, then another transaction should
see either all or none of those writes, but not some subset.
These definitions assume that you want to modify several objects (rows, documents,
records) at once. Such multi-object transactions are often needed if several pieces of
data need to be kept in sync. Figure 7-2 shows an example from an email application.
To display the number of unread messages for a user, you could query something
like:
SELECT COUNT(*) FROM emails WHERE recipient_id = 2 AND unread_flag = true
However, you might find this query to be too slow if there are many emails, and
decide to store the number of unread messages in a separate field (a kind of denorm‐
alization). Now, whenever a new message comes in, you have to increment the
unread counter as well, and whenever a message is marked as read, you also have to
decrement the unread counter.
In Figure 7-2, user 2 experiences an anomaly: the mailbox listing shows an unread
message, but the counter shows zero unread messages because the counter increment
has not yet happened.ii Isolation would have prevented this issue by ensuring that
user 2 sees either both the inserted email and the updated counter, or neither, but not
an inconsistent halfway point.
228 
| 
Chapter 7: Transactions
