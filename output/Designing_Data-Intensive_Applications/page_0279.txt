xi. Sometimes called strong strict two-phase locking (SS2PL) to distinguish it from other variants of 2PL.
Two-Phase Locking (2PL)
For around 30 years, there was only one widely used algorithm for serializability in
databases: two-phase locking (2PL).xi
2PL is not 2PC
Note that while two-phase locking (2PL) sounds very similar to
two-phase commit (2PC), they are completely different things. We
will discuss 2PC in Chapter 9.
We saw previously that locks are often used to prevent dirty writes (see “No dirty
writes” on page 235): if two transactions concurrently try to write to the same object,
the lock ensures that the second writer must wait until the first one has finished its
transaction (aborted or committed) before it may continue.
Two-phase locking is similar, but makes the lock requirements much stronger. Sev‐
eral transactions are allowed to concurrently read the same object as long as nobody
is writing to it. But as soon as anyone wants to write (modify or delete) an object,
exclusive access is required:
• If transaction A has read an object and transaction B wants to write to that
object, B must wait until A commits or aborts before it can continue. (This
ensures that B can’t change the object unexpectedly behind A’s back.)
• If transaction A has written an object and transaction B wants to read that object,
B must wait until A commits or aborts before it can continue. (Reading an old
version of the object, like in Figure 7-1, is not acceptable under 2PL.)
In 2PL, writers don’t just block other writers; they also block readers and vice versa.
Snapshot isolation has the mantra readers never block writers, and writers never block
readers (see “Implementing snapshot isolation” on page 239), which captures this key
difference between snapshot isolation and two-phase locking. On the other hand,
because 2PL provides serializability, it protects against all the race conditions dis‐
cussed earlier, including lost updates and write skew.
Implementation of two-phase locking
2PL is used by the serializable isolation level in MySQL (InnoDB) and SQL Server,
and the repeatable read isolation level in DB2 [23, 36].
Serializability 
| 
257
