a snapshot of each segment’s hash map on disk, which can be loaded into mem‐
ory more quickly.
Partially written records
The database may crash at any time, including halfway through appending a
record to the log. Bitcask files include checksums, allowing such corrupted parts
of the log to be detected and ignored.
Concurrency control
As writes are appended to the log in a strictly sequential order, a common imple‐
mentation choice is to have only one writer thread. Data file segments are
append-only and otherwise immutable, so they can be read concurrently by mul‐
tiple threads.
An append-only log seems wasteful at first glance: why don’t you update the file in
place, overwriting the old value with the new value? But an append-only design turns
out to be good for several reasons:
• Appending and segment merging are sequential write operations, which are gen‐
erally much faster than random writes, especially on magnetic spinning-disk
hard drives. To some extent sequential writes are also preferable on flash-based
solid state drives (SSDs) [4]. We will discuss this issue further in “Comparing B-
Trees and LSM-Trees” on page 83.
• Concurrency and crash recovery are much simpler if segment files are append-
only or immutable. For example, you don’t have to worry about the case where a
crash happened while a value was being overwritten, leaving you with a file con‐
taining part of the old and part of the new value spliced together.
• Merging old segments avoids the problem of data files getting fragmented over
time.
However, the hash table index also has limitations:
• The hash table must fit in memory, so if you have a very large number of keys,
you’re out of luck. In principle, you could maintain a hash map on disk, but
unfortunately it is difficult to make an on-disk hash map perform well. It
requires a lot of random access I/O, it is expensive to grow when it becomes full,
and hash collisions require fiddly logic [5].
• Range queries are not efficient. For example, you cannot easily scan over all keys
between kitty00000 and kitty99999—you’d have to look up each key individu‐
ally in the hash maps.
In the next section we will look at an indexing structure that doesn’t have those limi‐
tations. 
Data Structures That Power Your Database 
| 
75
