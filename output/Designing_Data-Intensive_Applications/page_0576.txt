system that has a complete copy of the
data.
CAP theorem
A widely misunderstood theoretical result
that is not useful in practice. See “The
CAP theorem” on page 336.
causality
The dependency between events that ari‐
ses when one thing “happens before”
another thing in a system. For example, a
later event that is in response to an earlier
event, or builds upon an earlier event, or
should be understood in the light of an
earlier event. See “The “happens-before”
relationship and concurrency” on page
186 and “Ordering and Causality” on page
339.
consensus
A fundamental problem in distributed
computing, concerning getting several
nodes to agree on something (for exam‐
ple, which node should be the leader for a
database cluster). The problem is much
harder than it seems at first glance. See
“Fault-Tolerant Consensus” on page 364.
data warehouse
A database in which data from several dif‐
ferent OLTP systems has been combined
and prepared to be used for analytics pur‐
poses. See “Data Warehousing” on page
91.
declarative
Describing the properties that something
should have, but not the exact steps for
how to achieve it. In the context of quer‐
ies, a query optimizer takes a declarative
query and decides how it should best be
executed. See “Query Languages for Data”
on page 42.
denormalize
To introduce some amount of redun‐
dancy or duplication in a normalized
dataset, typically in the form of a cache or
index, in order to speed up reads. A
denormalized value is a kind of precom‐
puted query result, similar to a material‐
ized view. See “Single-Object and Multi-
Object Operations” on page 228 and
“Deriving several views from the same
event log” on page 461.
derived data
A dataset that is created from some other
data through a repeatable process, which
you could run again if necessary. Usually,
derived data is needed to speed up a par‐
ticular kind of read access to the data.
Indexes, caches, and materialized views
are examples of derived data. See the
introduction to Part III.
deterministic
Describing a function that always pro‐
duces the same output if you give it the
same input. This means it cannot depend
on random numbers, the time of day, net‐
work communication, or other unpredict‐
able things.
distributed
Running on several nodes connected by a
network. Characterized by partial failures:
some part of the system may be broken
while other parts are still working, and it
is often impossible for the software to
know what exactly is broken. See “Faults
and Partial Failures” on page 274.
durable
Storing data in a way such that you
believe it will not be lost, even if various
faults occur. See “Durability” on page 226.
ETL
Extract–Transform–Load. The process of
extracting data from a source database,
transforming it into a form that is more
suitable for analytic queries, and loading it
into a data warehouse or batch processing
system. See “Data Warehousing” on page
91.
failover
In systems that have a single leader, fail‐
over is the process of moving the leader‐
ship role from one node to another. See
“Handling Node Outages” on page 156.
CAP theorem
554 
| 
Glossary
