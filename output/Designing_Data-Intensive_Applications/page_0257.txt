There are a few reasons why it’s useful to prevent dirty reads:
• If a transaction needs to update several objects, a dirty read means that another
transaction may see some of the updates but not others. For example, in
Figure 7-2, the user sees the new unread email but not the updated counter. This
is a dirty read of the email. Seeing the database in a partially updated state is con‐
fusing to users and may cause other transactions to take incorrect decisions.
• If a transaction aborts, any writes it has made need to be rolled back (like in
Figure 7-3). If the database allows dirty reads, that means a transaction may see
data that is later rolled back—i.e., which is never actually committed to the data‐
base. Reasoning about the consequences quickly becomes mind-bending.
No dirty writes
What happens if two transactions concurrently try to update the same object in a
database? We don’t know in which order the writes will happen, but we normally
assume that the later write overwrites the earlier write.
However, what happens if the earlier write is part of a transaction that has not yet
committed, so the later write overwrites an uncommitted value? This is called a dirty
write [28]. Transactions running at the read committed isolation level must prevent
dirty writes, usually by delaying the second write until the first write’s transaction has
committed or aborted.
By preventing dirty writes, this isolation level avoids some kinds of concurrency
problems:
• If transactions update multiple objects, dirty writes can lead to a bad outcome.
For example, consider Figure 7-5, which illustrates a used car sales website on
which two people, Alice and Bob, are simultaneously trying to buy the same car.
Buying a car requires two database writes: the listing on the website needs to be
updated to reflect the buyer, and the sales invoice needs to be sent to the buyer.
In the case of Figure 7-5, the sale is awarded to Bob (because he performs the
winning update to the listings table), but the invoice is sent to Alice (because
she performs the winning update to the invoices table). Read committed pre‐
vents such mishaps.
• However, read committed does not prevent the race condition between two
counter increments in Figure 7-1. In this case, the second write happens after the
first transaction has committed, so it’s not a dirty write. It’s still incorrect, but for
a different reason—in “Preventing Lost Updates” on page 242 we will discuss how
to make such counter increments safe.
Weak Isolation Levels 
| 
235
