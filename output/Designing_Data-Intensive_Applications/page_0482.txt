Whenever you have state that changes, that state is the result of the events that muta‐
ted it over time. For example, your list of currently available seats is the result of the
reservations you have processed, the current account balance is the result of the cred‐
its and debits on the account, and the response time graph for your web server is an
aggregation of the individual response times of all web requests that have occurred.
No matter how the state changes, there was always a sequence of events that caused
those changes. Even as things are done and undone, the fact remains true that those
events occurred. The key idea is that mutable state and an append-only log of immut‐
able events do not contradict each other: they are two sides of the same coin. The log
of all changes, the changelog, represents the evolution of state over time.
If you are mathematically inclined, you might say that the application state is what
you get when you integrate an event stream over time, and a change stream is what
you get when you differentiate the state by time, as shown in Figure 11-6 [49, 50, 51].
The analogy has limitations (for example, the second derivative of state does not
seem to be meaningful), but it’s a useful starting point for thinking about data.
Figure 11-6. The relationship between the current application state and an event
stream.
If you store the changelog durably, that simply has the effect of making the state
reproducible. If you consider the log of events to be your system of record, and any
mutable state as being derived from it, it becomes easier to reason about the flow of
data through a system. As Pat Helland puts it [52]:
Transaction logs record all the changes made to the database. High-speed appends are
the only way to change the log. From this perspective, the contents of the database
hold a caching of the latest record values in the logs. The truth is the log. The database
is a cache of a subset of the log. That cached subset happens to be the latest value of
each record and index value from the log.
Log compaction, as discussed in “Log compaction” on page 456, is one way of bridg‐
ing the distinction between log and database state: it retains only the latest version of
each record, and discards overwritten versions.
Advantages of immutable events
Immutability in databases is an old idea. For example, accountants have been using
immutability for centuries in financial bookkeeping. When a transaction occurs, it is
460 
| 
Chapter 11: Stream Processing
