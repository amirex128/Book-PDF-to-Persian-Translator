• A similar pattern appeared in Figure 5-9, where we looked at the replication
between three leaders and noticed that some writes could “overtake” others due
to network delays. From the perspective of one of the replicas it would look as
though there was an update to a row that did not exist. Causality here means that
a row must first be created before it can be updated.
• In “Detecting Concurrent Writes” on page 184 we observed that if you have two
operations A and B, there are three possibilities: either A happened before B, or B
happened before A, or A and B are concurrent. This happened before relationship
is another expression of causality: if A happened before B, that means B might
have known about A, or built upon A, or depended on A. If A and B are concur‐
rent, there is no causal link between them; in other words, we are sure that nei‐
ther knew about the other.
• In the context of snapshot isolation for transactions (“Snapshot Isolation and
Repeatable Read” on page 237), we said that a transaction reads from a consistent
snapshot. But what does “consistent” mean in this context? It means consistent
with causality: if the snapshot contains an answer, it must also contain the ques‐
tion being answered [48]. Observing the entire database at a single point in time
makes it consistent with causality: the effects of all operations that happened cau‐
sally before that point in time are visible, but no operations that happened cau‐
sally afterward can be seen. Read skew (non-repeatable reads, as illustrated in
Figure 7-6) means reading data in a state that violates causality.
• Our examples of write skew between transactions (see “Write Skew and Phan‐
toms” on page 246) also demonstrated causal dependencies: in Figure 7-8, Alice
was allowed to go off call because the transaction thought that Bob was still on
call, and vice versa. In this case, the action of going off call is causally dependent
on the observation of who is currently on call. Serializable snapshot isolation (see
“Serializable Snapshot Isolation (SSI)” on page 261) detects write skew by track‐
ing the causal dependencies between transactions.
• In the example of Alice and Bob watching football (Figure 9-1), the fact that Bob
got a stale result from the server after hearing Alice exclaim the result is a causal‐
ity violation: Alice’s exclamation is causally dependent on the announcement of
the score, so Bob should also be able to see the score after hearing Alice. The
same pattern appeared again in “Cross-channel timing dependencies” on page
331 in the guise of an image resizing service.
Causality imposes an ordering on events: cause comes before effect; a message is sent
before that message is received; the question comes before the answer. And, like in
real life, one thing leads to another: one node reads some data and then writes some‐
thing as a result, another node reads the thing that was written and writes something
else in turn, and so on. These chains of causally dependent operations define the
causal order in the system—i.e., what happened before what.
340 
| 
Chapter 9: Consistency and Consensus
