machine has its own memory and disk, and one machine cannot access another
machine’s memory or disk (except by making requests to a service over the network).
Shared-nothing is not the only way of building systems, but it has become the domi‐
nant approach for building internet services, for several reasons: it’s comparatively
cheap because it requires no special hardware, it can make use of commoditized
cloud computing services, and it can achieve high reliability through redundancy
across multiple geographically distributed datacenters.
The internet and most internal networks in datacenters (often Ethernet) are asyn‐
chronous packet networks. In this kind of network, one node can send a message (a
packet) to another node, but the network gives no guarantees as to when it will arrive,
or whether it will arrive at all. If you send a request and expect a response, many
things could go wrong (some of which are illustrated in Figure 8-1):
1. Your request may have been lost (perhaps someone unplugged a network cable).
2. Your request may be waiting in a queue and will be delivered later (perhaps the
network or the recipient is overloaded).
3. The remote node may have failed (perhaps it crashed or it was powered down).
4. The remote node may have temporarily stopped responding (perhaps it is expe‐
riencing a long garbage collection pause; see “Process Pauses” on page 295), but it
will start responding again later.
5. The remote node may have processed your request, but the response has been
lost on the network (perhaps a network switch has been misconfigured).
6. The remote node may have processed your request, but the response has been
delayed and will be delivered later (perhaps the network or your own machine is
overloaded).
Figure 8-1. If you send a request and don’t get a response, it’s not possible to distinguish
whether (a) the request was lost, (b) the remote node is down, or (c) the response was
lost.
278 
| 
Chapter 8: The Trouble with Distributed Systems
