  -- lives_in_europe is the set of vertex IDs of all people living in Europe
  lives_in_europe(vertex_id) AS ( 
    SELECT edges.tail_vertex FROM edges
      JOIN in_europe ON edges.head_vertex = in_europe.vertex_id
      WHERE edges.label = 'lives_in'
  )
SELECT vertices.properties->>'name'
FROM vertices
-- join to find those people who were both born in the US *and* live in Europe
JOIN born_in_usa     ON vertices.vertex_id = born_in_usa.vertex_id 
JOIN lives_in_europe ON vertices.vertex_id = lives_in_europe.vertex_id;
First find the vertex whose name property has the value "United States", and
make it the first element of the set of vertices in_usa.
Follow all incoming within edges from vertices in the set in_usa, and add them
to the same set, until all incoming within edges have been visited.
Do the same starting with the vertex whose name property has the value
"Europe", and build up the set of vertices in_europe.
For each of the vertices in the set in_usa, follow incoming born_in edges to find
people who were born in some place within the United States.
Similarly, for each of the vertices in the set in_europe, follow incoming lives_in
edges to find people who live in Europe.
Finally, intersect the set of people born in the USA with the set of people living in
Europe, by joining them.
If the same query can be written in 4 lines in one query language but requires 29 lines
in another, that just shows that different data models are designed to satisfy different
use cases. It’s important to pick a data model that is suitable for your application.
Triple-Stores and SPARQL
The triple-store model is mostly equivalent to the property graph model, using differ‐
ent words to describe the same ideas. It is nevertheless worth discussing, because
there are various tools and languages for triple-stores that can be valuable additions
to your toolbox for building applications.
In a triple-store, all information is stored in the form of very simple three-part state‐
ments: (subject, predicate, object). For example, in the triple (Jim, likes, bananas), Jim
is the subject, likes is the predicate (verb), and bananas is the object.
Graph-Like Data Models 
| 
55
