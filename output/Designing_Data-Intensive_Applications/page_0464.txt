it fills up, the sender is blocked until the recipient takes data out of the buffer (see
“Network congestion and queueing” on page 282).
If messages are buffered in a queue, it is important to understand what happens
as that queue grows. Does the system crash if the queue no longer fits in mem‐
ory, or does it write messages to disk? If so, how does the disk access affect the
performance of the messaging system [6]?
2. What happens if nodes crash or temporarily go offline—are any messages lost? As
with databases, durability may require some combination of writing to disk
and/or replication (see the sidebar “Replication and Durability” on page 227),
which has a cost. If you can afford to sometimes lose messages, you can probably
get higher throughput and lower latency on the same hardware.
Whether message loss is acceptable depends very much on the application. For exam‐
ple, with sensor readings and metrics that are transmitted periodically, an occasional
missing data point is perhaps not important, since an updated value will be sent a
short time later anyway. However, beware that if a large number of messages are
dropped, it may not be immediately apparent that the metrics are incorrect [7]. If you
are counting events, it is more important that they are delivered reliably, since every
lost message means incorrect counters.
A nice property of the batch processing systems we explored in Chapter 10 is that
they provide a strong reliability guarantee: failed tasks are automatically retried, and
partial output from failed tasks is automatically discarded. This means the output is
the same as if no failures had occurred, which helps simplify the programming
model. Later in this chapter we will examine how we can provide similar guarantees
in a streaming context.
Direct messaging from producers to consumers
A number of messaging systems use direct network communication between produc‐
ers and consumers without going via intermediary nodes:
• UDP multicast is widely used in the financial industry for streams such as stock
market feeds, where low latency is important [8]. Although UDP itself is unrelia‐
ble, application-level protocols can recover lost packets (the producer must
remember packets it has sent so that it can retransmit them on demand).
• Brokerless messaging libraries such as ZeroMQ [9] and nanomsg take a similar
approach, implementing publish/subscribe messaging over TCP or IP multicast.
• StatsD [10] and Brubeck [7] use unreliable UDP messaging for collecting metrics
from all machines on the network and monitoring them. (In the StatsD protocol,
counter metrics are only correct if all messages are received; using UDP makes
the metrics at best approximate [11]. See also “TCP Versus UDP” on page 283.)
442 
| 
Chapter 11: Stream Processing
