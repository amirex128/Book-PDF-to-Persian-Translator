i. A subtle detail of this diagram is that it assumes the existence of a global clock, represented by the horizon‐
tal axis. Even though real systems typically don’t have accurate clocks (see “Unreliable Clocks” on page 287),
this assumption is okay: for the purposes of analyzing a distributed algorithm, we may pretend that an accu‐
rate global clock exists, as long as the algorithm doesn’t have access to it [47]. Instead, the algorithm can only
see a mangled approximation of real time, as produced by a quartz oscillator and NTP.
ii. A register in which reads may return either the old or the new value if they are concurrent with a write is
known as a regular register [7, 25].
exactly when the database processed its request—it only knows that it must have hap‐
pened sometime between the client sending the request and receiving the response.i
In this example, the register has two types of operations:
• read(x) ⇒ v means the client requested to read the value of register x, and the
database returned the value v.
• write(x, v) ⇒ r means the client requested to set the register x to value v, and the
database returned response r (which could be ok or error).
In Figure 9-2, the value of x is initially 0, and client C performs a write request to set
it to 1. While this is happening, clients A and B are repeatedly polling the database to
read the latest value. What are the possible responses that A and B might get for their
read requests?
• The first read operation by client A completes before the write begins, so it must
definitely return the old value 0.
• The last read by client A begins after the write has completed, so it must defi‐
nitely return the new value 1 if the database is linearizable: we know that the
write must have been processed sometime between the start and end of the write
operation, and the read must have been processed sometime between the start
and end of the read operation. If the read started after the write ended, then the
read must have been processed after the write, and therefore it must see the new
value that was written.
• Any read operations that overlap in time with the write operation might return
either 0 or 1, because we don’t know whether or not the write has taken effect at
the time when the read operation is processed. These operations are concurrent
with the write.
However, that is not yet sufficient to fully describe linearizability: if reads that are
concurrent with a write can return either the old or the new value, then readers could
see a value flip back and forth between the old and the new value several times while
a write is going on. That is not what we expect of a system that emulates a “single
copy of the data.”ii
326 
| 
Chapter 9: Consistency and Consensus
