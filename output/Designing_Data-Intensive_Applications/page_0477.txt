Essentially, change data capture makes one database the leader (the one from which
the changes are captured), and turns the others into followers. A log-based message
broker is well suited for transporting the change events from the source database,
since it preserves the ordering of messages (avoiding the reordering issue of
Figure 11-2).
Database triggers can be used to implement change data capture (see “Trigger-based
replication” on page 161) by registering triggers that observe all changes to data
tables and add corresponding entries to a changelog table. However, they tend to be
fragile and have significant performance overheads. Parsing the replication log can be
a more robust approach, although it also comes with challenges, such as handling
schema changes.
LinkedIn’s Databus [25], Facebook’s Wormhole [26], and Yahoo!’s Sherpa [27] use
this idea at large scale. Bottled Water implements CDC for PostgreSQL using an API
that decodes the write-ahead log [28], Maxwell and Debezium do something similar
for MySQL by parsing the binlog [29, 30, 31], Mongoriver reads the MongoDB oplog
[32, 33], and GoldenGate provides similar facilities for Oracle [34, 35].
Like message brokers, change data capture is usually asynchronous: the system of
record database does not wait for the change to be applied to consumers before com‐
mitting it. This design has the operational advantage that adding a slow consumer
does not affect the system of record too much, but it has the downside that all the
issues of replication lag apply (see “Problems with Replication Lag” on page 161).
Initial snapshot
If you have the log of all changes that were ever made to a database, you can recon‐
struct the entire state of the database by replaying the log. However, in many cases,
keeping all changes forever would require too much disk space, and replaying it
would take too long, so the log needs to be truncated.
Building a new full-text index, for example, requires a full copy of the entire database
—it is not sufficient to only apply a log of recent changes, since it would be missing
items that were not recently updated. Thus, if you don’t have the entire log history,
you need to start with a consistent snapshot, as previously discussed in “Setting Up
New Followers” on page 155.
The snapshot of the database must correspond to a known position or offset in the
change log, so that you know at which point to start applying changes after the snap‐
shot has been processed. Some CDC tools integrate this snapshot facility, while oth‐
ers leave it as a manual operation.
Databases and Streams 
| 
455
