Partitioning by Key Range
One way of partitioning is to assign a continuous range of keys (from some mini‐
mum to some maximum) to each partition, like the volumes of a paper encyclopedia
(Figure 6-2). If you know the boundaries between the ranges, you can easily deter‐
mine which partition contains a given key. If you also know which partition is
assigned to which node, then you can make your request directly to the appropriate
node (or, in the case of the encyclopedia, pick the correct book off the shelf).
Figure 6-2. A print encyclopedia is partitioned by key range.
The ranges of keys are not necessarily evenly spaced, because your data may not be
evenly distributed. For example, in Figure 6-2, volume 1 contains words starting with
A and B, but volume 12 contains words starting with T, U, V, X, Y, and Z. Simply
having one volume per two letters of the alphabet would lead to some volumes being
much bigger than others. In order to distribute the data evenly, the partition bound‐
aries need to adapt to the data.
The partition boundaries might be chosen manually by an administrator, or the data‐
base can choose them automatically (we will discuss choices of partition boundaries
in more detail in “Rebalancing Partitions” on page 209). This partitioning strategy is
used by Bigtable, its open source equivalent HBase [2, 3], RethinkDB, and MongoDB
before version 2.4 [4].
Within each partition, we can keep keys in sorted order (see “SSTables and LSM-
Trees” on page 76). This has the advantage that range scans are easy, and you can
treat the key as a concatenated index in order to fetch several related records in one
query (see “Multi-column indexes” on page 87). For example, consider an application
that stores data from a network of sensors, where the key is the timestamp of the
measurement (year-month-day-hour-minute-second). Range scans are very useful in
this case, because they let you easily fetch, say, all the readings from a particular
month.
202 
| 
Chapter 6: Partitioning
