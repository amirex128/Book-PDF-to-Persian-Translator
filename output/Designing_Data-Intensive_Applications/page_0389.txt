• Due to the agreement property of consensus, all nodes decide to deliver the same
messages in the same order.
• Due to the integrity property, messages are not duplicated.
• Due to the validity property, messages are not corrupted and not fabricated out
of thin air.
• Due to the termination property, messages are not lost.
Viewstamped Replication, Raft, and Zab implement total order broadcast directly,
because that is more efficient than doing repeated rounds of one-value-at-a-time
consensus. In the case of Paxos, this optimization is known as Multi-Paxos.
Single-leader replication and consensus
In Chapter 5 we discussed single-leader replication (see “Leaders and Followers” on
page 152), which takes all the writes to the leader and applies them to the followers in
the same order, thus keeping replicas up to date. Isn’t this essentially total order
broadcast? How come we didn’t have to worry about consensus in Chapter 5?
The answer comes down to how the leader is chosen. If the leader is manually chosen
and configured by the humans in your operations team, you essentially have a “con‐
sensus algorithm” of the dictatorial variety: only one node is allowed to accept writes
(i.e., make decisions about the order of writes in the replication log), and if that node
goes down, the system becomes unavailable for writes until the operators manually
configure a different node to be the leader. Such a system can work well in practice,
but it does not satisfy the termination property of consensus because it requires
human intervention in order to make progress.
Some databases perform automatic leader election and failover, promoting a follower
to be the new leader if the old leader fails (see “Handling Node Outages” on page
156). This brings us closer to fault-tolerant total order broadcast, and thus to solving
consensus.
However, there is a problem. We previously discussed the problem of split brain, and
said that all nodes need to agree who the leader is—otherwise two different nodes
could each believe themselves to be the leader, and consequently get the database into
an inconsistent state. Thus, we need consensus in order to elect a leader. But if the
consensus algorithms described here are actually total order broadcast algorithms,
and total order broadcast is like single-leader replication, and single-leader replica‐
tion requires a leader, then…
It seems that in order to elect a leader, we first need a leader. In order to solve con‐
sensus, we must first solve consensus. How do we break out of this conundrum?
Distributed Transactions and Consensus 
| 
367
