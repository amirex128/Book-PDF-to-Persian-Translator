i. It’s possible to create a load balancing scheme in which two consumers share the work of processing a par‐
tition by having both read the full set of messages, but one of them only considers messages with even-
numbered offsets while the other deals with the odd-numbered offsets. Alternatively, you could spread
message processing over a thread pool, but that approach complicates consumer offset management. In gen‐
eral, single-threaded processing of a partition is preferable, and parallelism can be increased by using more
partitions.
• The number of nodes sharing the work of consuming a topic can be at most the
number of log partitions in that topic, because messages within the same parti‐
tion are delivered to the same node.i
• If a single message is slow to process, it holds up the processing of subsequent
messages in that partition (a form of head-of-line blocking; see “Describing Per‐
formance” on page 13).
Thus, in situations where messages may be expensive to process and you want to par‐
allelize processing on a message-by-message basis, and where message ordering is not
so important, the JMS/AMQP style of message broker is preferable. On the other
hand, in situations with high message throughput, where each message is fast to pro‐
cess and where message ordering is important, the log-based approach works very
well.
Consumer offsets
Consuming a partition sequentially makes it easy to tell which messages have been
processed: all messages with an offset less than a consumer’s current offset have
already been processed, and all messages with a greater offset have not yet been seen.
Thus, the broker does not need to track acknowledgments for every single message—
it only needs to periodically record the consumer offsets. The reduced bookkeeping
overhead and the opportunities for batching and pipelining in this approach help
increase the throughput of log-based systems.
This offset is in fact very similar to the log sequence number that is commonly found
in single-leader database replication, and which we discussed in “Setting Up New
Followers” on page 155. In database replication, the log sequence number allows a
follower to reconnect to a leader after it has become disconnected, and resume repli‐
cation without skipping any writes. Exactly the same principle is used here: the mes‐
sage broker behaves like a leader database, and the consumer like a follower.
If a consumer node fails, another node in the consumer group is assigned the failed
consumer’s partitions, and it starts consuming messages at the last recorded offset. If
the consumer had processed subsequent messages but not yet recorded their offset,
those messages will be processed a second time upon restart. We will discuss ways of
dealing with this issue later in the chapter.
Transmitting Event Streams 
| 
449
