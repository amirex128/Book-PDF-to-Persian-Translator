i. If all keys and values had a fixed size, you could use binary search on a segment file and avoid the in-
memory index entirely. However, they are usually variable-length in practice, which makes it difficult to tell
where one record ends and the next one starts if you don’t have an index.
What if the same key appears in several input segments? Remember that each
segment contains all the values written to the database during some period of
time. This means that all the values in one input segment must be more recent
than all the values in the other segment (assuming that we always merge adjacent
segments). When multiple segments contain the same key, we can keep the value
from the most recent segment and discard the values in older segments.
2. In order to find a particular key in the file, you no longer need to keep an index
of all the keys in memory. See Figure 3-5 for an example: say you’re looking for
the key handiwork, but you don’t know the exact offset of that key in the segment
file. However, you do know the offsets for the keys handbag and handsome, and
because of the sorting you know that handiwork must appear between those two.
This means you can jump to the offset for handbag and scan from there until you
find handiwork (or not, if the key is not present in the file).
Figure 3-5. An SSTable with an in-memory index.
You still need an in-memory index to tell you the offsets for some of the keys, but
it can be sparse: one key for every few kilobytes of segment file is sufficient,
because a few kilobytes can be scanned very quickly.i
3. Since read requests need to scan over several key-value pairs in the requested
range anyway, it is possible to group those records into a block and compress it
before writing it to disk (indicated by the shaded area in Figure 3-5). Each entry
of the sparse in-memory index then points at the start of a compressed block.
Besides saving disk space, compression also reduces the I/O bandwidth use.
Data Structures That Power Your Database 
| 
77
