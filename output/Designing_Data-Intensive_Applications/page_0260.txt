incoming payment has arrived (with a balance of $500), and the other account after
the outgoing transfer has been made (the new balance being $400). To Alice it now
appears as though she only has a total of $900 in her accounts—it seems that $100 has
vanished into thin air.
This anomaly is called a nonrepeatable read or read skew: if Alice were to read the
balance of account 1 again at the end of the transaction, she would see a different
value ($600) than she saw in her previous query. Read skew is considered acceptable
under read committed isolation: the account balances that Alice saw were indeed
committed at the time when she read them.
The term skew is unfortunately overloaded: we previously used it in
the sense of an unbalanced workload with hot spots (see “Skewed
Workloads and Relieving Hot Spots” on page 205), whereas here it
means timing anomaly.
In Alice’s case, this is not a lasting problem, because she will most likely see consis‐
tent account balances if she reloads the online banking website a few seconds later.
However, some situations cannot tolerate such temporary inconsistency:
Backups
Taking a backup requires making a copy of the entire database, which may take
hours on a large database. During the time that the backup process is running,
writes will continue to be made to the database. Thus, you could end up with
some parts of the backup containing an older version of the data, and other parts
containing a newer version. If you need to restore from such a backup, the
inconsistencies (such as disappearing money) become permanent.
Analytic queries and integrity checks
Sometimes, you may want to run a query that scans over large parts of the data‐
base. Such queries are common in analytics (see “Transaction Processing or Ana‐
lytics?” on page 90), or may be part of a periodic integrity check that everything
is in order (monitoring for data corruption). These queries are likely to return
nonsensical results if they observe parts of the database at different points in
time. 
Snapshot isolation [28] is the most common solution to this problem. The idea is that
each transaction reads from a consistent snapshot of the database—that is, the trans‐
action sees all the data that was committed in the database at the start of the transac‐
tion. Even if the data is subsequently changed by another transaction, each
transaction sees only the old data from that particular point in time.
Snapshot isolation is a boon for long-running, read-only queries such as backups and
analytics. It is very hard to reason about the meaning of a query if the data on which
238 
| 
Chapter 7: Transactions
