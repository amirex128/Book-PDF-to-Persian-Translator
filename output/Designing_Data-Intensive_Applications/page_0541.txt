Example 12-2 relies on a uniqueness constraint on the request_id column. If a
transaction attempts to insert an ID that already exists, the INSERT fails and the trans‐
action is aborted, preventing it from taking effect twice. Relational databases can gen‐
erally maintain a uniqueness constraint correctly, even at weak isolation levels
(whereas an application-level check-then-insert may fail under nonserializable isola‐
tion, as discussed in “Write Skew and Phantoms” on page 246).
Besides suppressing duplicate requests, the requests table in Example 12-2 acts as a
kind of event log, hinting in the direction of event sourcing (see “Event Sourcing” on
page 457). The updates to the account balances don’t actually have to happen in the
same transaction as the insertion of the event, since they are redundant and could be
derived from the request event in a downstream consumer—as long as the event is
processed exactly once, which can again be enforced using the request ID.
The end-to-end argument
This scenario of suppressing duplicate transactions is just one example of a more
general principle called the end-to-end argument, which was articulated by Saltzer,
Reed, and Clark in 1984 [55]:
The function in question can completely and correctly be implemented only with the
knowledge and help of the application standing at the endpoints of the communica‐
tion system. Therefore, providing that questioned function as a feature of the commu‐
nication system itself is not possible. (Sometimes an incomplete version of the function
provided by the communication system may be useful as a performance enhance‐
ment.)
In our example, the function in question was duplicate suppression. We saw that TCP
suppresses duplicate packets at the TCP connection level, and some stream process‐
ors provide so-called exactly-once semantics at the message processing level, but that
is not enough to prevent a user from submitting a duplicate request if the first one
times out. By themselves, TCP, database transactions, and stream processors cannot
entirely rule out these duplicates. Solving the problem requires an end-to-end solu‐
tion: a transaction identifier that is passed all the way from the end-user client to the
database.
The end-to-end argument also applies to checking the integrity of data: checksums
built into Ethernet, TCP, and TLS can detect corruption of packets in the network,
but they cannot detect corruption due to bugs in the software at the sending and
receiving ends of the network connection, or corruption on the disks where the data
is stored. If you want to catch all possible sources of data corruption, you also need
end-to-end checksums.
A similar argument applies with encryption [55]: the password on your home WiFi
network protects against people snooping your WiFi traffic, but not against attackers
elsewhere on the internet; TLS/SSL between your client and the server protects
Aiming for Correctness 
| 
519
