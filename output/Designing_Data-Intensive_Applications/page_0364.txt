If you are familiar with distributed version control systems such as Git, their version
histories are very much like the graph of causal dependencies. Often one commit
happens after another, in a straight line, but sometimes you get branches (when sev‐
eral people concurrently work on a project), and merges are created when those con‐
currently created commits are combined.
Linearizability is stronger than causal consistency
So what is the relationship between the causal order and linearizability? The answer is
that linearizability implies causality: any system that is linearizable will preserve cau‐
sality correctly [7]. In particular, if there are multiple communication channels in a
system (such as the message queue and the file storage service in Figure 9-5), lineariz‐
ability ensures that causality is automatically preserved without the system having to
do anything special (such as passing around timestamps between different compo‐
nents).
The fact that linearizability ensures causality is what makes linearizable systems sim‐
ple to understand and appealing. However, as discussed in “The Cost of Linearizabil‐
ity” on page 335, making a system linearizable can harm its performance and
availability, especially if the system has significant network delays (for example, if it’s
geographically distributed). For this reason, some distributed data systems have
abandoned linearizability, which allows them to achieve better performance but can
make them difficult to work with.
The good news is that a middle ground is possible. Linearizability is not the only way
of preserving causality—there are other ways too. A system can be causally consistent
without incurring the performance hit of making it linearizable (in particular, the
CAP theorem does not apply). In fact, causal consistency is the strongest possible
consistency model that does not slow down due to network delays, and remains
available in the face of network failures [2, 42].
In many cases, systems that appear to require linearizability in fact only really require
causal consistency, which can be implemented more efficiently. Based on this obser‐
vation, researchers are exploring new kinds of databases that preserve causality, with
performance and availability characteristics that are similar to those of eventually
consistent systems [49, 50, 51].
As this research is quite recent, not much of it has yet made its way into production
systems, and there are still challenges to be overcome [52, 53]. However, it is a prom‐
ising direction for future systems.
Capturing causal dependencies
We won’t go into all the nitty-gritty details of how nonlinearizable systems can main‐
tain causal consistency here, but just briefly explore some of the key ideas.
342 
| 
Chapter 9: Consistency and Consensus
