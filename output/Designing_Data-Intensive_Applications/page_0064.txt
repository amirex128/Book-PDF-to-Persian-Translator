v. Codd’s original description of the relational model [1] actually allowed something quite similar to JSON
documents within a relational schema. He called it nonsimple domains. The idea was that a value in a row
doesn’t have to just be a primitive datatype like a number or a string, but could also be a nested relation
(table)—so you can have an arbitrarily nested tree structure as a value, much like the JSON or XML support
that was added to SQL over 30 years later.
PostgreSQL since version 9.3 [8], MySQL since version 5.7, and IBM DB2 since ver‐
sion 10.5 [30] also have a similar level of support for JSON documents. Given the
popularity of JSON for web APIs, it is likely that other relational databases will follow
in their footsteps and add JSON support.
On the document database side, RethinkDB supports relational-like joins in its query
language, and some MongoDB drivers automatically resolve database references
(effectively performing a client-side join, although this is likely to be slower than a
join performed in the database since it requires additional network round-trips and is
less optimized).
It seems that relational and document databases are becoming more similar over
time, and that is a good thing: the data models complement each other.v If a database
is able to handle document-like data and also perform relational queries on it, appli‐
cations can use the combination of features that best fits their needs.
A hybrid of the relational and document models is a good route for databases to take
in the future. 
Query Languages for Data
When the relational model was introduced, it included a new way of querying data:
SQL is a declarative query language, whereas IMS and CODASYL queried the data‐
base using imperative code. What does that mean?
Many commonly used programming languages are imperative. For example, if you
have a list of animal species, you might write something like this to return only the
sharks in the list:
function getSharks() {
    var sharks = [];
    for (var i = 0; i < animals.length; i++) {
        if (animals[i].family === "Sharks") {
            sharks.push(animals[i]);
        }
    }
    return sharks;
}
In the relational algebra, you would instead write:
sharks  =  σfamily = “Sharks” (animals)
42 
| 
Chapter 2: Data Models and Query Languages
