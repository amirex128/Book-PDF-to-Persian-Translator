Even if a consumer does fall too far behind and starts missing messages, only that
consumer is affected; it does not disrupt the service for other consumers. This fact is
a big operational advantage: you can experimentally consume a production log for
development, testing, or debugging purposes, without having to worry much about
disrupting production services. When a consumer is shut down or crashes, it stops
consuming resources—the only thing that remains is its consumer offset.
This behavior also contrasts with traditional message brokers, where you need to be
careful to delete any queues whose consumers have been shut down—otherwise they
continue unnecessarily accumulating messages and taking away memory from con‐
sumers that are still active.
Replaying old messages
We noted previously that with AMQP- and JMS-style message brokers, processing
and acknowledging messages is a destructive operation, since it causes the messages
to be deleted on the broker. On the other hand, in a log-based message broker, con‐
suming messages is more like reading from a file: it is a read-only operation that does
not change the log.
The only side effect of processing, besides any output of the consumer, is that the
consumer offset moves forward. But the offset is under the consumer’s control, so it
can easily be manipulated if necessary: for example, you can start a copy of a con‐
sumer with yesterday’s offsets and write the output to a different location, in order to
reprocess the last day’s worth of messages. You can repeat this any number of times,
varying the processing code.
This aspect makes log-based messaging more like the batch processes of the last
chapter, where derived data is clearly separated from input data through a repeatable
transformation process. It allows more experimentation and easier recovery from
errors and bugs, making it a good tool for integrating dataflows within an organiza‐
tion [24]. 
Databases and Streams
We have drawn some comparisons between message brokers and databases. Even
though they have traditionally been considered separate categories of tools, we saw
that log-based message brokers have been successful in taking ideas from databases
and applying them to messaging. We can also go in reverse: take ideas from messag‐
ing and streams, and apply them to databases.
We said previously that an event is a record of something that happened at some
point in time. The thing that happened may be a user action (e.g., typing a search
query), or a sensor reading, but it may also be a write to a database. The fact that
something was written to a database is an event that can be captured, stored, and pro‐
Databases and Streams 
| 
451
