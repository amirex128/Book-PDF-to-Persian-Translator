When we talk about joins in the context of batch processing, we mean resolving all
occurrences of some association within a dataset. For example, we assume that a job
is processing the data for all users simultaneously, not merely looking up the data for
one particular user (which would be done far more efficiently with an index).
Example: analysis of user activity events
A typical example of a join in a batch job is illustrated in Figure 10-2. On the left is a
log of events describing the things that logged-in users did on a website (known as
activity events or clickstream data), and on the right is a database of users. You can
think of this example as being part of a star schema (see “Stars and Snowflakes: Sche‐
mas for Analytics” on page 93): the log of events is the fact table, and the user data‐
base is one of the dimensions.
Figure 10-2. A join between a log of user activity events and a database of user profiles.
An analytics task may need to correlate user activity with user profile information:
for example, if the profile contains the user’s age or date of birth, the system could
determine which pages are most popular with which age groups. However, the activ‐
ity events contain only the user ID, not the full user profile information. Embedding
that profile information in every single activity event would most likely be too waste‐
ful. Therefore, the activity events need to be joined with the user profile database.
The simplest implementation of this join would go over the activity events one by
one and query the user database (on a remote server) for every user ID it encounters.
This is possible, but it would most likely suffer from very poor performance: the pro‐
cessing throughput would be limited by the round-trip time to the database server,
the effectiveness of a local cache would depend very much on the distribution of data,
and running a large number of queries in parallel could easily overwhelm the data‐
base [35].
404 
| 
Chapter 10: Batch Processing
