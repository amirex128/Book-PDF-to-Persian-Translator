Part II for a definition of shared nothing). Thus, a large dataset can be distributed
across many disks, and the query load can be distributed across many processors.
For queries that operate on a single partition, each node can independently execute
the queries for its own partition, so query throughput can be scaled by adding more
nodes. Large, complex queries can potentially be parallelized across many nodes,
although this gets significantly harder.
Partitioned databases were pioneered in the 1980s by products such as Teradata and
Tandem NonStop SQL [1], and more recently rediscovered by NoSQL databases and
Hadoop-based data warehouses. Some systems are designed for transactional work‐
loads, and others for analytics (see “Transaction Processing or Analytics?” on page
90): this difference affects how the system is tuned, but the fundamentals of partition‐
ing apply to both kinds of workloads.
In this chapter we will first look at different approaches for partitioning large datasets
and observe how the indexing of data interacts with partitioning. We’ll then talk
about rebalancing, which is necessary if you want to add or remove nodes in your
cluster. Finally, we’ll get an overview of how databases route requests to the right par‐
titions and execute queries.
Partitioning and Replication
Partitioning is usually combined with replication so that copies of each partition are
stored on multiple nodes. This means that, even though each record belongs to
exactly one partition, it may still be stored on several different nodes for fault toler‐
ance.
A node may store more than one partition. If a leader–follower replication model is
used, the combination of partitioning and replication can look like Figure 6-1. Each
partition’s leader is assigned to one node, and its followers are assigned to other
nodes. Each node may be the leader for some partitions and a follower for other par‐
titions.
Everything we discussed in Chapter 5 about replication of databases applies equally
to replication of partitions. The choice of partitioning scheme is mostly independent
of the choice of replication scheme, so we will keep things simple and ignore replica‐
tion in this chapter.
200 
| 
Chapter 6: Partitioning
