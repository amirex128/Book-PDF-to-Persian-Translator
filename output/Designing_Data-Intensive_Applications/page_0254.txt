of violating its guarantee of atomicity, isolation, or durability, it would rather aban‐
don the transaction entirely than allow it to remain half-finished.
Not all systems follow that philosophy, though. In particular, datastores with leader‐
less replication (see “Leaderless Replication” on page 177) work much more on a
“best effort” basis, which could be summarized as “the database will do as much as it
can, and if it runs into an error, it won’t undo something it has already done”—so it’s
the application’s responsibility to recover from errors.
Errors will inevitably happen, but many software developers prefer to think only
about the happy path rather than the intricacies of error handling. For example, pop‐
ular object-relational mapping (ORM) frameworks such as Rails’s ActiveRecord and
Django don’t retry aborted transactions—the error usually results in an exception
bubbling up the stack, so any user input is thrown away and the user gets an error
message. This is a shame, because the whole point of aborts is to enable safe retries.
Although retrying an aborted transaction is a simple and effective error handling
mechanism, it isn’t perfect:
• If the transaction actually succeeded, but the network failed while the server tried
to acknowledge the successful commit to the client (so the client thinks it failed),
then retrying the transaction causes it to be performed twice—unless you have an
additional application-level deduplication mechanism in place.
• If the error is due to overload, retrying the transaction will make the problem
worse, not better. To avoid such feedback cycles, you can limit the number of
retries, use exponential backoff, and handle overload-related errors differently
from other errors (if possible).
• It is only worth retrying after transient errors (for example due to deadlock, iso‐
lation violation, temporary network interruptions, and failover); after a perma‐
nent error (e.g., constraint violation) a retry would be pointless.
• If the transaction also has side effects outside of the database, those side effects
may happen even if the transaction is aborted. For example, if you’re sending an
email, you wouldn’t want to send the email again every time you retry the trans‐
action. If you want to make sure that several different systems either commit or
abort together, two-phase commit can help (we will discuss this in “Atomic
Commit and Two-Phase Commit (2PC)” on page 354).
• If the client process fails while retrying, any data it was trying to write to the
database is lost. 
232 
| 
Chapter 7: Transactions
