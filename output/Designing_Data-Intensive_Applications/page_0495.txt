data pipelines to incremental processing of unbounded datasets, there is exactly the
same need for joins on streams.
However, the fact that new events can appear anytime on a stream makes joins on
streams more challenging than in batch jobs. To understand the situation better, let’s
distinguish three different types of joins: stream-stream joins, stream-table joins, and
table-table joins [84]. In the following sections we’ll illustrate each by example.
Stream-stream join (window join)
Say you have a search feature on your website, and you want to detect recent trends
in searched-for URLs. Every time someone types a search query, you log an event
containing the query and the results returned. Every time someone clicks one of the
search results, you log another event recording the click. In order to calculate the
click-through rate for each URL in the search results, you need to bring together the
events for the search action and the click action, which are connected by having the
same session ID. Similar analyses are needed in advertising systems [85].
The click may never come if the user abandons their search, and even if it comes, the
time between the search and the click may be highly variable: in many cases it might
be a few seconds, but it could be as long as days or weeks (if a user runs a search,
forgets about that browser tab, and then returns to the tab and clicks a result some‐
time later). Due to variable network delays, the click event may even arrive before the
search event. You can choose a suitable window for the join—for example, you may
choose to join a click with a search if they occur at most one hour apart.
Note that embedding the details of the search in the click event is not equivalent to
joining the events: doing so would only tell you about the cases where the user
clicked a search result, not about the searches where the user did not click any of the
results. In order to measure search quality, you need accurate click-through rates, for
which you need both the search events and the click events.
To implement this type of join, a stream processor needs to maintain state: for exam‐
ple, all the events that occurred in the last hour, indexed by session ID. Whenever a
search event or click event occurs, it is added to the appropriate index, and the
stream processor also checks the other index to see if another event for the same ses‐
sion ID has already arrived. If there is a matching event, you emit an event saying
which search result was clicked. If the search event expires without you seeing a
matching click event, you emit an event saying which search results were not clicked.
Stream-table join (stream enrichment)
In “Example: analysis of user activity events” on page 404 (Figure 10-2) we saw an
example of a batch job joining two datasets: a set of user activity events and a data‐
base of user profiles. It is natural to think of the user activity events as a stream, and
to perform the same join on a continuous basis in a stream processor: the input is a
Processing Streams 
| 
473
