fers and Thrift [29]. However, it’s also very complex and badly documented, so
ASN.1 is probably not a good choice for new applications.
Many data systems also implement some kind of proprietary binary encoding for
their data. For example, most relational databases have a network protocol over
which you can send queries to the database and get back responses. Those protocols
are generally specific to a particular database, and the database vendor provides a
driver (e.g., using the ODBC or JDBC APIs) that decodes responses from the data‐
base’s network protocol into in-memory data structures.
So, we can see that although textual data formats such as JSON, XML, and CSV are
widespread, binary encodings based on schemas are also a viable option. They have a
number of nice properties:
• They can be much more compact than the various “binary JSON” variants, since
they can omit field names from the encoded data.
• The schema is a valuable form of documentation, and because the schema is
required for decoding, you can be sure that it is up to date (whereas manually
maintained documentation may easily diverge from reality).
• Keeping a database of schemas allows you to check forward and backward com‐
patibility of schema changes, before anything is deployed.
• For users of statically typed programming languages, the ability to generate code
from the schema is useful, since it enables type checking at compile time.
In summary, schema evolution allows the same kind of flexibility as schemaless/
schema-on-read JSON databases provide (see “Schema flexibility in the document
model” on page 39), while also providing better guarantees about your data and bet‐
ter tooling. 
Modes of Dataflow
At the beginning of this chapter we said that whenever you want to send some data to
another process with which you don’t share memory—for example, whenever you
want to send data over the network or write it to a file—you need to encode it as a
sequence of bytes. We then discussed a variety of different encodings for doing this.
We talked about forward and backward compatibility, which are important for evolv‐
ability (making change easy by allowing you to upgrade different parts of your system
independently, and not having to change everything at once). Compatibility is a rela‐
tionship between one process that encodes the data, and another process that decodes
it.
128 
| 
Chapter 4: Encoding and Evolution
