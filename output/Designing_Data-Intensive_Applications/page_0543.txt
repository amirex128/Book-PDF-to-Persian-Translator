Enforcing Constraints
Let’s think about correctness in the context of the ideas around unbundling databases
(“Unbundling Databases” on page 499). We saw that end-to-end duplicate suppres‐
sion can be achieved with a request ID that is passed all the way from the client to the
database that records the write. What about other kinds of constraints?
In particular, let’s focus on uniqueness constraints—such as the one we relied on in
Example 12-2. In “Constraints and uniqueness guarantees” on page 330 we saw sev‐
eral other examples of application features that need to enforce uniqueness: a user‐
name or email address must uniquely identify a user, a file storage service cannot
have more than one file with the same name, and two people cannot book the same
seat on a flight or in a theater.
Other kinds of constraints are very similar: for example, ensuring that an account
balance never goes negative, that you don’t sell more items than you have in stock in
the warehouse, or that a meeting room does not have overlapping bookings. Techni‐
ques that enforce uniqueness can often be used for these kinds of constraints as well.
Uniqueness constraints require consensus
In Chapter 9 we saw that in a distributed setting, enforcing a uniqueness constraint
requires consensus: if there are several concurrent requests with the same value, the
system somehow needs to decide which one of the conflicting operations is accepted,
and reject the others as violations of the constraint.
The most common way of achieving this consensus is to make a single node the
leader, and put it in charge of making all the decisions. That works fine as long as you
don’t mind funneling all requests through a single node (even if the client is on the
other side of the world), and as long as that node doesn’t fail. If you need to tolerate
the leader failing, you’re back at the consensus problem again (see “Single-leader rep‐
lication and consensus” on page 367).
Uniqueness checking can be scaled out by partitioning based on the value that needs
to be unique. For example, if you need to ensure uniqueness by request ID, as in
Example 12-2, you can ensure all requests with the same request ID are routed to the
same partition (see Chapter 6). If you need usernames to be unique, you can partition
by hash of username.
However, asynchronous multi-master replication is ruled out, because it could hap‐
pen that different masters concurrently accept conflicting writes, and thus the values
are no longer unique (see “Implementing Linearizable Systems” on page 332). If you
want to be able to immediately reject any writes that would violate the constraint,
synchronous coordination is unavoidable [56].
Aiming for Correctness 
| 
521
