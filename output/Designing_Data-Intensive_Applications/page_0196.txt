Automatic Conflict Resolution
Conflict resolution rules can quickly become complicated, and custom code can be
error-prone. Amazon is a frequently cited example of surprising effects due to a con‐
flict resolution handler: for some time, the conflict resolution logic on the shopping
cart would preserve items added to the cart, but not items removed from the cart.
Thus, customers would sometimes see items reappearing in their carts even though
they had previously been removed [37].
There has been some interesting research into automatically resolving conflicts
caused by concurrent data modifications. A few lines of research are worth mention‐
ing:
• Conflict-free replicated datatypes (CRDTs) [32, 38] are a family of data structures
for sets, maps, ordered lists, counters, etc. that can be concurrently edited by
multiple users, and which automatically resolve conflicts in sensible ways. Some
CRDTs have been implemented in Riak 2.0 [39, 40].
• Mergeable persistent data structures [41] track history explicitly, similarly to the
Git version control system, and use a three-way merge function (whereas CRDTs
use two-way merges).
• Operational transformation [42] is the conflict resolution algorithm behind col‐
laborative editing applications such as Etherpad [30] and Google Docs [31]. It
was designed particularly for concurrent editing of an ordered list of items, such
as the list of characters that constitute a text document.
Implementations of these algorithms in databases are still young, but it’s likely that
they will be integrated into more replicated data systems in the future. Automatic
conflict resolution could make multi-leader data synchronization much simpler for
applications to deal with. 
What is a conflict?
Some kinds of conflict are obvious. In the example in Figure 5-7, two writes concur‐
rently modified the same field in the same record, setting it to two different values.
There is little doubt that this is a conflict.
Other kinds of conflict can be more subtle to detect. For example, consider a meeting
room booking system: it tracks which room is booked by which group of people at
which time. This application needs to ensure that each room is only booked by one
group of people at any one time (i.e., there must not be any overlapping bookings for
the same room). In this case, a conflict may arise if two different bookings are created
for the same room at the same time. Even if the application checks availability before
174 
| 
Chapter 5: Replication
