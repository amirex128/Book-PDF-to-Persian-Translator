Membership and Coordination Services
Projects like ZooKeeper or etcd are often described as “distributed key-value stores”
or “coordination and configuration services.” The API of such a service looks pretty
much like that of a database: you can read and write the value for a given key, and
iterate over keys. So if they’re basically databases, why do they go to all the effort of
implementing a consensus algorithm? What makes them different from any other
kind of database?
To understand this, it is helpful to briefly explore how a service like ZooKeeper is
used. As an application developer, you will rarely need to use ZooKeeper directly,
because it is actually not well suited as a general-purpose database. It is more likely
that you will end up relying on it indirectly via some other project: for example,
HBase, Hadoop YARN, OpenStack Nova, and Kafka all rely on ZooKeeper running
in the background. What is it that these projects get from it?
ZooKeeper and etcd are designed to hold small amounts of data that can fit entirely
in memory (although they still write to disk for durability)—so you wouldn’t want to
store all of your application’s data here. That small amount of data is replicated
across all the nodes using a fault-tolerant total order broadcast algorithm. As dis‐
cussed previously, total order broadcast is just what you need for database replica‐
tion: if each message represents a write to the database, applying the same writes in
the same order keeps replicas consistent with each other.
ZooKeeper is modeled after Google’s Chubby lock service [14, 98], implementing not
only total order broadcast (and hence consensus), but also an interesting set of other
features that turn out to be particularly useful when building distributed systems:
Linearizable atomic operations
Using an atomic compare-and-set operation, you can implement a lock: if several
nodes concurrently try to perform the same operation, only one of them will suc‐
ceed. The consensus protocol guarantees that the operation will be atomic and
linearizable, even if a node fails or the network is interrupted at any point. A dis‐
tributed lock is usually implemented as a lease, which has an expiry time so that
it is eventually released in case the client fails (see “Process Pauses” on page 295).
Total ordering of operations
As discussed in “The leader and the lock” on page 301, when some resource is
protected by a lock or lease, you need a fencing token to prevent clients from con‐
flicting with each other in the case of a process pause. The fencing token is some
number that monotonically increases every time the lock is acquired. ZooKeeper
provides this by totally ordering all operations and giving each operation a
monotonically increasing transaction ID (zxid) and version number (cversion)
[15].
370 
| 
Chapter 9: Consistency and Consensus
