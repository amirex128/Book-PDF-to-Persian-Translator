with Lamport timestamps—in fact, this is the key difference between total order
broadcast and timestamp ordering.
How hard could it be to make a linearizable integer with an atomic increment-and-
get operation? As usual, if things never failed, it would be easy: you could just keep it
in a variable on one node. The problem lies in handling the situation when network
connections to that node are interrupted, and restoring the value when that node fails
[59]. In general, if you think hard enough about linearizable sequence number gener‐
ators, you inevitably end up with a consensus algorithm.
This is no coincidence: it can be proved that a linearizable compare-and-set (or
increment-and-get) register and total order broadcast are both equivalent to consen‐
sus [28, 67]. That is, if you can solve one of these problems, you can transform it into
a solution for the others. This is quite a profound and surprising insight!
It is time to finally tackle the consensus problem head-on, which we will do in the
rest of this chapter. 
Distributed Transactions and Consensus
Consensus is one of the most important and fundamental problems in distributed
computing. On the surface, it seems simple: informally, the goal is simply to get sev‐
eral nodes to agree on something. You might think that this shouldn’t be too hard.
Unfortunately, many broken systems have been built in the mistaken belief that this
problem is easy to solve.
Although consensus is very important, the section about it appears late in this book
because the topic is quite subtle, and appreciating the subtleties requires some pre‐
requisite knowledge. Even in the academic research community, the understanding
of consensus only gradually crystallized over the course of decades, with many mis‐
understandings along the way. Now that we have discussed replication (Chapter 5),
transactions (Chapter 7), system models (Chapter 8), linearizability, and total order
broadcast (this chapter), we are finally ready to tackle the consensus problem.
There are a number of situations in which it is important for nodes to agree. For
example:
Leader election
In a database with single-leader replication, all nodes need to agree on which
node is the leader. The leadership position might become contested if some
nodes can’t communicate with others due to a network fault. In this case, con‐
sensus is important to avoid a bad failover, resulting in a split brain situation in
which two nodes both believe themselves to be the leader (see “Handling Node
Outages” on page 156). If there were two leaders, they would both accept writes
and their data would diverge, leading to inconsistency and data loss.
352 
| 
Chapter 9: Consistency and Consensus
