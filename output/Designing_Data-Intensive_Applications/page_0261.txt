vii. To be precise, transaction IDs are 32-bit integers, so they overflow after approximately 4 billion transac‐
tions. PostgreSQL’s vacuum process performs cleanup which ensures that overflow does not affect the data.
it operates is changing at the same time as the query is executing. When a transaction
can see a consistent snapshot of the database, frozen at a particular point in time, it is
much easier to understand.
Snapshot isolation is a popular feature: it is supported by PostgreSQL, MySQL with
the InnoDB storage engine, Oracle, SQL Server, and others [23, 31, 32].
Implementing snapshot isolation
Like read committed isolation, implementations of snapshot isolation typically use
write locks to prevent dirty writes (see “Implementing read committed” on page 236),
which means that a transaction that makes a write can block the progress of another
transaction that writes to the same object. However, reads do not require any locks.
From a performance point of view, a key principle of snapshot isolation is readers
never block writers, and writers never block readers. This allows a database to handle
long-running read queries on a consistent snapshot at the same time as processing
writes normally, without any lock contention between the two.
To implement snapshot isolation, databases use a generalization of the mechanism
we saw for preventing dirty reads in Figure 7-4. The database must potentially keep
several different committed versions of an object, because various in-progress trans‐
actions may need to see the state of the database at different points in time. Because it
maintains several versions of an object side by side, this technique is known as multi-
version concurrency control (MVCC).
If a database only needed to provide read committed isolation, but not snapshot iso‐
lation, it would be sufficient to keep two versions of an object: the committed version
and the overwritten-but-not-yet-committed version. However, storage engines that
support snapshot isolation typically use MVCC for their read committed isolation
level as well. A typical approach is that read committed uses a separate snapshot for
each query, while snapshot isolation uses the same snapshot for an entire transaction.
Figure 7-7 illustrates how MVCC-based snapshot isolation is implemented in Post‐
greSQL [31] (other implementations are similar). When a transaction is started, it is
given a unique, always-increasingvii transaction ID (txid). Whenever a transaction
writes anything to the database, the data it writes is tagged with the transaction ID of
the writer.
Weak Isolation Levels 
| 
239
