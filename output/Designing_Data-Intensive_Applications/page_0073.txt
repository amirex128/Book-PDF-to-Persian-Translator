• The vertex at which the edge ends (the head vertex)
• A label to describe the kind of relationship between the two vertices
• A collection of properties (key-value pairs)
You can think of a graph store as consisting of two relational tables, one for vertices
and one for edges, as shown in Example 2-2 (this schema uses the PostgreSQL json
datatype to store the properties of each vertex or edge). The head and tail vertex are
stored for each edge; if you want the set of incoming or outgoing edges for a vertex,
you can query the edges table by head_vertex or tail_vertex, respectively.
Example 2-2. Representing a property graph using a relational schema
CREATE TABLE vertices (
    vertex_id   integer PRIMARY KEY,
    properties  json
);
CREATE TABLE edges (
    edge_id     integer PRIMARY KEY,
    tail_vertex integer REFERENCES vertices (vertex_id),
    head_vertex integer REFERENCES vertices (vertex_id),
    label       text,
    properties  json
);
CREATE INDEX edges_tails ON edges (tail_vertex);
CREATE INDEX edges_heads ON edges (head_vertex);
Some important aspects of this model are:
1. Any vertex can have an edge connecting it with any other vertex. There is no
schema that restricts which kinds of things can or cannot be associated.
2. Given any vertex, you can efficiently find both its incoming and its outgoing
edges, and thus traverse the graph—i.e., follow a path through a chain of vertices
—both forward and backward. (That’s why Example 2-2 has indexes on both the
tail_vertex and head_vertex columns.)
3. By using different labels for different kinds of relationships, you can store several
different kinds of information in a single graph, while still maintaining a clean
data model.
Those features give graphs a great deal of flexibility for data modeling, as illustrated
in Figure 2-5. The figure shows a few things that would be difficult to express in a
traditional relational schema, such as different kinds of regional structures in differ‐
ent countries (France has départements and régions, whereas the US has counties and
states), quirks of history such as a country within a country (ignoring for now the
Graph-Like Data Models 
| 
51
