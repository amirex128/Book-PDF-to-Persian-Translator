Databases and filesystems take the opposite approach: everything that is written to a
database or file is normally expected to be permanently recorded, at least until some‐
one explicitly chooses to delete it again.
This difference in mindset has a big impact on how derived data is created. A key
feature of batch processes, as discussed in Chapter 10, is that you can run them
repeatedly, experimenting with the processing steps, without risk of damaging the
input (since the input is read-only). This is not the case with AMQP/JMS-style mes‐
saging: receiving a message is destructive if the acknowledgment causes it to be
deleted from the broker, so you cannot run the same consumer again and expect to
get the same result.
If you add a new consumer to a messaging system, it typically only starts receiving
messages sent after the time it was registered; any prior messages are already gone
and cannot be recovered. Contrast this with files and databases, where you can add a
new client at any time, and it can read data written arbitrarily far in the past (as long
as it has not been explicitly overwritten or deleted by the application).
Why can we not have a hybrid, combining the durable storage approach of databases
with the low-latency notification facilities of messaging? This is the idea behind log-
based message brokers.
Using logs for message storage
A log is simply an append-only sequence of records on disk. We previously discussed
logs in the context of log-structured storage engines and write-ahead logs in Chap‐
ter 3, and in the context of replication in Chapter 5.
The same structure can be used to implement a message broker: a producer sends a
message by appending it to the end of the log, and a consumer receives messages by
reading the log sequentially. If a consumer reaches the end of the log, it waits for a
notification that a new message has been appended. The Unix tool tail -f, which
watches a file for data being appended, essentially works like this.
In order to scale to higher throughput than a single disk can offer, the log can be
partitioned (in the sense of Chapter 6). Different partitions can then be hosted on dif‐
ferent machines, making each partition a separate log that can be read and written
independently from other partitions. A topic can then be defined as a group of parti‐
tions that all carry messages of the same type. This approach is illustrated in
Figure 11-3.
Within each partition, the broker assigns a monotonically increasing sequence num‐
ber, or offset, to every message (in Figure 11-3, the numbers in boxes are message off‐
sets). Such a sequence number makes sense because a partition is append-only, so the
messages within a partition are totally ordered. There is no ordering guarantee across
different partitions.
Transmitting Event Streams 
| 
447
