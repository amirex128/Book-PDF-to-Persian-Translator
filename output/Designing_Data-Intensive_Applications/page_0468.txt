When combined with load balancing, this redelivery behavior has an interesting
effect on the ordering of messages. In Figure 11-2, the consumers generally process
messages in the order they were sent by producers. However, consumer 2 crashes
while processing message m3, at the same time as consumer 1 is processing message
m4. The unacknowledged message m3 is subsequently redelivered to consumer 1,
with the result that consumer 1 processes messages in the order m4, m3, m5. Thus,
m3 and m4 are not delivered in the same order as they were sent by producer 1.
Figure 11-2. Consumer 2 crashes while processing m3, so it is redelivered to consumer 1
at a later time.
Even if the message broker otherwise tries to preserve the order of messages (as
required by both the JMS and AMQP standards), the combination of load balancing
with redelivery inevitably leads to messages being reordered. To avoid this issue, you
can use a separate queue per consumer (i.e., not use the load balancing feature). Mes‐
sage reordering is not a problem if messages are completely independent of each
other, but it can be important if there are causal dependencies between messages, as
we shall see later in the chapter. 
Partitioned Logs
Sending a packet over a network or making a request to a network service is normally
a transient operation that leaves no permanent trace. Although it is possible to record
it permanently (using packet capture and logging), we normally don’t think of it that
way. Even message brokers that durably write messages to disk quickly delete them
again after they have been delivered to consumers, because they are built around a
transient messaging mindset.
446 
| 
Chapter 11: Stream Processing
