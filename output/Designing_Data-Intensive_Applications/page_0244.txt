For decades, transactions have been the mechanism of choice for simplifying these
issues. A transaction is a way for an application to group several reads and writes
together into a logical unit. Conceptually, all the reads and writes in a transaction are
executed as one operation: either the entire transaction succeeds (commit) or it fails
(abort, rollback). If it fails, the application can safely retry. With transactions, error
handling becomes much simpler for an application, because it doesn’t need to worry
about partial failure—i.e., the case where some operations succeed and some fail (for
whatever reason).
If you have spent years working with transactions, they may seem obvious, but we
shouldn’t take them for granted. Transactions are not a law of nature; they were cre‐
ated with a purpose, namely to simplify the programming model for applications
accessing a database. By using transactions, the application is free to ignore certain
potential error scenarios and concurrency issues, because the database takes care of
them instead (we call these safety guarantees).
Not every application needs transactions, and sometimes there are advantages to
weakening transactional guarantees or abandoning them entirely (for example, to
achieve higher performance or higher availability). Some safety properties can be
achieved without transactions.
How do you figure out whether you need transactions? In order to answer that ques‐
tion, we first need to understand exactly what safety guarantees transactions can pro‐
vide, and what costs are associated with them. Although transactions seem
straightforward at first glance, there are actually many subtle but important details
that come into play.
In this chapter, we will examine many examples of things that can go wrong, and
explore the algorithms that databases use to guard against those issues. We will go
especially deep in the area of concurrency control, discussing various kinds of race
conditions that can occur and how databases implement isolation levels such as read
committed, snapshot isolation, and serializability.
This chapter applies to both single-node and distributed databases; in Chapter 8 we
will focus the discussion on the particular challenges that arise only in distributed
systems.
The Slippery Concept of a Transaction
Almost all relational databases today, and some nonrelational databases, support
transactions. Most of them follow the style that was introduced in 1975 by IBM Sys‐
tem R, the first SQL database [1, 2, 3]. Although some implementation details have
changed, the general idea has remained virtually the same for 40 years: the transac‐
tion support in MySQL, PostgreSQL, Oracle, SQL Server, etc., is uncannily similar to
that of System R.
222 
| 
Chapter 7: Transactions
