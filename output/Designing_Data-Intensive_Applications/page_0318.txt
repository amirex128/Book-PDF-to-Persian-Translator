the lease before it expires. If the node fails, it stops renewing the lease, so another
node can take over when it expires.
You can imagine the request-handling loop looking something like this:
while (true) {
    request = getIncomingRequest();
    // Ensure that the lease always has at least 10 seconds remaining
    if (lease.expiryTimeMillis - System.currentTimeMillis() < 10000) {
        lease = lease.renew();
    }
    if (lease.isValid()) {
        process(request);
    }
}
What’s wrong with this code? Firstly, it’s relying on synchronized clocks: the expiry
time on the lease is set by a different machine (where the expiry may be calculated as
the current time plus 30 seconds, for example), and it’s being compared to the local
system clock. If the clocks are out of sync by more than a few seconds, this code will
start doing strange things.
Secondly, even if we change the protocol to only use the local monotonic clock, there
is another problem: the code assumes that very little time passes between the point
that it checks the time (System.currentTimeMillis()) and the time when the
request is processed (process(request)). Normally this code runs very quickly, so
the 10 second buffer is more than enough to ensure that the lease doesn’t expire in
the middle of processing a request.
However, what if there is an unexpected pause in the execution of the program? For
example, imagine the thread stops for 15 seconds around the line lease.isValid()
before finally continuing. In that case, it’s likely that the lease will have expired by the
time the request is processed, and another node has already taken over as leader.
However, there is nothing to tell this thread that it was paused for so long, so this
code won’t notice that the lease has expired until the next iteration of the loop—by
which time it may have already done something unsafe by processing the request.
Is it crazy to assume that a thread might be paused for so long? Unfortunately not.
There are various reasons why this could happen:
• Many programming language runtimes (such as the Java Virtual Machine) have
a garbage collector (GC) that occasionally needs to stop all running threads.
These “stop-the-world” GC pauses have sometimes been known to last for several
minutes [64]! Even so-called “concurrent” garbage collectors like the HotSpot
JVM’s CMS cannot fully run in parallel with the application code—even they
need to stop the world from time to time [65]. Although the pauses can often be
296 
| 
Chapter 8: The Trouble with Distributed Systems
