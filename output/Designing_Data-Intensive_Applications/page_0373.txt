Because log entries are delivered to all nodes in the same order, if there are several
concurrent writes, all nodes will agree on which one came first. Choosing the first of
the conflicting writes as the winner and aborting later ones ensures that all nodes
agree on whether a write was committed or aborted. A similar approach can be used
to implement serializable multi-object transactions on top of a log [62].
While this procedure ensures linearizable writes, it doesn’t guarantee linearizable
reads—if you read from a store that is asynchronously updated from the log, it may
be stale. (To be precise, the procedure described here provides sequential consistency
[47, 64], sometimes also known as timeline consistency [65, 66], a slightly weaker
guarantee than linearizability.) To make reads linearizable, there are a few options:
• You can sequence reads through the log by appending a message, reading the log,
and performing the actual read when the message is delivered back to you. The
message’s position in the log thus defines the point in time at which the read
happens. (Quorum reads in etcd work somewhat like this [16].)
• If the log allows you to fetch the position of the latest log message in a lineariza‐
ble way, you can query that position, wait for all entries up to that position to be
delivered to you, and then perform the read. (This is the idea behind Zoo‐
Keeper’s sync() operation [15].)
• You can make your read from a replica that is synchronously updated on writes,
and is thus sure to be up to date. (This technique is used in chain replication
[63]; see also “Research on Replication” on page 155.)
Implementing total order broadcast using linearizable storage
The last section showed how to build a linearizable compare-and-set operation from
total order broadcast. We can also turn it around, assume that we have linearizable
storage, and show how to build total order broadcast from it.
The easiest way is to assume you have a linearizable register that stores an integer and
that has an atomic increment-and-get operation [28]. Alternatively, an atomic
compare-and-set operation would also do the job.
The algorithm is simple: for every message you want to send through total order
broadcast, you increment-and-get the linearizable integer, and then attach the value
you got from the register as a sequence number to the message. You can then send
the message to all nodes (resending any lost messages), and the recipients will deliver
the messages consecutively by sequence number.
Note that unlike Lamport timestamps, the numbers you get from incrementing the
linearizable register form a sequence with no gaps. Thus, if a node has delivered mes‐
sage 4 and receives an incoming message with a sequence number of 6, it knows that
it must wait for message 5 before it can deliver message 6. The same is not the case
Ordering Guarantees 
| 
351
