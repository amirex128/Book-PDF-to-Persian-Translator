happen that the commit succeeds on some nodes and fails on other nodes, which
would violate the atomicity guarantee:
• Some nodes may detect a constraint violation or conflict, making an abort neces‐
sary, while other nodes are successfully able to commit.
• Some of the commit requests might be lost in the network, eventually aborting
due to a timeout, while other commit requests get through.
• Some nodes may crash before the commit record is fully written and roll back on
recovery, while others successfully commit.
If some nodes commit the transaction but others abort it, the nodes become inconsis‐
tent with each other (like in Figure 7-3). And once a transaction has been committed
on one node, it cannot be retracted again if it later turns out that it was aborted on
another node. For this reason, a node must only commit once it is certain that all
other nodes in the transaction are also going to commit.
A transaction commit must be irrevocable—you are not allowed to change your
mind and retroactively abort a transaction after it has been committed. The reason
for this rule is that once data has been committed, it becomes visible to other transac‐
tions, and thus other clients may start relying on that data; this principle forms the
basis of read committed isolation, discussed in “Read Committed” on page 234. If a
transaction was allowed to abort after committing, any transactions that read the
committed data would be based on data that was retroactively declared not to have
existed—so they would have to be reverted as well.
(It is possible for the effects of a committed transaction to later be undone by
another, compensating transaction [73, 74]. However, from the database’s point of
view this is a separate transaction, and thus any cross-transaction correctness
requirements are the application’s problem.) 
Introduction to two-phase commit
Two-phase commit is an algorithm for achieving atomic transaction commit across
multiple nodes—i.e., to ensure that either all nodes commit or all nodes abort. It is a
classic algorithm in distributed databases [13, 35, 75]. 2PC is used internally in some
databases and also made available to applications in the form of XA transactions [76,
77] (which are supported by the Java Transaction API, for example) or via WS-
AtomicTransaction for SOAP web services [78, 79].
The basic flow of 2PC is illustrated in Figure 9-9. Instead of a single commit request,
as with a single-node transaction, the commit/abort process in 2PC is split into two
phases (hence the name).
Distributed Transactions and Consensus 
| 
355
