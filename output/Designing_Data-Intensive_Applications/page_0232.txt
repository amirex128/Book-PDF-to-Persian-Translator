Strategies for Rebalancing
There are a few different ways of assigning partitions to nodes [23]. Let’s briefly dis‐
cuss each in turn.
How not to do it: hash mod N
When partitioning by the hash of a key, we said earlier (Figure 6-3) that it’s best to
divide the possible hashes into ranges and assign each range to a partition (e.g., assign
key to partition 0 if 0 ≤ hash(key) < b0, to partition 1 if b0 ≤ hash(key) < b1, etc.).
Perhaps you wondered why we don’t just use mod (the % operator in many program‐
ming languages). For example, hash(key) mod 10 would return a number between 0
and 9 (if we write the hash as a decimal number, the hash mod 10 would be the last
digit). If we have 10 nodes, numbered 0 to 9, that seems like an easy way of assigning
each key to a node.
The problem with the mod N approach is that if the number of nodes N changes,
most of the keys will need to be moved from one node to another. For example, say
hash(key) = 123456. If you initially have 10 nodes, that key starts out on node 6
(because 123456 mod 10 = 6). When you grow to 11 nodes, the key needs to move to
node 3 (123456 mod 11 = 3), and when you grow to 12 nodes, it needs to move to
node 0 (123456 mod 12 = 0). Such frequent moves make rebalancing excessively
expensive.
We need an approach that doesn’t move data around more than necessary.
Fixed number of partitions
Fortunately, there is a fairly simple solution: create many more partitions than there
are nodes, and assign several partitions to each node. For example, a database run‐
ning on a cluster of 10 nodes may be split into 1,000 partitions from the outset so that
approximately 100 partitions are assigned to each node.
Now, if a node is added to the cluster, the new node can steal a few partitions from
every existing node until partitions are fairly distributed once again. This process is
illustrated in Figure 6-6. If a node is removed from the cluster, the same happens in
reverse.
Only entire partitions are moved between nodes. The number of partitions does not
change, nor does the assignment of keys to partitions. The only thing that changes is
the assignment of partitions to nodes. This change of assignment is not immediate—
it takes some time to transfer a large amount of data over the network—so the old
assignment of partitions is used for any reads and writes that happen while the trans‐
fer is in progress.
210 
| 
Chapter 6: Partitioning
