Unbundling Databases
At a most abstract level, databases, Hadoop, and operating systems all perform the
same functions: they store some data, and they allow you to process and query that
data [16]. A database stores data in records of some data model (rows in tables, docu‐
ments, vertices in a graph, etc.) while an operating system’s filesystem stores data in
files—but at their core, both are “information management” systems [17]. As we saw
in Chapter 10, the Hadoop ecosystem is somewhat like a distributed version of Unix.
Of course, there are many practical differences. For example, many filesystems do not
cope very well with a directory containing 10 million small files, whereas a database
containing 10 million small records is completely normal and unremarkable. Never‐
theless, the similarities and differences between operating systems and databases are
worth exploring.
Unix and relational databases have approached the information management prob‐
lem with very different philosophies. Unix viewed its purpose as presenting program‐
mers with a logical but fairly low-level hardware abstraction, whereas relational
databases wanted to give application programmers a high-level abstraction that
would hide the complexities of data structures on disk, concurrency, crash recovery,
and so on. Unix developed pipes and files that are just sequences of bytes, whereas
databases developed SQL and transactions.
Which approach is better? Of course, it depends what you want. Unix is “simpler” in
the sense that it is a fairly thin wrapper around hardware resources; relational data‐
bases are “simpler” in the sense that a short declarative query can draw on a lot of
powerful infrastructure (query optimization, indexes, join methods, concurrency
control, replication, etc.) without the author of the query needing to understand the
implementation details.
The tension between these philosophies has lasted for decades (both Unix and the
relational model emerged in the early 1970s) and still isn’t resolved. For example, I
would interpret the NoSQL movement as wanting to apply a Unix-esque approach of
low-level abstractions to the domain of distributed OLTP data storage.
In this section I will attempt to reconcile the two philosophies, in the hope that we
can combine the best of both worlds.
Composing Data Storage Technologies
Over the course of this book we have discussed various features provided by data‐
bases and how they work, including:
• Secondary indexes, which allow you to efficiently search for records based on the
value of a field (see “Other Indexing Structures” on page 85)
Unbundling Databases 
| 
499
