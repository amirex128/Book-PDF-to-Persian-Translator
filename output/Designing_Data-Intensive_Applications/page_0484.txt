systems without having to modify them. Running old and new systems side by side is
often easier than performing a complicated schema migration in an existing system.
Once the old system is no longer needed, you can simply shut it down and reclaim its
resources [47, 57].
Storing data is normally quite straightforward if you don’t have to worry about how it
is going to be queried and accessed; many of the complexities of schema design,
indexing, and storage engines are the result of wanting to support certain query and
access patterns (see Chapter 3). For this reason, you gain a lot of flexibility by sepa‐
rating the form in which data is written from the form it is read, and by allowing sev‐
eral different read views. This idea is sometimes known as command query
responsibility segregation (CQRS) [42, 58, 59].
The traditional approach to database and schema design is based on the fallacy that
data must be written in the same form as it will be queried. Debates about normaliza‐
tion and denormalization (see “Many-to-One and Many-to-Many Relationships” on
page 33) become largely irrelevant if you can translate data from a write-optimized
event log to read-optimized application state: it is entirely reasonable to denormalize
data in the read-optimized views, as the translation process gives you a mechanism
for keeping it consistent with the event log.
In “Describing Load” on page 11 we discussed Twitter’s home timelines, a cache of
recently written tweets by the people a particular user is following (like a mailbox).
This is another example of read-optimized state: home timelines are highly denor‐
malized, since your tweets are duplicated in all of the timelines of the people follow‐
ing you. However, the fan-out service keeps this duplicated state in sync with new
tweets and new following relationships, which keeps the duplication manageable.
Concurrency control
The biggest downside of event sourcing and change data capture is that the consum‐
ers of the event log are usually asynchronous, so there is a possibility that a user may
make a write to the log, then read from a log-derived view and find that their write
has not yet been reflected in the read view. We discussed this problem and potential
solutions previously in “Reading Your Own Writes” on page 162.
One solution would be to perform the updates of the read view synchronously with
appending the event to the log. This requires a transaction to combine the writes into
an atomic unit, so either you need to keep the event log and the read view in the same
storage system, or you need a distributed transaction across the different systems.
Alternatively, you could use the approach discussed in “Implementing linearizable
storage using total order broadcast” on page 350.
On the other hand, deriving the current state from an event log also simplifies some
aspects of concurrency control. Much of the need for multi-object transactions (see
“Single-Object and Multi-Object Operations” on page 228) stems from a single user
462 
| 
Chapter 11: Stream Processing
