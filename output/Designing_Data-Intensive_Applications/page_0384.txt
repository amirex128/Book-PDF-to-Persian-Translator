The transaction coordinator implements the XA API. The standard does not specify
how it should be implemented, but in practice the coordinator is often simply a
library that is loaded into the same process as the application issuing the transaction
(not a separate service). It keeps track of the participants in a transaction, collects
partipants’ responses after asking them to prepare (via a callback into the driver), and
uses a log on the local disk to keep track of the commit/abort decision for each trans‐
action.
If the application process crashes, or the machine on which the application is running
dies, the coordinator goes with it. Any participants with prepared but uncommitted
transactions are then stuck in doubt. Since the coordinator’s log is on the application
server’s local disk, that server must be restarted, and the coordinator library must
read the log to recover the commit/abort outcome of each transaction. Only then can
the coordinator use the database driver’s XA callbacks to ask participants to commit
or abort, as appropriate. The database server cannot contact the coordinator directly,
since all communication must go via its client library.
Holding locks while in doubt
Why do we care so much about a transaction being stuck in doubt? Can’t the rest of
the system just get on with its work, and ignore the in-doubt transaction that will be
cleaned up eventually?
The problem is with locking. As discussed in “Read Committed” on page 234, data‐
base transactions usually take a row-level exclusive lock on any rows they modify, to
prevent dirty writes. In addition, if you want serializable isolation, a database using
two-phase locking would also have to take a shared lock on any rows read by the
transaction (see “Two-Phase Locking (2PL)” on page 257).
The database cannot release those locks until the transaction commits or aborts
(illustrated as a shaded area in Figure 9-9). Therefore, when using two-phase commit,
a transaction must hold onto the locks throughout the time it is in doubt. If the coor‐
dinator has crashed and takes 20 minutes to start up again, those locks will be held
for 20 minutes. If the coordinator’s log is entirely lost for some reason, those locks
will be held forever—or at least until the situation is manually resolved by an admin‐
istrator.
While those locks are held, no other transaction can modify those rows. Depending
on the database, other transactions may even be blocked from reading those rows.
Thus, other transactions cannot simply continue with their business—if they want to
access that same data, they will be blocked. This can cause large parts of your applica‐
tion to become unavailable until the in-doubt transaction is resolved.
362 
| 
Chapter 9: Consistency and Consensus
