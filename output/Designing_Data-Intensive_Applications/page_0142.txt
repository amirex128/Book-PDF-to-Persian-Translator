otherwise very similar to Thrift’s CompactProtocol. Protocol Buffers fits the same
record in 33 bytes.
Figure 4-4. Example record encoded using Protocol Buffers.
One detail to note: in the schemas shown earlier, each field was marked either
required or optional, but this makes no difference to how the field is encoded
(nothing in the binary data indicates whether a field was required). The difference is
simply that required enables a runtime check that fails if the field is not set, which
can be useful for catching bugs.
Field tags and schema evolution
We said previously that schemas inevitably need to change over time. We call this
schema evolution. How do Thrift and Protocol Buffers handle schema changes while
keeping backward and forward compatibility?
As you can see from the examples, an encoded record is just the concatenation of its
encoded fields. Each field is identified by its tag number (the numbers 1, 2, 3 in the
sample schemas) and annotated with a datatype (e.g., string or integer). If a field
value is not set, it is simply omitted from the encoded record. From this you can see
that field tags are critical to the meaning of the encoded data. You can change the
name of a field in the schema, since the encoded data never refers to field names, but
you cannot change a field’s tag, since that would make all existing encoded data
invalid.
120 
| 
Chapter 4: Encoding and Evolution
