vague about datatypes, so you have to be careful with things like numbers and
binary strings.
• Binary schema–driven formats like Thrift, Protocol Buffers, and Avro allow
compact, efficient encoding with clearly defined forward and backward compati‐
bility semantics. The schemas can be useful for documentation and code genera‐
tion in statically typed languages. However, they have the downside that data
needs to be decoded before it is human-readable.
We also discussed several modes of dataflow, illustrating different scenarios in which
data encodings are important:
• Databases, where the process writing to the database encodes the data and the
process reading from the database decodes it
• RPC and REST APIs, where the client encodes a request, the server decodes the
request and encodes a response, and the client finally decodes the response
• Asynchronous message passing (using message brokers or actors), where nodes
communicate by sending each other messages that are encoded by the sender
and decoded by the recipient
We can conclude that with a bit of care, backward/forward compatibility and rolling
upgrades are quite achievable. May your application’s evolution be rapid and your
deployments be frequent.
References
[1] “Java Object Serialization Specification,” docs.oracle.com, 2010.
[2] “Ruby 2.2.0 API Documentation,” ruby-doc.org, Dec 2014.
[3] “The Python 3.4.3 Standard Library Reference Manual,” docs.python.org, Febru‐
ary 2015.
[4] “EsotericSoftware/kryo,” github.com, October 2014.
[5] “CWE-502: Deserialization of Untrusted Data,” Common Weakness Enumera‐
tion, cwe.mitre.org, July 30, 2014.
[6] Steve Breen: “What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and
Your Application Have in Common? This Vulnerability,” foxglovesecurity.com,
November 6, 2015.
[7] Patrick McKenzie: “What the Rails Security Issue Means for Your Startup,” kalzu‐
meus.com, January 31, 2013.
[8] Eishay Smith: “jvm-serializers wiki,” github.com, November 2014.
140 
| 
Chapter 4: Encoding and Evolution
