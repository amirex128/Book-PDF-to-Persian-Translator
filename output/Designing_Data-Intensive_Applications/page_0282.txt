• If transaction A wants to insert, update, or delete any object, it must first check
whether either the old or the new value matches any existing predicate lock. If
there is a matching predicate lock held by transaction B, then A must wait until B
has committed or aborted before it can continue.
The key idea here is that a predicate lock applies even to objects that do not yet exist
in the database, but which might be added in the future (phantoms). If two-phase
locking includes predicate locks, the database prevents all forms of write skew and
other race conditions, and so its isolation becomes serializable.
Index-range locks
Unfortunately, predicate locks do not perform well: if there are many locks by active
transactions, checking for matching locks becomes time-consuming. For that reason,
most databases with 2PL actually implement index-range locking (also known as next-
key locking), which is a simplified approximation of predicate locking [41, 50].
It’s safe to simplify a predicate by making it match a greater set of objects. For exam‐
ple, if you have a predicate lock for bookings of room 123 between noon and 1 p.m.,
you can approximate it by locking bookings for room 123 at any time, or you can
approximate it by locking all rooms (not just room 123) between noon and 1 p.m.
This is safe, because any write that matches the original predicate will definitely also
match the approximations.
In the room bookings database you would probably have an index on the room_id
column, and/or indexes on start_time and end_time (otherwise the preceding query
would be very slow on a large database):
• Say your index is on room_id, and the database uses this index to find existing
bookings for room 123. Now the database can simply attach a shared lock to this
index entry, indicating that a transaction has searched for bookings of room 123.
• Alternatively, if the database uses a time-based index to find existing bookings, it
can attach a shared lock to a range of values in that index, indicating that a trans‐
action has searched for bookings that overlap with the time period of noon to 1
p.m. on January 1, 2018.
Either way, an approximation of the search condition is attached to one of the
indexes. Now, if another transaction wants to insert, update, or delete a booking for
the same room and/or an overlapping time period, it will have to update the same
part of the index. In the process of doing so, it will encounter the shared lock, and it
will be forced to wait until the lock is released.
This provides effective protection against phantoms and write skew. Index-range
locks are not as precise as predicate locks would be (they may lock a bigger range of
260 
| 
Chapter 7: Transactions
