For these reasons, REST seems to be the predominant style for public APIs. The main
focus of RPC frameworks is on requests between services owned by the same organi‐
zation, typically within the same datacenter.
Data encoding and evolution for RPC
For evolvability, it is important that RPC clients and servers can be changed and
deployed independently. Compared to data flowing through databases (as described
in the last section), we can make a simplifying assumption in the case of dataflow
through services: it is reasonable to assume that all the servers will be updated first,
and all the clients second. Thus, you only need backward compatibility on requests,
and forward compatibility on responses.
The backward and forward compatibility properties of an RPC scheme are inherited
from whatever encoding it uses:
• Thrift, gRPC (Protocol Buffers), and Avro RPC can be evolved according to the
compatibility rules of the respective encoding format.
• In SOAP, requests and responses are specified with XML schemas. These can be
evolved, but there are some subtle pitfalls [47].
• RESTful APIs most commonly use JSON (without a formally specified schema)
for responses, and JSON or URI-encoded/form-encoded request parameters for
requests. Adding optional request parameters and adding new fields to response
objects are usually considered changes that maintain compatibility.
Service compatibility is made harder by the fact that RPC is often used for communi‐
cation across organizational boundaries, so the provider of a service often has no
control over its clients and cannot force them to upgrade. Thus, compatibility needs
to be maintained for a long time, perhaps indefinitely. If a compatibility-breaking
change is required, the service provider often ends up maintaining multiple versions
of the service API side by side.
There is no agreement on how API versioning should work (i.e., how a client can
indicate which version of the API it wants to use [48]). For RESTful APIs, common
approaches are to use a version number in the URL or in the HTTP Accept header.
For services that use API keys to identify a particular client, another option is to store
a client’s requested API version on the server and to allow this version selection to be
updated through a separate administrative interface [49]. 
Message-Passing Dataflow
We have been looking at the different ways encoded data flows from one process to
another. So far, we’ve discussed REST and RPC (where one process sends a request
over the network to another process and expects a response as quickly as possible),
136 
| 
Chapter 4: Encoding and Evolution
