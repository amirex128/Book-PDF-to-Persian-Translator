• The server maintains a version number for every key, increments the version
number every time that key is written, and stores the new version number along
with the value written.
• When a client reads a key, the server returns all values that have not been over‐
written, as well as the latest version number. A client must read a key before
writing.
• When a client writes a key, it must include the version number from the prior
read, and it must merge together all values that it received in the prior read. (The
response from a write request can be like a read, returning all current values,
which allows us to chain several writes like in the shopping cart example.)
• When the server receives a write with a particular version number, it can over‐
write all values with that version number or below (since it knows that they have
been merged into the new value), but it must keep all values with a higher ver‐
sion number (because those values are concurrent with the incoming write).
When a write includes the version number from a prior read, that tells us which pre‐
vious state the write is based on. If you make a write without including a version
number, it is concurrent with all other writes, so it will not overwrite anything—it
will just be returned as one of the values on subsequent reads.
Merging concurrently written values
This algorithm ensures that no data is silently dropped, but it unfortunately requires
that the clients do some extra work: if several operations happen concurrently, clients
have to clean up afterward by merging the concurrently written values. Riak calls
these concurrent values siblings.
Merging sibling values is essentially the same problem as conflict resolution in multi-
leader replication, which we discussed previously (see “Handling Write Conflicts” on
page 171). A simple approach is to just pick one of the values based on a version
number or timestamp (last write wins), but that implies losing data. So, you may
need to do something more intelligent in application code.
With the example of a shopping cart, a reasonable approach to merging siblings is to
just take the union. In Figure 5-14, the two final siblings are [milk, flour, eggs,
bacon] and [eggs, milk, ham]; note that milk and eggs appear in both, even
though they were each only written once. The merged value might be something like
[milk, flour, eggs, bacon, ham], without duplicates.
However, if you want to allow people to also remove things from their carts, and not
just add things, then taking the union of siblings may not yield the right result: if you
merge two sibling carts and an item has been removed in only one of them, then the
removed item will reappear in the union of the siblings [37]. To prevent this prob‐
190 
| 
Chapter 5: Replication
