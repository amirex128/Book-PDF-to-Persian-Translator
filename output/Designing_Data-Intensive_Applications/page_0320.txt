All of these occurrences can preempt the running thread at any point and resume it at
some later time, without the thread even noticing. The problem is similar to making
multi-threaded code on a single machine thread-safe: you can’t assume anything
about timing, because arbitrary context switches and parallelism may occur.
When writing multi-threaded code on a single machine, we have fairly good tools for
making it thread-safe: mutexes, semaphores, atomic counters, lock-free data struc‐
tures, blocking queues, and so on. Unfortunately, these tools don’t directly translate
to distributed systems, because a distributed system has no shared memory—only
messages sent over an unreliable network.
A node in a distributed system must assume that its execution can be paused for a
significant length of time at any point, even in the middle of a function. During the
pause, the rest of the world keeps moving and may even declare the paused node
dead because it’s not responding. Eventually, the paused node may continue running,
without even noticing that it was asleep until it checks its clock sometime later. 
Response time guarantees
In many programming languages and operating systems, threads and processes may
pause for an unbounded amount of time, as discussed. Those reasons for pausing can
be eliminated if you try hard enough.
Some software runs in environments where a failure to respond within a specified
time can cause serious damage: computers that control aircraft, rockets, robots, cars,
and other physical objects must respond quickly and predictably to their sensor
inputs. In these systems, there is a specified deadline by which the software must
respond; if it doesn’t meet the deadline, that may cause a failure of the entire system.
These are so-called hard real-time systems.
Is real-time really real?
In embedded systems, real-time means that a system is carefully
designed and tested to meet specified timing guarantees in all cir‐
cumstances. This meaning is in contrast to the more vague use of
the term real-time on the web, where it describes servers pushing
data to clients and stream processing without hard response time
constraints (see Chapter 11).
For example, if your car’s onboard sensors detect that you are currently experiencing
a crash, you wouldn’t want the release of the airbag to be delayed due to an inoppor‐
tune GC pause in the airbag release system.
Providing real-time guarantees in a system requires support from all levels of the
software stack: a real-time operating system (RTOS) that allows processes to be sched‐
uled with a guaranteed allocation of CPU time in specified intervals is needed; library
298 
| 
Chapter 8: The Trouble with Distributed Systems
