access, disks have limited resources, so it can easily happen that a request needs to
wait while the disk finishes an expensive compaction operation. The impact on
throughput and average response time is usually small, but at higher percentiles (see
“Describing Performance” on page 13) the response time of queries to log-structured
storage engines can sometimes be quite high, and B-trees can be more predictable
[28].
Another issue with compaction arises at high write throughput: the disk’s finite write
bandwidth needs to be shared between the initial write (logging and flushing a
memtable to disk) and the compaction threads running in the background. When
writing to an empty database, the full disk bandwidth can be used for the initial write,
but the bigger the database gets, the more disk bandwidth is required for compaction.
If write throughput is high and compaction is not configured carefully, it can happen
that compaction cannot keep up with the rate of incoming writes. In this case, the
number of unmerged segments on disk keeps growing until you run out of disk
space, and reads also slow down because they need to check more segment files. Typ‐
ically, SSTable-based storage engines do not throttle the rate of incoming writes, even
if compaction cannot keep up, so you need explicit monitoring to detect this situa‐
tion [29, 30].
An advantage of B-trees is that each key exists in exactly one place in the index,
whereas a log-structured storage engine may have multiple copies of the same key in
different segments. This aspect makes B-trees attractive in databases that want to
offer strong transactional semantics: in many relational databases, transaction isola‐
tion is implemented using locks on ranges of keys, and in a B-tree index, those locks
can be directly attached to the tree [5]. In Chapter 7 we will discuss this point in more
detail.
B-trees are very ingrained in the architecture of databases and provide consistently
good performance for many workloads, so it’s unlikely that they will go away anytime
soon. In new datastores, log-structured indexes are becoming increasingly popular.
There is no quick and easy rule for determining which type of storage engine is better
for your use case, so it is worth testing empirically. 
Other Indexing Structures
So far we have only discussed key-value indexes, which are like a primary key index in
the relational model. A primary key uniquely identifies one row in a relational table,
or one document in a document database, or one vertex in a graph database. Other
records in the database can refer to that row/document/vertex by its primary key (or
ID), and the index is used to resolve such references.
It is also very common to have secondary indexes. In relational databases, you can
create several secondary indexes on the same table using the CREATE INDEX com‐
Data Structures That Power Your Database 
| 
85
