Updating a derived data system based on an event log can often be made determinis‐
tic and idempotent (see “Idempotence” on page 478), making it quite easy to recover
from faults.
Derived data versus distributed transactions
The classic approach for keeping different data systems consistent with each other
involves distributed transactions, as discussed in “Atomic Commit and Two-Phase
Commit (2PC)” on page 354. How does the approach of using derived data systems
fare in comparison to distributed transactions?
At an abstract level, they achieve a similar goal by different means. Distributed trans‐
actions decide on an ordering of writes by using locks for mutual exclusion (see
“Two-Phase Locking (2PL)” on page 257), while CDC and event sourcing use a log
for ordering. Distributed transactions use atomic commit to ensure that changes take
effect exactly once, while log-based systems are often based on deterministic retry
and idempotence.
The biggest difference is that transaction systems usually provide linearizability (see
“Linearizability” on page 324), which implies useful guarantees such as reading your
own writes (see “Reading Your Own Writes” on page 162). On the other hand,
derived data systems are often updated asynchronously, and so they do not by default
offer the same timing guarantees.
Within limited environments that are willing to pay the cost of distributed transac‐
tions, they have been used successfully. However, I think that XA has poor fault toler‐
ance and performance characteristics (see “Distributed Transactions in Practice” on
page 360), which severely limit its usefulness. I believe that it might be possible to
create a better protocol for distributed transactions, but getting such a protocol
widely adopted and integrated with existing tools would be challenging, and unlikely
to happen soon.
In the absence of widespread support for a good distributed transaction protocol, I
believe that log-based derived data is the most promising approach for integrating
different data systems. However, guarantees such as reading your own writes are use‐
ful, and I don’t think that it is productive to tell everyone “eventual consistency is
inevitable—suck it up and learn to deal with it” (at least not without good guidance
on how to deal with it).
In “Aiming for Correctness” on page 515 we will discuss some approaches for imple‐
menting stronger guarantees on top of asynchronously derived systems, and work
toward a middle ground between distributed transactions and asynchronous log-
based systems.
492 
| 
Chapter 12: The Future of Data Systems
