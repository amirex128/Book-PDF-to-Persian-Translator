Figure 6-3. Partitioning by hash of key.
This technique is good at distributing keys fairly among the partitions. The partition
boundaries can be evenly spaced, or they can be chosen pseudorandomly (in which
case the technique is sometimes known as consistent hashing).
Consistent Hashing
Consistent hashing, as defined by Karger et al. [7], is a way of evenly distributing load
across an internet-wide system of caches such as a content delivery network (CDN).
It uses randomly chosen partition boundaries to avoid the need for central control or
distributed consensus. Note that consistent here has nothing to do with replica consis‐
tency (see Chapter 5) or ACID consistency (see Chapter 7), but rather describes a
particular approach to rebalancing.
As we shall see in “Rebalancing Partitions” on page 209, this particular approach
actually doesn’t work very well for databases [8], so it is rarely used in practice (the
documentation of some databases still refers to consistent hashing, but it is often
inaccurate). Because this is so confusing, it’s best to avoid the term consistent hashing
and just call it hash partitioning instead.
Unfortunately however, by using the hash of the key for partitioning we lose a nice
property of key-range partitioning: the ability to do efficient range queries. Keys that
were once adjacent are now scattered across all the partitions, so their sort order is
lost. In MongoDB, if you have enabled hash-based sharding mode, any range query
has to be sent to all partitions [4]. Range queries on the primary key are not sup‐
ported by Riak [9], Couchbase [10], or Voldemort. 
Cassandra achieves a compromise between the two partitioning strategies [11, 12,
13]. A table in Cassandra can be declared with a compound primary key consisting of
several columns. Only the first part of that key is hashed to determine the partition,
but the other columns are used as a concatenated index for sorting the data in Cas‐
sandra’s SSTables. A query therefore cannot search for a range of values within the
204 
| 
Chapter 6: Partitioning
