Figure 8-3. The write by client B is causally later than the write by client A, but B’s
write has an earlier timestamp.
In Figure 8-3, when a write is replicated to other nodes, it is tagged with a timestamp
according to the time-of-day clock on the node where the write originated. The clock
synchronization is very good in this example: the skew between node 1 and node 3 is
less than 3 ms, which is probably better than you can expect in practice.
Nevertheless, the timestamps in Figure 8-3 fail to order the events correctly: the write
x = 1 has a timestamp of 42.004 seconds, but the write x = 2 has a timestamp of
42.003 seconds, even though x = 2 occurred unambiguously later. When node 2
receives these two events, it will incorrectly conclude that x = 1 is the more recent
value and drop the write x = 2. In effect, client B’s increment operation will be lost.
This conflict resolution strategy is called last write wins (LWW), and it is widely used
in both multi-leader replication and leaderless databases such as Cassandra [53] and
Riak [54] (see “Last write wins (discarding concurrent writes)” on page 186). Some
implementations generate timestamps on the client rather than the server, but this
doesn’t change the fundamental problems with LWW:
• Database writes can mysteriously disappear: a node with a lagging clock is unable
to overwrite values previously written by a node with a fast clock until the clock
skew between the nodes has elapsed [54, 55]. This scenario can cause arbitrary
amounts of data to be silently dropped without any error being reported to the
application.
• LWW cannot distinguish between writes that occurred sequentially in quick suc‐
cession (in Figure 8-3, client B’s increment definitely occurs after client A’s
write) and writes that were truly concurrent (neither writer was aware of the
other). Additional causality tracking mechanisms, such as version vectors, are
292 
| 
Chapter 8: The Trouble with Distributed Systems
