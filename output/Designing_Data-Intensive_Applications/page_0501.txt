“Stream-table join (stream enrichment)” on page 473. An alternative is to keep state
local to the stream processor, and replicate it periodically. Then, when the stream
processor is recovering from a failure, the new task can read the replicated state and
resume processing without data loss.
For example, Flink periodically captures snapshots of operator state and writes them
to durable storage such as HDFS [92, 93]; Samza and Kafka Streams replicate state
changes by sending them to a dedicated Kafka topic with log compaction, similar to
change data capture [84, 100]. VoltDB replicates state by redundantly processing
each input message on several nodes (see “Actual Serial Execution” on page 252).
In some cases, it may not even be necessary to replicate the state, because it can be
rebuilt from the input streams. For example, if the state consists of aggregations over
a fairly short window, it may be fast enough to simply replay the input events corre‐
sponding to that window. If the state is a local replica of a database, maintained by
change data capture, the database can also be rebuilt from the log-compacted change
stream (see “Log compaction” on page 456).
However, all of these trade-offs depend on the performance characteristics of the
underlying infrastructure: in some systems, network delay may be lower than disk
access latency, and network bandwidth may be comparable to disk bandwidth. There
is no universally ideal trade-off for all situations, and the merits of local versus
remote state may also shift as storage and networking technologies evolve. 
Summary
In this chapter we have discussed event streams, what purposes they serve, and how
to process them. In some ways, stream processing is very much like the batch pro‐
cessing we discussed in Chapter 10, but done continuously on unbounded (never-
ending) streams rather than on a fixed-size input. From this perspective, message
brokers and event logs serve as the streaming equivalent of a filesystem.
We spent some time comparing two types of message brokers:
AMQP/JMS-style message broker
The broker assigns individual messages to consumers, and consumers acknowl‐
edge individual messages when they have been successfully processed. Messages
are deleted from the broker once they have been acknowledged. This approach is
appropriate as an asynchronous form of RPC (see also “Message-Passing Data‐
flow” on page 136), for example in a task queue, where the exact order of mes‐
sage processing is not important and where there is no need to go back and read
old messages again after they have been processed.
Summary 
| 
479
