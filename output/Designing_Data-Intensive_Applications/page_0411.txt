CHAPTER 10
Batch Processing
A system cannot be successful if it is too strongly influenced by a single person. Once the
initial design is complete and fairly robust, the real test begins as people with many different
viewpoints undertake their own experiments.
—Donald Knuth
In the first two parts of this book we talked a lot about requests and queries, and the
corresponding responses or results. This style of data processing is assumed in many
modern data systems: you ask for something, or you send an instruction, and some
time later the system (hopefully) gives you an answer. Databases, caches, search
indexes, web servers, and many other systems work this way.
In such online systems, whether it’s a web browser requesting a page or a service call‐
ing a remote API, we generally assume that the request is triggered by a human user,
and that the user is waiting for the response. They shouldn’t have to wait too long, so
we pay a lot of attention to the response time of these systems (see “Describing Perfor‐
mance” on page 13).
The web, and increasing numbers of HTTP/REST-based APIs, has made the request/
response style of interaction so common that it’s easy to take it for granted. But we
should remember that it’s not the only way of building systems, and that other
approaches have their merits too. Let’s distinguish three different types of systems:
Services (online systems)
A service waits for a request or instruction from a client to arrive. When one is
received, the service tries to handle it as quickly as possible and sends a response
back. Response time is usually the primary measure of performance of a service,
and availability is often very important (if the client can’t reach the service, the
user will probably get an error message).
389
