bly a good idea to use a document model. The relational technique of shredding—
splitting a document-like structure into multiple tables (like positions, education,
and contact_info in Figure 2-1)—can lead to cumbersome schemas and unnecessa‐
rily complicated application code.
The document model has limitations: for example, you cannot refer directly to a nes‐
ted item within a document, but instead you need to say something like “the second
item in the list of positions for user 251” (much like an access path in the hierarchical
model). However, as long as documents are not too deeply nested, that is not usually
a problem.
The poor support for joins in document databases may or may not be a problem,
depending on the application. For example, many-to-many relationships may never
be needed in an analytics application that uses a document database to record which
events occurred at which time [19].
However, if your application does use many-to-many relationships, the document
model becomes less appealing. It’s possible to reduce the need for joins by denormal‐
izing, but then the application code needs to do additional work to keep the denor‐
malized data consistent. Joins can be emulated in application code by making
multiple requests to the database, but that also moves complexity into the application
and is usually slower than a join performed by specialized code inside the database.
In such cases, using a document model can lead to significantly more complex appli‐
cation code and worse performance [15].
It’s not possible to say in general which data model leads to simpler application code;
it depends on the kinds of relationships that exist between data items. For highly
interconnected data, the document model is awkward, the relational model is accept‐
able, and graph models (see “Graph-Like Data Models” on page 49) are the most
natural.
Schema flexibility in the document model
Most document databases, and the JSON support in relational databases, do not
enforce any schema on the data in documents. XML support in relational databases
usually comes with optional schema validation. No schema means that arbitrary keys
and values can be added to a document, and when reading, clients have no guaran‐
tees as to what fields the documents may contain.
Document databases are sometimes called schemaless, but that’s misleading, as the
code that reads the data usually assumes some kind of structure—i.e., there is an
implicit schema, but it is not enforced by the database [20]. A more accurate term is
schema-on-read (the structure of the data is implicit, and only interpreted when the
data is read), in contrast with schema-on-write (the traditional approach of relational
Relational Model Versus Document Model 
| 
39
