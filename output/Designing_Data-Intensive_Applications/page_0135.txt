i. With the exception of some special cases, such as certain memory-mapped files or when operating directly
on compressed data (as described in “Column Compression” on page 97).
ii. Note that encoding has nothing to do with encryption. We don’t discuss encryption in this book.
sequence-of-bytes representation looks quite different from the data structures
that are normally used in memory.i
Thus, we need some kind of translation between the two representations. The trans‐
lation from the in-memory representation to a byte sequence is called encoding (also
known as serialization or marshalling), and the reverse is called decoding (parsing,
deserialization, unmarshalling).ii
Terminology clash
Serialization is unfortunately also used in the context of transac‐
tions (see Chapter 7), with a completely different meaning. To
avoid overloading the word we’ll stick with encoding in this book,
even though serialization is perhaps a more common term.
As this is such a common problem, there are a myriad different libraries and encod‐
ing formats to choose from. Let’s do a brief overview.
Language-Specific Formats
Many programming languages come with built-in support for encoding in-memory
objects into byte sequences. For example, Java has java.io.Serializable [1], Ruby
has Marshal [2], Python has pickle [3], and so on. Many third-party libraries also
exist, such as Kryo for Java [4].
These encoding libraries are very convenient, because they allow in-memory objects
to be saved and restored with minimal additional code. However, they also have a
number of deep problems:
• The encoding is often tied to a particular programming language, and reading
the data in another language is very difficult. If you store or transmit data in such
an encoding, you are committing yourself to your current programming lan‐
guage for potentially a very long time, and precluding integrating your systems
with those of other organizations (which may use different languages).
• In order to restore data in the same object types, the decoding process needs to
be able to instantiate arbitrary classes. This is frequently a source of security
problems [5]: if an attacker can get your application to decode an arbitrary byte
sequence, they can instantiate arbitrary classes, which in turn often allows them
to do terrible things such as remotely executing arbitrary code [6, 7].
Formats for Encoding Data 
| 
113
