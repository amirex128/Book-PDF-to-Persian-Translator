can give up their shifts (e.g., if they are sick themselves), provided that at least one
colleague remains on call in that shift [40, 41].
Now imagine that Alice and Bob are the two on-call doctors for a particular shift.
Both are feeling unwell, so they both decide to request leave. Unfortunately, they
happen to click the button to go off call at approximately the same time. What hap‐
pens next is illustrated in Figure 7-8.
Figure 7-8. Example of write skew causing an application bug.
In each transaction, your application first checks that two or more doctors are cur‐
rently on call; if yes, it assumes it’s safe for one doctor to go off call. Since the data‐
base is using snapshot isolation, both checks return 2, so both transactions proceed to
the next stage. Alice updates her own record to take herself off call, and Bob updates
his own record likewise. Both transactions commit, and now no doctor is on call.
Your requirement of having at least one doctor on call has been violated.
Characterizing write skew
This anomaly is called write skew [28]. It is neither a dirty write nor a lost update,
because the two transactions are updating two different objects (Alice’s and Bob’s on-
call records, respectively). It is less obvious that a conflict occurred here, but it’s defi‐
nitely a race condition: if the two transactions had run one after another, the second
Weak Isolation Levels 
| 
247
