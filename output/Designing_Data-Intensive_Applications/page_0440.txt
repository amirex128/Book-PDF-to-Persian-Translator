ence a machine failure. Is it really worth incurring significant overheads for the sake
of fault tolerance?
To understand the reasons for MapReduce’s sparing use of memory and task-level
recovery, it is helpful to look at the environment for which MapReduce was originally
designed. Google has mixed-use datacenters, in which online production services and
offline batch jobs run on the same machines. Every task has a resource allocation
(CPU cores, RAM, disk space, etc.) that is enforced using containers. Every task also
has a priority, and if a higher-priority task needs more resources, lower-priority tasks
on the same machine can be terminated (preempted) in order to free up resources.
Priority also determines pricing of the computing resources: teams must pay for the
resources they use, and higher-priority processes cost more [59].
This architecture allows non-production (low-priority) computing resources to be
overcommitted, because the system knows that it can reclaim the resources if neces‐
sary. Overcommitting resources in turn allows better utilization of machines and
greater efficiency compared to systems that segregate production and non-
production tasks. However, as MapReduce jobs run at low priority, they run the risk
of being preempted at any time because a higher-priority process requires their
resources. Batch jobs effectively “pick up the scraps under the table,” using any com‐
puting resources that remain after the high-priority processes have taken what they
need.
At Google, a MapReduce task that runs for an hour has an approximately 5% risk of
being terminated to make space for a higher-priority process. This rate is more than
an order of magnitude higher than the rate of failures due to hardware issues,
machine reboot, or other reasons [59]. At this rate of preemptions, if a job has 100
tasks that each run for 10 minutes, there is a risk greater than 50% that at least one
task will be terminated before it is finished.
And this is why MapReduce is designed to tolerate frequent unexpected task termina‐
tion: it’s not because the hardware is particularly unreliable, it’s because the freedom
to arbitrarily terminate processes enables better resource utilization in a computing
cluster.
Among open source cluster schedulers, preemption is less widely used. YARN’s
CapacityScheduler supports preemption for balancing the resource allocation of dif‐
ferent queues [58], but general priority preemption is not supported in YARN,
Mesos, or Kubernetes at the time of writing [60]. In an environment where tasks are
not so often terminated, the design decisions of MapReduce make less sense. In the
next section, we will look at some alternatives to MapReduce that make different
design decisions. 
418 
| 
Chapter 10: Batch Processing
