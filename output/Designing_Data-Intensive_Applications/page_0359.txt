vi. As discussed in “Network Faults in Practice” on page 279, this book uses partitioning to refer to deliber‐
ately breaking down a large dataset into smaller ones (sharding; see Chapter 6). By contrast, a network parti‐
tion is a particular type of network fault, which we normally don’t consider separately from other kinds of
faults. However, since it’s the P in CAP, we can’t avoid the confusion in this case.
Thus, applications that don’t require linearizability can be more tolerant of network
problems. This insight is popularly known as the CAP theorem [29, 30, 31, 32],
named by Eric Brewer in 2000, although the trade-off has been known to designers of
distributed databases since the 1970s [33, 34, 35, 36].
CAP was originally proposed as a rule of thumb, without precise definitions, with the
goal of starting a discussion about trade-offs in databases. At the time, many dis‐
tributed databases focused on providing linearizable semantics on a cluster of
machines with shared storage [18], and CAP encouraged database engineers to
explore a wider design space of distributed shared-nothing systems, which were more
suitable for implementing large-scale web services [37]. CAP deserves credit for this
culture shift—witness the explosion of new database technologies since the
mid-2000s (known as NoSQL).
The Unhelpful CAP Theorem
CAP is sometimes presented as Consistency, Availability, Partition tolerance: pick 2
out of 3. Unfortunately, putting it this way is misleading [32] because network parti‐
tions are a kind of fault, so they aren’t something about which you have a choice: they
will happen whether you like it or not [38].
At times when the network is working correctly, a system can provide both consis‐
tency (linearizability) and total availability. When a network fault occurs, you have to
choose between either linearizability or total availability. Thus, a better way of phras‐
ing CAP would be either Consistent or Available when Partitioned [39]. A more relia‐
ble network needs to make this choice less often, but at some point the choice is
inevitable.
In discussions of CAP there are several contradictory definitions of the term availa‐
bility, and the formalization as a theorem [30] does not match its usual meaning [40].
Many so-called “highly available” (fault-tolerant) systems actually do not meet CAP’s
idiosyncratic definition of availability. All in all, there is a lot of misunderstanding
and confusion around CAP, and it does not help us understand systems better, so
CAP is best avoided.
The CAP theorem as formally defined [30] is of very narrow scope: it only considers
one consistency model (namely linearizability) and one kind of fault (network parti‐
tions,vi or nodes that are alive but disconnected from each other). It doesn’t say any‐
Linearizability 
| 
337
