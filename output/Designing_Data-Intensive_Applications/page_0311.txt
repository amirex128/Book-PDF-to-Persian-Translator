You can check the value of the monotonic clock at one point in time, do something,
and then check the clock again at a later time. The difference between the two values
tells you how much time elapsed between the two checks. However, the absolute
value of the clock is meaningless: it might be the number of nanoseconds since the
computer was started, or something similarly arbitrary. In particular, it makes no
sense to compare monotonic clock values from two different computers, because they
don’t mean the same thing.
On a server with multiple CPU sockets, there may be a separate timer per CPU,
which is not necessarily synchronized with other CPUs. Operating systems compen‐
sate for any discrepancy and try to present a monotonic view of the clock to applica‐
tion threads, even as they are scheduled across different CPUs. However, it is wise to
take this guarantee of monotonicity with a pinch of salt [40].
NTP may adjust the frequency at which the monotonic clock moves forward (this is
known as slewing the clock) if it detects that the computer’s local quartz is moving
faster or slower than the NTP server. By default, NTP allows the clock rate to be spee‐
ded up or slowed down by up to 0.05%, but NTP cannot cause the monotonic clock
to jump forward or backward. The resolution of monotonic clocks is usually quite
good: on most systems they can measure time intervals in microseconds or less.
In a distributed system, using a monotonic clock for measuring elapsed time (e.g.,
timeouts) is usually fine, because it doesn’t assume any synchronization between dif‐
ferent nodes’ clocks and is not sensitive to slight inaccuracies of measurement.
Clock Synchronization and Accuracy
Monotonic clocks don’t need synchronization, but time-of-day clocks need to be set
according to an NTP server or other external time source in order to be useful.
Unfortunately, our methods for getting a clock to tell the correct time aren’t nearly as
reliable or accurate as you might hope—hardware clocks and NTP can be fickle
beasts. To give just a few examples:
• The quartz clock in a computer is not very accurate: it drifts (runs faster or
slower than it should). Clock drift varies depending on the temperature of the
machine. Google assumes a clock drift of 200 ppm (parts per million) for its
servers [41], which is equivalent to 6 ms drift for a clock that is resynchronized
with a server every 30 seconds, or 17 seconds drift for a clock that is resynchron‐
ized once a day. This drift limits the best possible accuracy you can achieve, even
if everything is working correctly.
• If a computer’s clock differs too much from an NTP server, it may refuse to syn‐
chronize, or the local clock will be forcibly reset [37]. Any applications observing
the time before and after this reset may see time go backward or suddenly jump
forward.
Unreliable Clocks 
| 
289
