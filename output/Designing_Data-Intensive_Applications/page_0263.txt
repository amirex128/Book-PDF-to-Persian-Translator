the database can present a consistent snapshot of the database to the application. This
works as follows:
1. At the start of each transaction, the database makes a list of all the other transac‐
tions that are in progress (not yet committed or aborted) at that time. Any writes
that those transactions have made are ignored, even if the transactions subse‐
quently commit.
2. Any writes made by aborted transactions are ignored.
3. Any writes made by transactions with a later transaction ID (i.e., which started
after the current transaction started) are ignored, regardless of whether those
transactions have committed.
4. All other writes are visible to the application’s queries.
These rules apply to both creation and deletion of objects. In Figure 7-7, when trans‐
action 12 reads from account 2, it sees a balance of $500 because the deletion of the
$500 balance was made by transaction 13 (according to rule 3, transaction 12 cannot
see a deletion made by transaction 13), and the creation of the $400 balance is not yet
visible (by the same rule).
Put another way, an object is visible if both of the following conditions are true:
• At the time when the reader’s transaction started, the transaction that created the
object had already committed.
• The object is not marked for deletion, or if it is, the transaction that requested
deletion had not yet committed at the time when the reader’s transaction started.
A long-running transaction may continue using a snapshot for a long time, continu‐
ing to read values that (from other transactions’ point of view) have long been over‐
written or deleted. By never updating values in place but instead creating a new
version every time a value is changed, the database can provide a consistent snapshot
while incurring only a small overhead.
Indexes and snapshot isolation
How do indexes work in a multi-version database? One option is to have the index
simply point to all versions of an object and require an index query to filter out any
object versions that are not visible to the current transaction. When garbage collec‐
tion removes old object versions that are no longer visible to any transaction, the cor‐
responding index entries can also be removed.
In practice, many implementation details determine the performance of multi-
version concurrency control. For example, PostgreSQL has optimizations for avoid‐
ing index updates if different versions of the same object can fit on the same page
[31].
Weak Isolation Levels 
| 
241
