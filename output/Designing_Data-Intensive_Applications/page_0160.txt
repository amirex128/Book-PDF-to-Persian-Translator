A topic provides only one-way dataflow. However, a consumer may itself publish
messages to another topic (so you can chain them together, as we shall see in Chap‐
ter 11), or to a reply queue that is consumed by the sender of the original message
(allowing a request/response dataflow, similar to RPC).
Message brokers typically don’t enforce any particular data model—a message is just
a sequence of bytes with some metadata, so you can use any encoding format. If the
encoding is backward and forward compatible, you have the greatest flexibility to
change publishers and consumers independently and deploy them in any order.
If a consumer republishes messages to another topic, you may need to be careful to
preserve unknown fields, to prevent the issue described previously in the context of
databases (Figure 4-7).
Distributed actor frameworks
The actor model is a programming model for concurrency in a single process. Rather
than dealing directly with threads (and the associated problems of race conditions,
locking, and deadlock), logic is encapsulated in actors. Each actor typically represents
one client or entity, it may have some local state (which is not shared with any other
actor), and it communicates with other actors by sending and receiving asynchro‐
nous messages. Message delivery is not guaranteed: in certain error scenarios, mes‐
sages will be lost. Since each actor processes only one message at a time, it doesn’t
need to worry about threads, and each actor can be scheduled independently by the
framework.
In distributed actor frameworks, this programming model is used to scale an applica‐
tion across multiple nodes. The same message-passing mechanism is used, no matter
whether the sender and recipient are on the same node or different nodes. If they are
on different nodes, the message is transparently encoded into a byte sequence, sent
over the network, and decoded on the other side.
Location transparency works better in the actor model than in RPC, because the actor
model already assumes that messages may be lost, even within a single process.
Although latency over the network is likely higher than within the same process,
there is less of a fundamental mismatch between local and remote communication
when using the actor model.
A distributed actor framework essentially integrates a message broker and the actor
programming model into a single framework. However, if you want to perform roll‐
ing upgrades of your actor-based application, you still have to worry about forward
and backward compatibility, as messages may be sent from a node running the new
version to a node running the old version, and vice versa.
Three popular distributed actor frameworks handle message encoding as follows:
138 
| 
Chapter 4: Encoding and Evolution
