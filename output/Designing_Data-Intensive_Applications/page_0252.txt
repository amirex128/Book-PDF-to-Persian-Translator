iv. Strictly speaking, the term atomic increment uses the word atomic in the sense of multi-threaded pro‐
gramming. In the context of ACID, it should actually be called isolated or serializable increment. But that’s
getting nitpicky.
On the other hand, many nonrelational databases don’t have such a way of grouping
operations together. Even if there is a multi-object API (for example, a key-value
store may have a multi-put operation that updates several keys in one operation), that
doesn’t necessarily mean it has transaction semantics: the command may succeed for
some keys and fail for others, leaving the database in a partially updated state.
Single-object writes
Atomicity and isolation also apply when a single object is being changed. For exam‐
ple, imagine you are writing a 20 KB JSON document to a database:
• If the network connection is interrupted after the first 10 KB have been sent, does
the database store that unparseable 10 KB fragment of JSON?
• If the power fails while the database is in the middle of overwriting the previous
value on disk, do you end up with the old and new values spliced together?
• If another client reads that document while the write is in progress, will it see a
partially updated value?
Those issues would be incredibly confusing, so storage engines almost universally
aim to provide atomicity and isolation on the level of a single object (such as a key-
value pair) on one node. Atomicity can be implemented using a log for crash recov‐
ery (see “Making B-trees reliable” on page 82), and isolation can be implemented
using a lock on each object (allowing only one thread to access an object at any one
time).
Some databases also provide more complex atomic operations,iv such as an increment
operation, which removes the need for a read-modify-write cycle like that in
Figure 7-1. Similarly popular is a compare-and-set operation, which allows a write to
happen only if the value has not been concurrently changed by someone else (see
“Compare-and-set” on page 245).
These single-object operations are useful, as they can prevent lost updates when sev‐
eral clients try to write to the same object concurrently (see “Preventing Lost
Updates” on page 242). However, they are not transactions in the usual sense of the
word. Compare-and-set and other single-object operations have been dubbed “light‐
weight transactions” or even “ACID” for marketing purposes [20, 21, 22], but that
terminology is misleading. A transaction is usually understood as a mechanism for
grouping multiple operations on multiple objects into one unit of execution.
230 
| 
Chapter 7: Transactions
