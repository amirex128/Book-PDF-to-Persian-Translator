Implementations of CEP include Esper [69], IBM InfoSphere Streams [70], Apama,
TIBCO StreamBase, and SQLstream. Distributed stream processors like Samza are
also gaining SQL support for declarative queries on streams [71].
Stream analytics
Another area in which stream processing is used is for analytics on streams. The
boundary between CEP and stream analytics is blurry, but as a general rule, analytics
tends to be less interested in finding specific event sequences and is more oriented
toward aggregations and statistical metrics over a large number of events—for exam‐
ple:
• Measuring the rate of some type of event (how often it occurs per time interval)
• Calculating the rolling average of a value over some time period
• Comparing current statistics to previous time intervals (e.g., to detect trends or
to alert on metrics that are unusually high or low compared to the same time last
week)
Such statistics are usually computed over fixed time intervals—for example, you
might want to know the average number of queries per second to a service over the
last 5 minutes, and their 99th percentile response time during that period. Averaging
over a few minutes smoothes out irrelevant fluctuations from one second to the next,
while still giving you a timely picture of any changes in traffic pattern. The time
interval over which you aggregate is known as a window, and we will look into win‐
dowing in more detail in “Reasoning About Time” on page 468.
Stream analytics systems sometimes use probabilistic algorithms, such as Bloom fil‐
ters (which we encountered in “Performance optimizations” on page 79) for set
membership, HyperLogLog [72] for cardinality estimation, and various percentile
estimation algorithms (see “Percentiles in Practice” on page 16). Probabilistic algo‐
rithms produce approximate results, but have the advantage of requiring significantly
less memory in the stream processor than exact algorithms. This use of approxima‐
tion algorithms sometimes leads people to believe that stream processing systems are
always lossy and inexact, but that is wrong: there is nothing inherently approximate
about stream processing, and probabilistic algorithms are merely an optimization
[73].
Many open source distributed stream processing frameworks are designed with ana‐
lytics in mind: for example, Apache Storm, Spark Streaming, Flink, Concord, Samza,
and Kafka Streams [74]. Hosted services include Google Cloud Dataflow and Azure
Stream Analytics.
466 
| 
Chapter 11: Stream Processing
