data is later going to be used. If a new application feature is introduced—for example,
“the place is offered to the next person on the waiting list”—the event sourcing
approach allows that new side effect to easily be chained off the existing event.
Event sourcing is similar to the chronicle data model [45], and there are also similari‐
ties between an event log and the fact table that you find in a star schema (see “Stars
and Snowflakes: Schemas for Analytics” on page 93).
Specialized databases such as Event Store [46] have been developed to support appli‐
cations using event sourcing, but in general the approach is independent of any par‐
ticular tool. A conventional database or a log-based message broker can also be used
to build applications in this style.
Deriving current state from the event log
An event log by itself is not very useful, because users generally expect to see the cur‐
rent state of a system, not the history of modifications. For example, on a shopping
website, users expect to be able to see the current contents of their cart, not an
append-only list of all the changes they have ever made to their cart.
Thus, applications that use event sourcing need to take the log of events (representing
the data written to the system) and transform it into application state that is suitable
for showing to a user (the way in which data is read from the system [47]). This
transformation can use arbitrary logic, but it should be deterministic so that you can
run it again and derive the same application state from the event log.
Like with change data capture, replaying the event log allows you to reconstruct the
current state of the system. However, log compaction needs to be handled differently:
• A CDC event for the update of a record typically contains the entire new version
of the record, so the current value for a primary key is entirely determined by the
most recent event for that primary key, and log compaction can discard previous
events for the same key.
• On the other hand, with event sourcing, events are modeled at a higher level: an
event typically expresses the intent of a user action, not the mechanics of the state
update that occurred as a result of the action. In this case, later events typically
do not override prior events, and so you need the full history of events to recon‐
struct the final state. Log compaction is not possible in the same way.
Applications that use event sourcing typically have some mechanism for storing
snapshots of the current state that is derived from the log of events, so they don’t
need to repeatedly reprocess the full log. However, this is only a performance optimi‐
zation to speed up reads and recovery from crashes; the intention is that the system is
able to store all raw events forever and reprocess the full event log whenever required.
We discuss this assumption in “Limitations of immutability” on page 463. 
458 
| 
Chapter 11: Stream Processing
