Another approach is used in CouchDB, Datomic, and LMDB. Although they also use
B-trees (see “B-Trees” on page 79), they use an append-only/copy-on-write variant
that does not overwrite pages of the tree when they are updated, but instead creates a
new copy of each modified page. Parent pages, up to the root of the tree, are copied
and updated to point to the new versions of their child pages. Any pages that are not
affected by a write do not need to be copied, and remain immutable [33, 34, 35].
With append-only B-trees, every write transaction (or batch of transactions) creates a
new B-tree root, and a particular root is a consistent snapshot of the database at the
point in time when it was created. There is no need to filter out objects based on
transaction IDs because subsequent writes cannot modify an existing B-tree; they can
only create new tree roots. However, this approach also requires a background pro‐
cess for compaction and garbage collection.
Repeatable read and naming confusion
Snapshot isolation is a useful isolation level, especially for read-only transactions.
However, many databases that implement it call it by different names. In Oracle it is
called serializable, and in PostgreSQL and MySQL it is called repeatable read [23].
The reason for this naming confusion is that the SQL standard doesn’t have the con‐
cept of snapshot isolation, because the standard is based on System R’s 1975 defini‐
tion of isolation levels [2] and snapshot isolation hadn’t yet been invented then.
Instead, it defines repeatable read, which looks superficially similar to snapshot isola‐
tion. PostgreSQL and MySQL call their snapshot isolation level repeatable read
because it meets the requirements of the standard, and so they can claim standards
compliance.
Unfortunately, the SQL standard’s definition of isolation levels is flawed—it is ambig‐
uous, imprecise, and not as implementation-independent as a standard should be
[28]. Even though several databases implement repeatable read, there are big differ‐
ences in the guarantees they actually provide, despite being ostensibly standardized
[23]. There has been a formal definition of repeatable read in the research literature
[29, 30], but most implementations don’t satisfy that formal definition. And to top it
off, IBM DB2 uses “repeatable read” to refer to serializability [8].
As a result, nobody really knows what repeatable read means. 
Preventing Lost Updates
The read committed and snapshot isolation levels we’ve discussed so far have been
primarily about the guarantees of what a read-only transaction can see in the pres‐
ence of concurrent writes. We have mostly ignored the issue of two transactions writ‐
ing concurrently—we have only discussed dirty writes (see “No dirty writes” on page
235), one particular type of write-write conflict that can occur.
242 
| 
Chapter 7: Transactions
