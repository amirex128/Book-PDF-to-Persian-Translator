Viewed like this, batch and stream processors are like elaborate implementations of
triggers, stored procedures, and materialized view maintenance routines. The derived
data systems they maintain are like different index types. For example, a relational
database may support B-tree indexes, hash indexes, spatial indexes (see “Multi-
column indexes” on page 87), and other types of indexes. In the emerging architec‐
ture of derived data systems, instead of implementing those facilities as features of a
single integrated database product, they are provided by various different pieces of
software, running on different machines, administered by different teams.
Where will these developments take us in the future? If we start from the premise
that there is no single data model or storage format that is suitable for all access pat‐
terns, I speculate that there are two avenues by which different storage and process‐
ing tools can nevertheless be composed into a cohesive system:
Federated databases: unifying reads
It is possible to provide a unified query interface to a wide variety of underlying
storage engines and processing methods—an approach known as a federated
database or polystore [18, 19]. For example, PostgreSQL’s foreign data wrapper
feature fits this pattern [20]. Applications that need a specialized data model or
query interface can still access the underlying storage engines directly, while
users who want to combine data from disparate places can do so easily through
the federated interface.
A federated query interface follows the relational tradition of a single integrated
system with a high-level query language and elegant semantics, but a compli‐
cated implementation.
Unbundled databases: unifying writes
While federation addresses read-only querying across several different systems, it
does not have a good answer to synchronizing writes across those systems. We
said that within a single database, creating a consistent index is a built-in feature.
When we compose several storage systems, we similarly need to ensure that all
data changes end up in all the right places, even in the face of faults. Making it
easier to reliably plug together storage systems (e.g., through change data capture
and event logs) is like unbundling a database’s index-maintenance features in a
way that can synchronize writes across disparate technologies [7, 21].
The unbundled approach follows the Unix tradition of small tools that do one
thing well [22], that communicate through a uniform low-level API (pipes), and
that can be composed using a higher-level language (the shell) [16].
Making unbundling work
Federation and unbundling are two sides of the same coin: composing a reliable, scal‐
able, and maintainable system out of diverse components. Federated read-only
Unbundling Databases 
| 
501
