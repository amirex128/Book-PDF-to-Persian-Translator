vii. A total order that is inconsistent with causality is easy to create, but not very useful. For example, you can
generate a random UUID for each operation, and compare UUIDs lexicographically to define the total order‐
ing of operations. This is a valid total order, but the random UUIDs tell you nothing about which operation
actually happened first, or whether the operations were concurrent.
Such sequence numbers or timestamps are compact (only a few bytes in size), and
they provide a total order: that is, every operation has a unique sequence number, and
you can always compare two sequence numbers to determine which is greater (i.e.,
which operation happened later).
In particular, we can create sequence numbers in a total order that is consistent with
causality:vii we promise that if operation A causally happened before B, then A occurs
before B in the total order (A has a lower sequence number than B). Concurrent
operations may be ordered arbitrarily. Such a total order captures all the causality
information, but also imposes more ordering than strictly required by causality.
In a database with single-leader replication (see “Leaders and Followers” on page
152), the replication log defines a total order of write operations that is consistent
with causality. The leader can simply increment a counter for each operation, and
thus assign a monotonically increasing sequence number to each operation in the
replication log. If a follower applies the writes in the order they appear in the replica‐
tion log, the state of the follower is always causally consistent (even if it is lagging
behind the leader).
Noncausal sequence number generators
If there is not a single leader (perhaps because you are using a multi-leader or leader‐
less database, or because the database is partitioned), it is less clear how to generate
sequence numbers for operations. Various methods are used in practice:
• Each node can generate its own independent set of sequence numbers. For exam‐
ple, if you have two nodes, one node can generate only odd numbers and the
other only even numbers. In general, you could reserve some bits in the binary
representation of the sequence number to contain a unique node identifier, and
this would ensure that two different nodes can never generate the same sequence
number.
• You can attach a timestamp from a time-of-day clock (physical clock) to each
operation [55]. Such timestamps are not sequential, but if they have sufficiently
high resolution, they might be sufficient to totally order operations. This fact is
used in the last write wins conflict resolution method (see “Timestamps for
ordering events” on page 291).
• You can preallocate blocks of sequence numbers. For example, node A might
claim the block of sequence numbers from 1 to 1,000, and node B might claim
344 
| 
Chapter 9: Consistency and Consensus
