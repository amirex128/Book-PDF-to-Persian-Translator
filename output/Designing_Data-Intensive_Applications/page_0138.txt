Example 4-1. Example record which we will encode in several binary formats in this
chapter
{
    "userName": "Martin",
    "favoriteNumber": 1337,
    "interests": ["daydreaming", "hacking"]
}
Let’s look at an example of MessagePack, a binary encoding for JSON. Figure 4-1
shows the byte sequence that you get if you encode the JSON document in
Example 4-1 with MessagePack [14]. The first few bytes are as follows:
1. The first byte, 0x83, indicates that what follows is an object (top four bits = 0x80)
with three fields (bottom four bits = 0x03). (In case you’re wondering what hap‐
pens if an object has more than 15 fields, so that the number of fields doesn’t fit
in four bits, it then gets a different type indicator, and the number of fields is
encoded in two or four bytes.)
2. The second byte, 0xa8, indicates that what follows is a string (top four bits =
0xa0) that is eight bytes long (bottom four bits = 0x08).
3. The next eight bytes are the field name userName in ASCII. Since the length was
indicated previously, there’s no need for any marker to tell us where the string
ends (or any escaping).
4. The next seven bytes encode the six-letter string value Martin with a prefix 0xa6,
and so on.
The binary encoding is 66 bytes long, which is only a little less than the 81 bytes taken
by the textual JSON encoding (with whitespace removed). All the binary encodings of
JSON are similar in this regard. It’s not clear whether such a small space reduction
(and perhaps a speedup in parsing) is worth the loss of human-readability.
In the following sections we will see how we can do much better, and encode the
same record in just 32 bytes.
116 
| 
Chapter 4: Encoding and Evolution
