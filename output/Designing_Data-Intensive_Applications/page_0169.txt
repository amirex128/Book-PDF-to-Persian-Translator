machines, you don’t need to be operating at Google scale: even for small companies,
a multi-region distributed architecture is now feasible.
In this part of the book, we focus on shared-nothing architectures—not because they
are necessarily the best choice for every use case, but rather because they require the
most caution from you, the application developer. If your data is distributed across
multiple nodes, you need to be aware of the constraints and trade-offs that occur in
such a distributed system—the database cannot magically hide these from you.
While a distributed shared-nothing architecture has many advantages, it usually also
incurs additional complexity for applications and sometimes limits the expressive‐
ness of the data models you can use. In some cases, a simple single-threaded program
can perform significantly better than a cluster with over 100 CPU cores [4]. On the
other hand, shared-nothing systems can be very powerful. The next few chapters go
into details on the issues that arise when data is distributed. 
Replication Versus Partitioning
There are two common ways data is distributed across multiple nodes:
Replication
Keeping a copy of the same data on several different nodes, potentially in differ‐
ent locations. Replication provides redundancy: if some nodes are unavailable,
the data can still be served from the remaining nodes. Replication can also help
improve performance. We discuss replication in Chapter 5.
Partitioning
Splitting a big database into smaller subsets called partitions so that different par‐
titions can be assigned to different nodes (also known as sharding). We discuss
partitioning in Chapter 6.
These are separate mechanisms, but they often go hand in hand, as illustrated in
Figure II-1.
