In a slightly less nightmarish scenario, the semi-disconnected node may notice that
the messages it is sending are not being acknowledged by other nodes, and so realize
that there must be a fault in the network. Nevertheless, the node is wrongly declared
dead by the other nodes, and the semi-disconnected node cannot do anything about
it.
As a third scenario, imagine a node that experiences a long stop-the-world garbage
collection pause. All of the node’s threads are preempted by the GC and paused for
one minute, and consequently, no requests are processed and no responses are sent.
The other nodes wait, retry, grow impatient, and eventually declare the node dead
and load it onto the hearse. Finally, the GC finishes and the node’s threads continue
as if nothing had happened. The other nodes are surprised as the supposedly dead
node suddenly raises its head out of the coffin, in full health, and starts cheerfully
chatting with bystanders. At first, the GCing node doesn’t even realize that an entire
minute has passed and that it was declared dead—from its perspective, hardly any
time has passed since it was last talking to the other nodes.
The moral of these stories is that a node cannot necessarily trust its own judgment of
a situation. A distributed system cannot exclusively rely on a single node, because a
node may fail at any time, potentially leaving the system stuck and unable to recover.
Instead, many distributed algorithms rely on a quorum, that is, voting among the
nodes (see “Quorums for reading and writing” on page 179): decisions require some
minimum number of votes from several nodes in order to reduce the dependence on
any one particular node.
That includes decisions about declaring nodes dead. If a quorum of nodes declares
another node dead, then it must be considered dead, even if that node still very much
feels alive. The individual node must abide by the quorum decision and step down.
Most commonly, the quorum is an absolute majority of more than half the nodes
(although other kinds of quorums are possible). A majority quorum allows the sys‐
tem to continue working if individual nodes have failed (with three nodes, one failure
can be tolerated; with five nodes, two failures can be tolerated). However, it is still
safe, because there can only be only one majority in the system—there cannot be two
majorities with conflicting decisions at the same time. We will discuss the use of quo‐
rums in more detail when we get to consensus algorithms in Chapter 9.
The leader and the lock
Frequently, a system requires there to be only one of some thing. For example:
• Only one node is allowed to be the leader for a database partition, to avoid split
brain (see “Handling Node Outages” on page 156).
• Only one transaction or client is allowed to hold the lock for a particular resource
or object, to prevent concurrently writing to it and corrupting it.
Knowledge, Truth, and Lies 
| 
301
