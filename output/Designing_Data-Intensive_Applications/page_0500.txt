used in Google Cloud Dataflow [81, 92] and VoltDB [94], and there are plans to add
similar features to Apache Kafka [95, 96]. Unlike XA, these implementations do not
attempt to provide transactions across heterogeneous technologies, but instead keep
them internal by managing both state changes and messaging within the stream pro‐
cessing framework. The overhead of the transaction protocol can be amortized by
processing several input messages within a single transaction.
Idempotence
Our goal is to discard the partial output of any failed tasks so that they can be safely
retried without taking effect twice. Distributed transactions are one way of achieving
that goal, but another way is to rely on idempotence [97].
An idempotent operation is one that you can perform multiple times, and it has the
same effect as if you performed it only once. For example, setting a key in a key-value
store to some fixed value is idempotent (writing the value again simply overwrites the
value with an identical value), whereas incrementing a counter is not idempotent
(performing the increment again means the value is incremented twice).
Even if an operation is not naturally idempotent, it can often be made idempotent
with a bit of extra metadata. For example, when consuming messages from Kafka,
every message has a persistent, monotonically increasing offset. When writing a value
to an external database, you can include the offset of the message that triggered the
last write with the value. Thus, you can tell whether an update has already been
applied, and avoid performing the same update again.
The state handling in Storm’s Trident is based on a similar idea [78]. Relying on
idempotence implies several assumptions: restarting a failed task must replay the
same messages in the same order (a log-based message broker does this), the process‐
ing must be deterministic, and no other node may concurrently update the same
value [98, 99].
When failing over from one processing node to another, fencing may be required (see
“The leader and the lock” on page 301) to prevent interference from a node that is
thought to be dead but is actually alive. Despite all those caveats, idempotent opera‐
tions can be an effective way of achieving exactly-once semantics with only a small
overhead.
Rebuilding state after a failure
Any stream process that requires state—for example, any windowed aggregations
(such as counters, averages, and histograms) and any tables and indexes used for
joins—must ensure that this state can be recovered after a failure.
One option is to keep the state in a remote datastore and replicate it, although having
to query a remote database for each individual message can be slow, as discussed in
478 
| 
Chapter 11: Stream Processing
