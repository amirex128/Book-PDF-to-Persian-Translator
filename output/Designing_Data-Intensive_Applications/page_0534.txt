When we move away from the assumption of stateless clients talking to a central
database and toward state that is maintained on end-user devices, a world of new
opportunities opens up. In particular, we can think of the on-device state as a cache of
state on the server. The pixels on the screen are a materialized view onto model
objects in the client app; the model objects are a local replica of state in a remote
datacenter [27].
Pushing state changes to clients
In a typical web page, if you load the page in a web browser and the data subse‐
quently changes on the server, the browser does not find out about the change until
you reload the page. The browser only reads the data at one point in time, assuming
that it is static—it does not subscribe to updates from the server. Thus, the state on
the device is a stale cache that is not updated unless you explicitly poll for changes.
(HTTP-based feed subscription protocols like RSS are really just a basic form of poll‐
ing.)
More recent protocols have moved beyond the basic request/response pattern of
HTTP: server-sent events (the EventSource API) and WebSockets provide communi‐
cation channels by which a web browser can keep an open TCP connection to a
server, and the server can actively push messages to the browser as long as it remains
connected. This provides an opportunity for the server to actively inform the end-
user client about any changes to the state it has stored locally, reducing the staleness
of the client-side state.
In terms of our model of write path and read path, actively pushing state changes all
the way to client devices means extending the write path all the way to the end user.
When a client is first initialized, it would still need to use a read path to get its initial
state, but thereafter it could rely on a stream of state changes sent by the server. The
ideas we discussed around stream processing and messaging are not restricted to run‐
ning only in a datacenter: we can take the ideas further, and extend them all the way
to end-user devices [43].
The devices will be offline some of the time, and unable to receive any notifications of
state changes from the server during that time. But we already solved that problem: in
“Consumer offsets” on page 449 we discussed how a consumer of a log-based mes‐
sage broker can reconnect after failing or becoming disconnected, and ensure that it
doesn’t miss any messages that arrived while it was disconnected. The same techni‐
que works for individual users, where each device is a small subscriber to a small
stream of events.
End-to-end event streams
Recent tools for developing stateful clients and user interfaces, such as the Elm lan‐
guage [30] and Facebook’s toolchain of React, Flux, and Redux [44], already manage
512 
| 
Chapter 12: The Future of Data Systems
