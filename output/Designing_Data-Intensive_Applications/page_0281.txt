queue may form if several transactions want to access the same object, so a transac‐
tion may have to wait for several others to complete before it can do anything.
For this reason, databases running 2PL can have quite unstable latencies, and they
can be very slow at high percentiles (see “Describing Performance” on page 13) if
there is contention in the workload. It may take just one slow transaction, or one
transaction that accesses a lot of data and acquires many locks, to cause the rest of the
system to grind to a halt. This instability is problematic when robust operation is
required.
Although deadlocks can happen with the lock-based read committed isolation level,
they occur much more frequently under 2PL serializable isolation (depending on the
access patterns of your transaction). This can be an additional performance problem:
when a transaction is aborted due to deadlock and is retried, it needs to do its work
all over again. If deadlocks are frequent, this can mean significant wasted effort.
Predicate locks
In the preceding description of locks, we glossed over a subtle but important detail.
In “Phantoms causing write skew” on page 250 we discussed the problem of phan‐
toms—that is, one transaction changing the results of another transaction’s search
query. A database with serializable isolation must prevent phantoms.
In the meeting room booking example this means that if one transaction has
searched for existing bookings for a room within a certain time window (see
Example 7-2), another transaction is not allowed to concurrently insert or update
another booking for the same room and time range. (It’s okay to concurrently insert
bookings for other rooms, or for the same room at a different time that doesn’t affect
the proposed booking.)
How do we implement this? Conceptually, we need a predicate lock [3]. It works sim‐
ilarly to the shared/exclusive lock described earlier, but rather than belonging to a
particular object (e.g., one row in a table), it belongs to all objects that match some
search condition, such as:
SELECT * FROM bookings
  WHERE room_id = 123 AND
    end_time   > '2018-01-01 12:00' AND
    start_time < '2018-01-01 13:00';
A predicate lock restricts access as follows:
• If transaction A wants to read objects matching some condition, like in that
SELECT query, it must acquire a shared-mode predicate lock on the conditions of
the query. If another transaction B currently has an exclusive lock on any object
matching those conditions, A must wait until B releases its lock before it is
allowed to make its query.
Serializability 
| 
259
