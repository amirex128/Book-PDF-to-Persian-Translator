follower parses and executes that SQL statement as if it had been received from a
client.
Although this may sound reasonable, there are various ways in which this approach
to replication can break down:
• Any statement that calls a nondeterministic function, such as NOW() to get the
current date and time or RAND() to get a random number, is likely to generate a
different value on each replica.
• If statements use an autoincrementing column, or if they depend on the existing
data in the database (e.g., UPDATE … WHERE <some condition>), they must be
executed in exactly the same order on each replica, or else they may have a differ‐
ent effect. This can be limiting when there are multiple concurrently executing
transactions.
• Statements that have side effects (e.g., triggers, stored procedures, user-defined
functions) may result in different side effects occurring on each replica, unless
the side effects are absolutely deterministic.
It is possible to work around those issues—for example, the leader can replace any
nondeterministic function calls with a fixed return value when the statement is log‐
ged so that the followers all get the same value. However, because there are so many
edge cases, other replication methods are now generally preferred.
Statement-based replication was used in MySQL before version 5.1. It is still some‐
times used today, as it is quite compact, but by default MySQL now switches to row-
based replication (discussed shortly) if there is any nondeterminism in a statement.
VoltDB uses statement-based replication, and makes it safe by requiring transactions
to be deterministic [15].
Write-ahead log (WAL) shipping
In Chapter 3 we discussed how storage engines represent data on disk, and we found
that usually every write is appended to a log:
• In the case of a log-structured storage engine (see “SSTables and LSM-Trees” on
page 76), this log is the main place for storage. Log segments are compacted and
garbage-collected in the background.
• In the case of a B-tree (see “B-Trees” on page 79), which overwrites individual
disk blocks, every modification is first written to a write-ahead log so that the
index can be restored to a consistent state after a crash.
In either case, the log is an append-only sequence of bytes containing all writes to the
database. We can use the exact same log to build a replica on another node: besides
writing the log to disk, the leader also sends it across the network to its followers.
Leaders and Followers 
| 
159
