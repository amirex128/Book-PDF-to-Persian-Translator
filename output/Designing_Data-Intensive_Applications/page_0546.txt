idea of using multiple differently partitioned stages is similar to what we discussed in
“Multi-partition data processing” on page 514 (see also “Concurrency control” on
page 462). 
Timeliness and Integrity
A convenient property of transactions is that they are typically linearizable (see “Lin‐
earizability” on page 324): that is, a writer waits until a transaction is committed, and
thereafter its writes are immediately visible to all readers.
This is not the case when unbundling an operation across multiple stages of stream
processors: consumers of a log are asynchronous by design, so a sender does not wait
until its message has been processed by consumers. However, it is possible for a client
to wait for a message to appear on an output stream. This is what we did in “Unique‐
ness in log-based messaging” on page 522 when checking whether a uniqueness con‐
straint was satisfied.
In this example, the correctness of the uniqueness check does not depend on whether
the sender of the message waits for the outcome. The waiting only has the purpose of
synchronously informing the sender whether or not the uniqueness check succeeded,
but this notification can be decoupled from the effects of processing the message.
More generally, I think the term consistency conflates two different requirements that
are worth considering separately:
Timeliness
Timeliness means ensuring that users observe the system in an up-to-date state.
We saw previously that if a user reads from a stale copy of the data, they may
observe it in an inconsistent state (see “Problems with Replication Lag” on page
161). However, that inconsistency is temporary, and will eventually be resolved
simply by waiting and trying again.
The CAP theorem (see “The Cost of Linearizability” on page 335) uses consis‐
tency in the sense of linearizability, which is a strong way of achieving timeliness.
Weaker timeliness properties like read-after-write consistency (see “Reading
Your Own Writes” on page 162) can also be useful.
Integrity
Integrity means absence of corruption; i.e., no data loss, and no contradictory or
false data. In particular, if some derived dataset is maintained as a view onto
some underlying data (see “Deriving current state from the event log” on page
458), the derivation must be correct. For example, a database index must cor‐
rectly reflect the contents of the database—an index in which some records are
missing is not very useful.
524 
| 
Chapter 12: The Future of Data Systems
