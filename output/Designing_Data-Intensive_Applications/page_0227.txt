first column of a compound key, but if it specifies a fixed value for the first column, it
can perform an efficient range scan over the other columns of the key. 
The concatenated index approach enables an elegant data model for one-to-many
relationships. For example, on a social media site, one user may post many updates. If
the primary key for updates is chosen to be (user_id, update_timestamp), then you
can efficiently retrieve all updates made by a particular user within some time inter‐
val, sorted by timestamp. Different users may be stored on different partitions, but
within each user, the updates are stored ordered by timestamp on a single partition. 
Skewed Workloads and Relieving Hot Spots
As discussed, hashing a key to determine its partition can help reduce hot spots.
However, it can’t avoid them entirely: in the extreme case where all reads and writes
are for the same key, you still end up with all requests being routed to the same parti‐
tion.
This kind of workload is perhaps unusual, but not unheard of: for example, on a
social media site, a celebrity user with millions of followers may cause a storm of
activity when they do something [14]. This event can result in a large volume of
writes to the same key (where the key is perhaps the user ID of the celebrity, or the ID
of the action that people are commenting on). Hashing the key doesn’t help, as the
hash of two identical IDs is still the same.
Today, most data systems are not able to automatically compensate for such a highly
skewed workload, so it’s the responsibility of the application to reduce the skew. For
example, if one key is known to be very hot, a simple technique is to add a random
number to the beginning or end of the key. Just a two-digit decimal random number
would split the writes to the key evenly across 100 different keys, allowing those keys
to be distributed to different partitions.
However, having split the writes across different keys, any reads now have to do addi‐
tional work, as they have to read the data from all 100 keys and combine it. This tech‐
nique also requires additional bookkeeping: it only makes sense to append the
random number for the small number of hot keys; for the vast majority of keys with
low write throughput this would be unnecessary overhead. Thus, you also need some
way of keeping track of which keys are being split.
Perhaps in the future, data systems will be able to automatically detect and compen‐
sate for skewed workloads; but for now, you need to think through the trade-offs for
your own application. 
Partitioning of Key-Value Data 
| 
205
