action is aborted and has to be retried. Only transactions that executed serializably
are allowed to commit.
Optimistic concurrency control is an old idea [52], and its advantages and disadvan‐
tages have been debated for a long time [53]. It performs badly if there is high con‐
tention (many transactions trying to access the same objects), as this leads to a high
proportion of transactions needing to abort. If the system is already close to its maxi‐
mum throughput, the additional transaction load from retried transactions can make
performance worse.
However, if there is enough spare capacity, and if contention between transactions is
not too high, optimistic concurrency control techniques tend to perform better than
pessimistic ones. Contention can be reduced with commutative atomic operations:
for example, if several transactions concurrently want to increment a counter, it
doesn’t matter in which order the increments are applied (as long as the counter isn’t
read in the same transaction), so the concurrent increments can all be applied
without conflicting.
As the name suggests, SSI is based on snapshot isolation—that is, all reads within a
transaction are made from a consistent snapshot of the database (see “Snapshot Isola‐
tion and Repeatable Read” on page 237). This is the main difference compared to ear‐
lier optimistic concurrency control techniques. On top of snapshot isolation, SSI adds
an algorithm for detecting serialization conflicts among writes and determining
which transactions to abort.
Decisions based on an outdated premise
When we previously discussed write skew in snapshot isolation (see “Write Skew and
Phantoms” on page 246), we observed a recurring pattern: a transaction reads some
data from the database, examines the result of the query, and decides to take some
action (write to the database) based on the result that it saw. However, under snap‐
shot isolation, the result from the original query may no longer be up-to-date by the
time the transaction commits, because the data may have been modified in the mean‐
time.
Put another way, the transaction is taking an action based on a premise (a fact that
was true at the beginning of the transaction, e.g., “There are currently two doctors on
call”). Later, when the transaction wants to commit, the original data may have
changed—the premise may no longer be true.
When the application makes a query (e.g., “How many doctors are currently on
call?”), the database doesn’t know how the application logic uses the result of that
query. To be safe, the database needs to assume that any change in the query result
(the premise) means that writes in that transaction may be invalid. In other words,
there may be a causal dependency between the queries and the writes in the transac‐
tion. In order to provide serializable isolation, the database must detect situations in
262 
| 
Chapter 7: Transactions
