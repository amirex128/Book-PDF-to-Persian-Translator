(overstating some metric). In this context, exactly-once means arranging the compu‐
tation such that the final effect is the same as if no faults had occurred, even if the
operation actually was retried due to some fault. We previously discussed a few
approaches for achieving this goal.
One of the most effective approaches is to make the operation idempotent (see
“Idempotence” on page 478); that is, to ensure that it has the same effect, no matter
whether it is executed once or multiple times. However, taking an operation that is
not naturally idempotent and making it idempotent requires some effort and care:
you may need to maintain some additional metadata (such as the set of operation IDs
that have updated a value), and ensure fencing when failing over from one node to
another (see “The leader and the lock” on page 301).
Duplicate suppression
The same pattern of needing to suppress duplicates occurs in many other places
besides stream processing. For example, TCP uses sequence numbers on packets to
put them in the correct order at the recipient, and to determine whether any packets
were lost or duplicated on the network. Any lost packets are retransmitted and any
duplicates are removed by the TCP stack before it hands the data to an application.
However, this duplicate suppression only works within the context of a single TCP
connection. Imagine the TCP connection is a client’s connection to a database, and it
is currently executing the transaction in Example 12-1. In many databases, a transac‐
tion is tied to a client connection (if the client sends several queries, the database
knows that they belong to the same transaction because they are sent on the same
TCP connection). If the client suffers a network interruption and connection timeout
after sending the COMMIT, but before hearing back from the database server, it does
not know whether the transaction has been committed or aborted (Figure 8-1).
Example 12-1. A nonidempotent transfer of money from one account to another
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance + 11.00 WHERE account_id = 1234;
UPDATE accounts SET balance = balance - 11.00 WHERE account_id = 4321;
COMMIT;
The client can reconnect to the database and retry the transaction, but now it is out‐
side of the scope of TCP duplicate suppression. Since the transaction in Example 12-1
is not idempotent, it could happen that $22 is transferred instead of the desired $11.
Thus, even though Example 12-1 is a standard example for transaction atomicity, it is
actually not correct, and real banks do not work like this [3].
Two-phase commit (see “Atomic Commit and Two-Phase Commit (2PC)” on page
354) protocols break the 1:1 mapping between a TCP connection and a transaction,
since they must allow a transaction coordinator to reconnect to a database after a net‐
Aiming for Correctness 
| 
517
