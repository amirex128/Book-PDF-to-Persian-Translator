needed in order to prevent violations of causality (see “Detecting Concurrent
Writes” on page 184).
• It is possible for two nodes to independently generate writes with the same time‐
stamp, especially when the clock only has millisecond resolution. An additional
tiebreaker value (which can simply be a large random number) is required to
resolve such conflicts, but this approach can also lead to violations of causality
[53].
Thus, even though it is tempting to resolve conflicts by keeping the most “recent”
value and discarding others, it’s important to be aware that the definition of “recent”
depends on a local time-of-day clock, which may well be incorrect. Even with tightly
NTP-synchronized clocks, you could send a packet at timestamp 100 ms (according
to the sender’s clock) and have it arrive at timestamp 99 ms (according to the recipi‐
ent’s clock)—so it appears as though the packet arrived before it was sent, which is
impossible.
Could NTP synchronization be made accurate enough that such incorrect orderings
cannot occur? Probably not, because NTP’s synchronization accuracy is itself limited
by the network round-trip time, in addition to other sources of error such as quartz
drift. For correct ordering, you would need the clock source to be significantly more
accurate than the thing you are measuring (namely network delay).
So-called logical clocks [56, 57], which are based on incrementing counters rather
than an oscillating quartz crystal, are a safer alternative for ordering events (see
“Detecting Concurrent Writes” on page 184). Logical clocks do not measure the time
of day or the number of seconds elapsed, only the relative ordering of events
(whether one event happened before or after another). In contrast, time-of-day and
monotonic clocks, which measure actual elapsed time, are also known as physical
clocks. We’ll look at ordering a bit more in “Ordering Guarantees” on page 339.
Clock readings have a confidence interval
You may be able to read a machine’s time-of-day clock with microsecond or even
nanosecond resolution. But even if you can get such a fine-grained measurement,
that doesn’t mean the value is actually accurate to such precision. In fact, it most
likely is not—as mentioned previously, the drift in an imprecise quartz clock can
easily be several milliseconds, even if you synchronize with an NTP server on the
local network every minute. With an NTP server on the public internet, the best pos‐
sible accuracy is probably to the tens of milliseconds, and the error may easily spike
to over 100 ms when there is network congestion [57].
Thus, it doesn’t make sense to think of a clock reading as a point in time—it is more
like a range of times, within a confidence interval: for example, a system may be 95%
confident that the time now is between 10.3 and 10.5 seconds past the minute, but it
Unreliable Clocks 
| 
293
