The sender can’t even tell whether the packet was delivered: the only option is for the
recipient to send a response message, which may in turn be lost or delayed. These
issues are indistinguishable in an asynchronous network: the only information you
have is that you haven’t received a response yet. If you send a request to another node
and don’t receive a response, it is impossible to tell why.
The usual way of handling this issue is a timeout: after some time you give up waiting
and assume that the response is not going to arrive. However, when a timeout occurs,
you still don’t know whether the remote node got your request or not (and if the
request is still queued somewhere, it may still be delivered to the recipient, even if the
sender has given up on it).
Network Faults in Practice
We have been building computer networks for decades—one might hope that by now
we would have figured out how to make them reliable. However, it seems that we
have not yet succeeded.
There are some systematic studies, and plenty of anecdotal evidence, showing that
network problems can be surprisingly common, even in controlled environments like
a datacenter operated by one company [14]. One study in a medium-sized datacenter
found about 12 network faults per month, of which half disconnected a single
machine, and half disconnected an entire rack [15]. Another study measured the fail‐
ure rates of components like top-of-rack switches, aggregation switches, and load bal‐
ancers [16]. It found that adding redundant networking gear doesn’t reduce faults as
much as you might hope, since it doesn’t guard against human error (e.g., misconfig‐
ured switches), which is a major cause of outages.
Public cloud services such as EC2 are notorious for having frequent transient net‐
work glitches [14], and well-managed private datacenter networks can be stabler
environments. Nevertheless, nobody is immune from network problems: for exam‐
ple, a problem during a software upgrade for a switch could trigger a network topol‐
ogy reconfiguration, during which network packets could be delayed for more than a
minute [17]. Sharks might bite undersea cables and damage them [18]. Other surpris‐
ing faults include a network interface that sometimes drops all inbound packets but
sends outbound packets successfully [19]: just because a network link works in one
direction doesn’t guarantee it’s also working in the opposite direction.
Network partitions
When one part of the network is cut off from the rest due to a net‐
work fault, that is sometimes called a network partition or netsplit.
In this book we’ll generally stick with the more general term net‐
work fault, to avoid confusion with partitions (shards) of a storage
system, as discussed in Chapter 6.
Unreliable Networks 
| 
279
