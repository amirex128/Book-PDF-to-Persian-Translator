vi. Even within each camp there are plenty of arguments. For example, HATEOAS (hypermedia as the engine
of application state), often provokes discussions [35].
vii. Despite the similarity of acronyms, SOAP is not a requirement for SOA. SOAP is a particular technology,
whereas SOA is a general approach to building systems.
There are two popular approaches to web services: REST and SOAP. They are almost
diametrically opposed in terms of philosophy, and often the subject of heated debate
among their respective proponents.vi
REST is not a protocol, but rather a design philosophy that builds upon the principles
of HTTP [34, 35]. It emphasizes simple data formats, using URLs for identifying
resources and using HTTP features for cache control, authentication, and content
type negotiation. REST has been gaining popularity compared to SOAP, at least in
the context of cross-organizational service integration [36], and is often associated
with microservices [31]. An API designed according to the principles of REST is
called RESTful.
By contrast, SOAP is an XML-based protocol for making network API requests.vii
Although it is most commonly used over HTTP, it aims to be independent from
HTTP and avoids using most HTTP features. Instead, it comes with a sprawling and
complex multitude of related standards (the web service framework, known as WS-*)
that add various features [37].
The API of a SOAP web service is described using an XML-based language called the
Web Services Description Language, or WSDL. WSDL enables code generation so
that a client can access a remote service using local classes and method calls (which
are encoded to XML messages and decoded again by the framework). This is useful in
statically typed programming languages, but less so in dynamically typed ones (see
“Code generation and dynamically typed languages” on page 127).
As WSDL is not designed to be human-readable, and as SOAP messages are often too
complex to construct manually, users of SOAP rely heavily on tool support, code
generation, and IDEs [38]. For users of programming languages that are not sup‐
ported by SOAP vendors, integration with SOAP services is difficult.
Even though SOAP and its various extensions are ostensibly standardized, interoper‐
ability between different vendors’ implementations often causes problems [39]. For
all of these reasons, although SOAP is still used in many large enterprises, it has fallen
out of favor in most smaller companies.
RESTful APIs tend to favor simpler approaches, typically involving less code genera‐
tion and automated tooling. A definition format such as OpenAPI, also known as
Swagger [40], can be used to describe RESTful APIs and produce documentation.
Modes of Dataflow 
| 
133
