need to be encoded into a sequence of bytes that can be sent over the network.
That’s okay if the parameters are primitives like numbers or strings, but quickly
becomes problematic with larger objects.
• The client and the service may be implemented in different programming lan‐
guages, so the RPC framework must translate datatypes from one language into
another. This can end up ugly, since not all languages have the same types—
recall JavaScript’s problems with numbers greater than 253, for example (see
“JSON, XML, and Binary Variants” on page 114). This problem doesn’t exist in a
single process written in a single language.
All of these factors mean that there’s no point trying to make a remote service look
too much like a local object in your programming language, because it’s a fundamen‐
tally different thing. Part of the appeal of REST is that it doesn’t try to hide the fact
that it’s a network protocol (although this doesn’t seem to stop people from building
RPC libraries on top of REST).
Current directions for RPC
Despite all these problems, RPC isn’t going away. Various RPC frameworks have
been built on top of all the encodings mentioned in this chapter: for example, Thrift
and Avro come with RPC support included, gRPC is an RPC implementation using
Protocol Buffers, Finagle also uses Thrift, and Rest.li uses JSON over HTTP.
This new generation of RPC frameworks is more explicit about the fact that a remote
request is different from a local function call. For example, Finagle and Rest.li use
futures (promises) to encapsulate asynchronous actions that may fail. Futures also
simplify situations where you need to make requests to multiple services in parallel,
and combine their results [45]. gRPC supports streams, where a call consists of not
just one request and one response, but a series of requests and responses over time
[46].
Some of these frameworks also provide service discovery—that is, allowing a client to
find out at which IP address and port number it can find a particular service. We will
return to this topic in “Request Routing” on page 214.
Custom RPC protocols with a binary encoding format can achieve better perfor‐
mance than something generic like JSON over REST. However, a RESTful API has
other significant advantages: it is good for experimentation and debugging (you can
simply make requests to it using a web browser or the command-line tool curl,
without any code generation or software installation), it is supported by all main‐
stream programming languages and platforms, and there is a vast ecosystem of tools
available (servers, caches, load balancers, proxies, firewalls, monitoring, debugging
tools, testing tools, etc.).
Modes of Dataflow 
| 
135
