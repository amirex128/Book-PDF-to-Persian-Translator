Advantages of LSM-trees
A B-tree index must write every piece of data at least twice: once to the write-ahead
log, and once to the tree page itself (and perhaps again as pages are split). There is
also overhead from having to write an entire page at a time, even if only a few bytes in
that page changed. Some storage engines even overwrite the same page twice in order
to avoid ending up with a partially updated page in the event of a power failure [24,
25].
Log-structured indexes also rewrite data multiple times due to repeated compaction
and merging of SSTables. This effect—one write to the database resulting in multiple
writes to the disk over the course of the database’s lifetime—is known as write ampli‐
fication. It is of particular concern on SSDs, which can only overwrite blocks a limi‐
ted number of times before wearing out.
In write-heavy applications, the performance bottleneck might be the rate at which
the database can write to disk. In this case, write amplification has a direct perfor‐
mance cost: the more that a storage engine writes to disk, the fewer writes per second
it can handle within the available disk bandwidth.
Moreover, LSM-trees are typically able to sustain higher write throughput than B-
trees, partly because they sometimes have lower write amplification (although this
depends on the storage engine configuration and workload), and partly because they
sequentially write compact SSTable files rather than having to overwrite several pages
in the tree [26]. This difference is particularly important on magnetic hard drives,
where sequential writes are much faster than random writes.
LSM-trees can be compressed better, and thus often produce smaller files on disk
than B-trees. B-tree storage engines leave some disk space unused due to fragmenta‐
tion: when a page is split or when a row cannot fit into an existing page, some space
in a page remains unused. Since LSM-trees are not page-oriented and periodically
rewrite SSTables to remove fragmentation, they have lower storage overheads, espe‐
cially when using leveled compaction [27].
On many SSDs, the firmware internally uses a log-structured algorithm to turn ran‐
dom writes into sequential writes on the underlying storage chips, so the impact of
the storage engine’s write pattern is less pronounced [19]. However, lower write
amplification and reduced fragmentation are still advantageous on SSDs: represent‐
ing data more compactly allows more read and write requests within the available I/O
bandwidth.
Downsides of LSM-trees
A downside of log-structured storage is that the compaction process can sometimes
interfere with the performance of ongoing reads and writes. Even though storage
engines try to perform compaction incrementally and without affecting concurrent
84 
| 
Chapter 3: Storage and Retrieval
