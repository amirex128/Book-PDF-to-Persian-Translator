base that has only one replica. Once we have worked out how to do this on a single
replica, we can generalize the approach to a leaderless database with multiple replicas.
Figure 5-13 shows two clients concurrently adding items to the same shopping cart.
(If that example strikes you as too inane, imagine instead two air traffic controllers
concurrently adding aircraft to the sector they are tracking.) Initially, the cart is
empty. Between them, the clients make five writes to the database:
1. Client 1 adds milk to the cart. This is the first write to that key, so the server suc‐
cessfully stores it and assigns it version 1. The server also echoes the value back
to the client, along with the version number.
2. Client 2 adds eggs to the cart, not knowing that client 1 concurrently added milk
(client 2 thought that its eggs were the only item in the cart). The server assigns
version 2 to this write, and stores eggs and milk as two separate values. It then
returns both values to the client, along with the version number of 2.
3. Client 1, oblivious to client 2’s write, wants to add flour to the cart, so it thinks
the current cart contents should be [milk, flour]. It sends this value to the
server, along with the version number 1 that the server gave client 1 previously.
The server can tell from the version number that the write of [milk, flour]
supersedes the prior value of [milk] but that it is concurrent with [eggs]. Thus,
the server assigns version 3 to [milk, flour], overwrites the version 1 value
[milk], but keeps the version 2 value [eggs] and returns both remaining values
to the client.
4. Meanwhile, client 2 wants to add ham to the cart, unaware that client 1 just added
flour. Client 2 received the two values [milk] and [eggs] from the server in the
last response, so the client now merges those values and adds ham to form a new
value, [eggs, milk, ham]. It sends that value to the server, along with the previ‐
ous version number 2. The server detects that version 2 overwrites [eggs] but is
concurrent with [milk, flour], so the two remaining values are [milk, flour]
with version 3, and [eggs, milk, ham] with version 4.
5. Finally, client 1 wants to add bacon. It previously received [milk, flour] and
[eggs] from the server at version 3, so it merges those, adds bacon, and sends the
final value [milk, flour, eggs, bacon] to the server, along with the version
number 3. This overwrites [milk, flour] (note that [eggs] was already over‐
written in the last step) but is concurrent with [eggs, milk, ham], so the server
keeps those two concurrent values.
188 
| 
Chapter 5: Replication
