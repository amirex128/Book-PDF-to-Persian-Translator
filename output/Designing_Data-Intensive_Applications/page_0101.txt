log-structured filesystems [11]. Storage engines that are based on this principle of
merging and compacting sorted files are often called LSM storage engines.
Lucene, an indexing engine for full-text search used by Elasticsearch and Solr, uses a
similar method for storing its term dictionary [12, 13]. A full-text index is much more
complex than a key-value index but is based on a similar idea: given a word in a
search query, find all the documents (web pages, product descriptions, etc.) that
mention the word. This is implemented with a key-value structure where the key is a
word (a term) and the value is the list of IDs of all the documents that contain the
word (the postings list). In Lucene, this mapping from term to postings list is kept in
SSTable-like sorted files, which are merged in the background as needed [14].
Performance optimizations
As always, a lot of detail goes into making a storage engine perform well in practice.
For example, the LSM-tree algorithm can be slow when looking up keys that do not
exist in the database: you have to check the memtable, then the segments all the way
back to the oldest (possibly having to read from disk for each one) before you can be
sure that the key does not exist. In order to optimize this kind of access, storage
engines often use additional Bloom filters [15]. (A Bloom filter is a memory-efficient
data structure for approximating the contents of a set. It can tell you if a key does not
appear in the database, and thus saves many unnecessary disk reads for nonexistent
keys.)
There are also different strategies to determine the order and timing of how SSTables
are compacted and merged. The most common options are size-tiered and leveled
compaction. LevelDB and RocksDB use leveled compaction (hence the name of Lev‐
elDB), HBase uses size-tiered, and Cassandra supports both [16]. In size-tiered com‐
paction, newer and smaller SSTables are successively merged into older and larger
SSTables. In leveled compaction, the key range is split up into smaller SSTables and
older data is moved into separate “levels,” which allows the compaction to proceed
more incrementally and use less disk space.
Even though there are many subtleties, the basic idea of LSM-trees—keeping a cas‐
cade of SSTables that are merged in the background—is simple and effective. Even
when the dataset is much bigger than the available memory it continues to work well.
Since data is stored in sorted order, you can efficiently perform range queries (scan‐
ning all keys above some minimum and up to some maximum), and because the disk
writes are sequential the LSM-tree can support remarkably high write throughput. 
B-Trees
The log-structured indexes we have discussed so far are gaining acceptance, but they
are not the most common type of index. The most widely used indexing structure is
quite different: the B-tree.
Data Structures That Power Your Database 
| 
79
