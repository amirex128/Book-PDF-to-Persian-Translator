Atomic Commit and Two-Phase Commit (2PC)
In Chapter 7 we learned that the purpose of transaction atomicity is to provide sim‐
ple semantics in the case where something goes wrong in the middle of making sev‐
eral writes. The outcome of a transaction is either a successful commit, in which case
all of the transaction’s writes are made durable, or an abort, in which case all of the
transaction’s writes are rolled back (i.e., undone or discarded).
Atomicity prevents failed transactions from littering the database with half-finished
results and half-updated state. This is especially important for multi-object transac‐
tions (see “Single-Object and Multi-Object Operations” on page 228) and databases
that maintain secondary indexes. Each secondary index is a separate data structure
from the primary data—thus, if you modify some data, the corresponding change
needs to also be made in the secondary index. Atomicity ensures that the secondary
index stays consistent with the primary data (if the index became inconsistent with
the primary data, it would not be very useful).
From single-node to distributed atomic commit
For transactions that execute at a single database node, atomicity is commonly imple‐
mented by the storage engine. When the client asks the database node to commit the
transaction, the database makes the transaction’s writes durable (typically in a write-
ahead log; see “Making B-trees reliable” on page 82) and then appends a commit
record to the log on disk. If the database crashes in the middle of this process, the
transaction is recovered from the log when the node restarts: if the commit record
was successfully written to disk before the crash, the transaction is considered com‐
mitted; if not, any writes from that transaction are rolled back.
Thus, on a single node, transaction commitment crucially depends on the order in
which data is durably written to disk: first the data, then the commit record [72]. The
key deciding moment for whether the transaction commits or aborts is the moment
at which the disk finishes writing the commit record: before that moment, it is still
possible to abort (due to a crash), but after that moment, the transaction is commit‐
ted (even if the database crashes). Thus, it is a single device (the controller of one par‐
ticular disk drive, attached to one particular node) that makes the commit atomic.
However, what if multiple nodes are involved in a transaction? For example, perhaps
you have a multi-object transaction in a partitioned database, or a term-partitioned
secondary index (in which the index entry may be on a different node from the pri‐
mary data; see “Partitioning and Secondary Indexes” on page 206). Most “NoSQL”
distributed datastores do not support such distributed transactions, but various clus‐
tered relational systems do (see “Distributed Transactions in Practice” on page 360).
In these cases, it is not sufficient to simply send a commit request to all of the nodes
and independently commit the transaction on each one. In doing so, it could easily
354 
| 
Chapter 9: Consistency and Consensus
