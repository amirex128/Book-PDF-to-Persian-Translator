[56]; see “Schema flexibility in the document model” on page 39). This can be an
advantage if the producer and consumers are different teams with different priorities.
There may not even be one ideal data model, but rather different views onto the data
that are suitable for different purposes. Simply dumping data in its raw form allows
for several such transformations. This approach has been dubbed the sushi principle:
“raw data is better” [57].
Thus, Hadoop has often been used for implementing ETL processes (see “Data Ware‐
housing” on page 91): data from transaction processing systems is dumped into the
distributed filesystem in some raw form, and then MapReduce jobs are written to
clean up that data, transform it into a relational form, and import it into an MPP data
warehouse for analytic purposes. Data modeling still happens, but it is in a separate
step, decoupled from the data collection. This decoupling is possible because a dis‐
tributed filesystem supports data encoded in any format.
Diversity of processing models
MPP databases are monolithic, tightly integrated pieces of software that take care of
storage layout on disk, query planning, scheduling, and execution. Since these com‐
ponents can all be tuned and optimized for the specific needs of the database, the sys‐
tem as a whole can achieve very good performance on the types of queries for which
it is designed. Moreover, the SQL query language allows expressive queries and ele‐
gant semantics without the need to write code, making it accessible to graphical tools
used by business analysts (such as Tableau).
On the other hand, not all kinds of processing can be sensibly expressed as SQL quer‐
ies. For example, if you are building machine learning and recommendation systems,
or full-text search indexes with relevance ranking models, or performing image anal‐
ysis, you most likely need a more general model of data processing. These kinds of
processing are often very specific to a particular application (e.g., feature engineering
for machine learning, natural language models for machine translation, risk estima‐
tion functions for fraud prediction), so they inevitably require writing code, not just
queries.
MapReduce gave engineers the ability to easily run their own code over large data‐
sets. If you have HDFS and MapReduce, you can build a SQL query execution engine
on top of it, and indeed this is what the Hive project did [31]. However, you can also
write many other forms of batch processes that do not lend themselves to being
expressed as a SQL query.
Subsequently, people found that MapReduce was too limiting and performed too
badly for some types of processing, so various other processing models were devel‐
oped on top of Hadoop (we will see some of them in “Beyond MapReduce” on page
419). Having two processing models, SQL and MapReduce, was not enough: even
more different models were needed! And due to the openness of the Hadoop plat‐
416 
| 
Chapter 10: Batch Processing
