• If a node is accidentally firewalled off from NTP servers, the misconfiguration
may go unnoticed for some time. Anecdotal evidence suggests that this does hap‐
pen in practice.
• NTP synchronization can only be as good as the network delay, so there is a limit
to its accuracy when you’re on a congested network with variable packet delays.
One experiment showed that a minimum error of 35 ms is achievable when syn‐
chronizing over the internet [42], though occasional spikes in network delay lead
to errors of around a second. Depending on the configuration, large network
delays can cause the NTP client to give up entirely.
• Some NTP servers are wrong or misconfigured, reporting time that is off by
hours [43, 44]. NTP clients are quite robust, because they query several servers
and ignore outliers. Nevertheless, it’s somewhat worrying to bet the correctness
of your systems on the time that you were told by a stranger on the internet.
• Leap seconds result in a minute that is 59 seconds or 61 seconds long, which
messes up timing assumptions in systems that are not designed with leap seconds
in mind [45]. The fact that leap seconds have crashed many large systems [38,
46] shows how easy it is for incorrect assumptions about clocks to sneak into a
system. The best way of handling leap seconds may be to make NTP servers “lie,”
by performing the leap second adjustment gradually over the course of a day
(this is known as smearing) [47, 48], although actual NTP server behavior varies
in practice [49].
• In virtual machines, the hardware clock is virtualized, which raises additional
challenges for applications that need accurate timekeeping [50]. When a CPU
core is shared between virtual machines, each VM is paused for tens of milli‐
seconds while another VM is running. From an application’s point of view, this
pause manifests itself as the clock suddenly jumping forward [26].
• If you run software on devices that you don’t fully control (e.g., mobile or
embedded devices), you probably cannot trust the device’s hardware clock at all.
Some users deliberately set their hardware clock to an incorrect date and time,
for example to circumvent timing limitations in games. As a result, the clock
might be set to a time wildly in the past or the future.
It is possible to achieve very good clock accuracy if you care about it sufficiently to
invest significant resources. For example, the MiFID II draft European regulation for
financial institutions requires all high-frequency trading funds to synchronize their
clocks to within 100 microseconds of UTC, in order to help debug market anomalies
such as “flash crashes” and to help detect market manipulation [51].
Such accuracy can be achieved using GPS receivers, the Precision Time Protocol
(PTP) [52], and careful deployment and monitoring. However, it requires significant
effort and expertise, and there are plenty of ways clock synchronization can go
290 
| 
Chapter 8: The Trouble with Distributed Systems
