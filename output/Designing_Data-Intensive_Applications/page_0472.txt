Disk space usage
If you only ever append to the log, you will eventually run out of disk space. To
reclaim disk space, the log is actually divided into segments, and from time to time
old segments are deleted or moved to archive storage. (We’ll discuss a more sophisti‐
cated way of freeing disk space later.)
This means that if a slow consumer cannot keep up with the rate of messages, and it
falls so far behind that its consumer offset points to a deleted segment, it will miss
some of the messages. Effectively, the log implements a bounded-size buffer that dis‐
cards old messages when it gets full, also known as a circular buffer or ring buffer.
However, since that buffer is on disk, it can be quite large.
Let’s do a back-of-the-envelope calculation. At the time of writing, a typical large
hard drive has a capacity of 6 TB and a sequential write throughput of 150 MB/s. If
you are writing messages at the fastest possible rate, it takes about 11 hours to fill the
drive. Thus, the disk can buffer 11 hours’ worth of messages, after which it will start
overwriting old messages. This ratio remains the same, even if you use many hard
drives and machines. In practice, deployments rarely use the full write bandwidth of
the disk, so the log can typically keep a buffer of several days’ or even weeks’ worth of
messages.
Regardless of how long you retain messages, the throughput of a log remains more or
less constant, since every message is written to disk anyway [18]. This behavior is in
contrast to messaging systems that keep messages in memory by default and only
write them to disk if the queue grows too large: such systems are fast when queues are
short and become much slower when they start writing to disk, so the throughput
depends on the amount of history retained.
When consumers cannot keep up with producers
At the beginning of “Messaging Systems” on page 441 we discussed three choices of
what to do if a consumer cannot keep up with the rate at which producers are send‐
ing messages: dropping messages, buffering, or applying backpressure. In this taxon‐
omy, the log-based approach is a form of buffering with a large but fixed-size buffer
(limited by the available disk space).
If a consumer falls so far behind that the messages it requires are older than what is
retained on disk, it will not be able to read those messages—so the broker effectively
drops old messages that go back further than the size of the buffer can accommodate.
You can monitor how far a consumer is behind the head of the log, and raise an alert
if it falls behind significantly. As the buffer is large, there is enough time for a human
operator to fix the slow consumer and allow it to catch up before it starts missing
messages.
450 
| 
Chapter 11: Stream Processing
