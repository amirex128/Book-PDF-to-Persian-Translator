Even though this seems like an obvious idea, database designers only fairly recently—
around 2007—decided that a single-threaded loop for executing transactions was fea‐
sible [45]. If multi-threaded concurrency was considered essential for getting good
performance during the previous 30 years, what changed to make single-threaded
execution possible?
Two developments caused this rethink:
• RAM became cheap enough that for many use cases is now feasible to keep the
entire active dataset in memory (see “Keeping everything in memory” on page
88). When all data that a transaction needs to access is in memory, transactions
can execute much faster than if they have to wait for data to be loaded from disk.
• Database designers realized that OLTP transactions are usually short and only
make a small number of reads and writes (see “Transaction Processing or Ana‐
lytics?” on page 90). By contrast, long-running analytic queries are typically read-
only, so they can be run on a consistent snapshot (using snapshot isolation)
outside of the serial execution loop.
The approach of executing transactions serially is implemented in VoltDB/H-Store,
Redis, and Datomic [46, 47, 48]. A system designed for single-threaded execution can
sometimes perform better than a system that supports concurrency, because it can
avoid the coordination overhead of locking. However, its throughput is limited to
that of a single CPU core. In order to make the most of that single thread, transac‐
tions need to be structured differently from their traditional form.
Encapsulating transactions in stored procedures
In the early days of databases, the intention was that a database transaction could
encompass an entire flow of user activity. For example, booking an airline ticket is a
multi-stage process (searching for routes, fares, and available seats; deciding on an
itinerary; booking seats on each of the flights of the itinerary; entering passenger
details; making payment). Database designers thought that it would be neat if that
entire process was one transaction so that it could be committed atomically.
Unfortunately, humans are very slow to make up their minds and respond. If a data‐
base transaction needs to wait for input from a user, the database needs to support a
potentially huge number of concurrent transactions, most of them idle. Most data‐
bases cannot do that efficiently, and so almost all OLTP applications keep transac‐
tions short by avoiding interactively waiting for a user within a transaction. On the
web, this means that a transaction is committed within the same HTTP request—a
transaction does not span multiple requests. A new HTTP request starts a new trans‐
action.
Even though the human has been taken out of the critical path, transactions have
continued to be executed in an interactive client/server style, one statement at a time.
Serializability 
| 
253
