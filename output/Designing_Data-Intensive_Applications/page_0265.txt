viii. It is possible, albeit fairly complicated, to express the editing of a text document as a stream of atomic
mutations. See “Automatic Conflict Resolution” on page 174 for some pointers.
There are several other interesting kinds of conflicts that can occur between concur‐
rently writing transactions. The best known of these is the lost update problem, illus‐
trated in Figure 7-1 with the example of two concurrent counter increments.
The lost update problem can occur if an application reads some value from the data‐
base, modifies it, and writes back the modified value (a read-modify-write cycle). If
two transactions do this concurrently, one of the modifications can be lost, because
the second write does not include the first modification. (We sometimes say that the
later write clobbers the earlier write.) This pattern occurs in various different
scenarios:
• Incrementing a counter or updating an account balance (requires reading the
current value, calculating the new value, and writing back the updated value)
• Making a local change to a complex value, e.g., adding an element to a list within
a JSON document (requires parsing the document, making the change, and writ‐
ing back the modified document)
• Two users editing a wiki page at the same time, where each user saves their
changes by sending the entire page contents to the server, overwriting whatever
is currently in the database
Because this is such a common problem, a variety of solutions have been developed.
Atomic write operations
Many databases provide atomic update operations, which remove the need to imple‐
ment read-modify-write cycles in application code. They are usually the best solution
if your code can be expressed in terms of those operations. For example, the follow‐
ing instruction is concurrency-safe in most relational databases:
UPDATE counters SET value = value + 1 WHERE key = 'foo';
Similarly, document databases such as MongoDB provide atomic operations for
making local modifications to a part of a JSON document, and Redis provides atomic
operations for modifying data structures such as priority queues. Not all writes can
easily be expressed in terms of atomic operations—for example, updates to a wiki
page involve arbitrary text editingviii—but in situations where atomic operations can
be used, they are usually the best choice.
Atomic operations are usually implemented by taking an exclusive lock on the object
when it is read so that no other transaction can read it until the update has been
Weak Isolation Levels 
| 
243
