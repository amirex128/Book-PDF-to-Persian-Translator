For example, LinkedIn’s Espresso uses Helix [31] for cluster management (which in
turn relies on ZooKeeper), implementing a routing tier as shown in Figure 6-8.
HBase, SolrCloud, and Kafka also use ZooKeeper to track partition assignment.
MongoDB has a similar architecture, but it relies on its own config server implemen‐
tation and mongos daemons as the routing tier.
Cassandra and Riak take a different approach: they use a gossip protocol among the
nodes to disseminate any changes in cluster state. Requests can be sent to any node,
and that node forwards them to the appropriate node for the requested partition
(approach 1 in Figure 6-7). This model puts more complexity in the database nodes
but avoids the dependency on an external coordination service such as ZooKeeper.
Couchbase does not rebalance automatically, which simplifies the design. Normally it
is configured with a routing tier called moxi, which learns about routing changes
from the cluster nodes [32].
When using a routing tier or when sending requests to a random node, clients still
need to find the IP addresses to connect to. These are not as fast-changing as the
assignment of partitions to nodes, so it is often sufficient to use DNS for this purpose.
Parallel Query Execution
So far we have focused on very simple queries that read or write a single key (plus
scatter/gather queries in the case of document-partitioned secondary indexes). This is
about the level of access supported by most NoSQL distributed datastores.
However, massively parallel processing (MPP) relational database products, often
used for analytics, are much more sophisticated in the types of queries they support.
A typical data warehouse query contains several join, filtering, grouping, and aggre‐
gation operations. The MPP query optimizer breaks this complex query into a num‐
ber of execution stages and partitions, many of which can be executed in parallel on
different nodes of the database cluster. Queries that involve scanning over large parts
of the dataset particularly benefit from such parallel execution.
Fast parallel execution of data warehouse queries is a specialized topic, and given the
business importance of analytics, it receives a lot of commercial interest. We will dis‐
cuss some techniques for parallel query execution in Chapter 10. For a more detailed
overview of techniques used in parallel databases, please see the references [1, 33]. 
Summary
In this chapter we explored different ways of partitioning a large dataset into smaller
subsets. Partitioning is necessary when you have so much data that storing and pro‐
cessing it on a single machine is no longer feasible.
216 
| 
Chapter 6: Partitioning
