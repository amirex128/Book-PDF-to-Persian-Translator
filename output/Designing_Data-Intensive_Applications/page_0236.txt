Such automation can be dangerous in combination with automatic failure detection.
For example, say one node is overloaded and is temporarily slow to respond to
requests. The other nodes conclude that the overloaded node is dead, and automati‐
cally rebalance the cluster to move load away from it. This puts additional load on the
overloaded node, other nodes, and the network—making the situation worse and
potentially causing a cascading failure.
For that reason, it can be a good thing to have a human in the loop for rebalancing.
It’s slower than a fully automatic process, but it can help prevent operational
surprises. 
Request Routing
We have now partitioned our dataset across multiple nodes running on multiple
machines. But there remains an open question: when a client wants to make a
request, how does it know which node to connect to? As partitions are rebalanced,
the assignment of partitions to nodes changes. Somebody needs to stay on top of
those changes in order to answer the question: if I want to read or write the key “foo”,
which IP address and port number do I need to connect to?
This is an instance of a more general problem called service discovery, which isn’t
limited to just databases. Any piece of software that is accessible over a network has
this problem, especially if it is aiming for high availability (running in a redundant
configuration on multiple machines). Many companies have written their own in-
house service discovery tools, and many of these have been released as open source
[30].
On a high level, there are a few different approaches to this problem (illustrated in
Figure 6-7):
1. Allow clients to contact any node (e.g., via a round-robin load balancer). If that
node coincidentally owns the partition to which the request applies, it can handle
the request directly; otherwise, it forwards the request to the appropriate node,
receives the reply, and passes the reply along to the client.
2. Send all requests from clients to a routing tier first, which determines the node
that should handle each request and forwards it accordingly. This routing tier
does not itself handle any requests; it only acts as a partition-aware load balancer.
3. Require that clients be aware of the partitioning and the assignment of partitions
to nodes. In this case, a client can connect directly to the appropriate node,
without any intermediary.
In all cases, the key problem is: how does the component making the routing decision
(which may be one of the nodes, or the routing tier, or the client) learn about changes
in the assignment of partitions to nodes?
214 
| 
Chapter 6: Partitioning
