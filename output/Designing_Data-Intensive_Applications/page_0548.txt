performance and operational robustness. We achieved this integrity through a com‐
bination of mechanisms:
• Representing the content of the write operation as a single message, which can
easily be written atomically—an approach that fits very well with event sourcing
(see “Event Sourcing” on page 457)
• Deriving all other state updates from that single message using deterministic der‐
ivation functions, similarly to stored procedures (see “Actual Serial Execution”
on page 252 and “Application code as a derivation function” on page 505)
• Passing a client-generated request ID through all these levels of processing, ena‐
bling end-to-end duplicate suppression and idempotence
• Making messages immutable and allowing derived data to be reprocessed from
time to time, which makes it easier to recover from bugs (see “Advantages of
immutable events” on page 460)
This combination of mechanisms seems to me a very promising direction for build‐
ing fault-tolerant applications in the future. 
Loosely interpreted constraints
As discussed previously, enforcing a uniqueness constraint requires consensus, typi‐
cally implemented by funneling all events in a particular partition through a single
node. This limitation is unavoidable if we want the traditional form of uniqueness
constraint, and stream processing cannot avoid it.
However, another thing to realize is that many real applications can actually get away
with much weaker notions of uniqueness:
• If two people concurrently register the same username or book the same seat,
you can send one of them a message to apologize, and ask them to choose a dif‐
ferent one. This kind of change to correct a mistake is called a compensating
transaction [59, 60].
• If customers order more items than you have in your warehouse, you can order
in more stock, apologize to customers for the delay, and offer them a discount.
This is actually the same as what you’d have to do if, say, a forklift truck ran over
some of the items in your warehouse, leaving you with fewer items in stock than
you thought you had [61]. Thus, the apology workflow already needs to be part
of your business processes anyway, and so it might be unnecessary to require a
linearizable constraint on the number of items in stock.
• Similarly, many airlines overbook airplanes in the expectation that some passen‐
gers will miss their flight, and many hotels overbook rooms, expecting that some
guests will cancel. In these cases, the constraint of “one person per seat” is delib‐
526 
| 
Chapter 12: The Future of Data Systems
