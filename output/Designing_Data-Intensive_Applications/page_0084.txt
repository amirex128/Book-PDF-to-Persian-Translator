In rules, words that start with an uppercase letter are variables, and predicates are
matched like in Cypher and SPARQL. For example, name(Location, Name) matches
the triple name(namerica, 'North America') with variable bindings Location =
namerica and Name = 'North America'.
A rule applies if the system can find a match for all predicates on the righthand side
of the :- operator. When the rule applies, itâ€™s as though the lefthand side of the :-
was added to the database (with variables replaced by the values they matched).
One possible way of applying the rules is thus:
1. name(namerica, 'North America') exists in the database, so rule 1 applies. It
generates within_recursive(namerica, 'North America').
2. within(usa, namerica) exists in the database and the previous step generated
within_recursive(namerica, 'North America'), so rule 2 applies. It generates
within_recursive(usa, 'North America').
3. within(idaho, usa) exists in the database and the previous step generated
within_recursive(usa, 'North America'), so rule 2 applies. It generates
within_recursive(idaho, 'North America').
By repeated application of rules 1 and 2, the within_recursive predicate can tell us
all the locations in North America (or any other location name) contained in our
database. This process is illustrated in Figure 2-6.
Figure 2-6. Determining that Idaho is in North America, using the Datalog rules from
Example 2-11.
Now rule 3 can find people who were born in some location BornIn and live in some
location LivingIn. By querying with BornIn = 'United States' and LivingIn =
'Europe', and leaving the person as a variable Who, we ask the Datalog system to find
out which values can appear for the variable Who. So, finally we get the same answer as
in the earlier Cypher and SPARQL queries.
62 
| 
Chapter 2: Data Models and Query Languages
