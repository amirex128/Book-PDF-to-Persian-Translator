Of course, if all nodes crash and none of them are running, then it is not possible for
any algorithm to decide anything. There is a limit to the number of failures that an
algorithm can tolerate: in fact, it can be proved that any consensus algorithm requires
at least a majority of nodes to be functioning correctly in order to assure termination
[67]. That majority can safely form a quorum (see “Quorums for reading and writ‐
ing” on page 179).
Thus, the termination property is subject to the assumption that fewer than half of
the nodes are crashed or unreachable. However, most implementations of consensus
ensure that the safety properties—agreement, integrity, and validity—are always met,
even if a majority of nodes fail or there is a severe network problem [92]. Thus, a
large-scale outage can stop the system from being able to process requests, but it can‐
not corrupt the consensus system by causing it to make invalid decisions.
Most consensus algorithms assume that there are no Byzantine faults, as discussed in
“Byzantine Faults” on page 304. That is, if a node does not correctly follow the proto‐
col (for example, if it sends contradictory messages to different nodes), it may break
the safety properties of the protocol. It is possible to make consensus robust against
Byzantine faults as long as fewer than one-third of the nodes are Byzantine-faulty [25,
93], but we don’t have space to discuss those algorithms in detail in this book.
Consensus algorithms and total order broadcast
The best-known fault-tolerant consensus algorithms are Viewstamped Replication
(VSR) [94, 95], Paxos [96, 97, 98, 99], Raft [22, 100, 101], and Zab [15, 21, 102]. There
are quite a few similarities between these algorithms, but they are not the same [103].
In this book we won’t go into full details of the different algorithms: it’s sufficient to
be aware of some of the high-level ideas that they have in common, unless you’re
implementing a consensus system yourself (which is probably not advisable—it’s
hard [98, 104]).
Most of these algorithms actually don’t directly use the formal model described here
(proposing and deciding on a single value, while satisfying the agreement, integrity,
validity, and termination properties). Instead, they decide on a sequence of values,
which makes them total order broadcast algorithms, as discussed previously in this
chapter (see “Total Order Broadcast” on page 348).
Remember that total order broadcast requires messages to be delivered exactly once,
in the same order, to all nodes. If you think about it, this is equivalent to performing
several rounds of consensus: in each round, nodes propose the message that they
want to send next, and then decide on the next message to be delivered in the total
order [67].
So, total order broadcast is equivalent to repeated rounds of consensus (each consen‐
sus decision corresponding to one message delivery):
366 
| 
Chapter 9: Consistency and Consensus
