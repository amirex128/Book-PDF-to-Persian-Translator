leader and one synchronous follower. This configuration is sometimes also called
semi-synchronous [7].
Often, leader-based replication is configured to be completely asynchronous. In this
case, if the leader fails and is not recoverable, any writes that have not yet been repli‐
cated to followers are lost. This means that a write is not guaranteed to be durable,
even if it has been confirmed to the client. However, a fully asynchronous configura‐
tion has the advantage that the leader can continue processing writes, even if all of its
followers have fallen behind.
Weakening durability may sound like a bad trade-off, but asynchronous replication is
nevertheless widely used, especially if there are many followers or if they are geo‐
graphically distributed. We will return to this issue in “Problems with Replication
Lag” on page 161.
Research on Replication
It can be a serious problem for asynchronously replicated systems to lose data if the
leader fails, so researchers have continued investigating replication methods that do
not lose data but still provide good performance and availability. For example, chain
replication [8, 9] is a variant of synchronous replication that has been successfully
implemented in a few systems such as Microsoft Azure Storage [10, 11].
There is a strong connection between consistency of replication and consensus (get‐
ting several nodes to agree on a value), and we will explore this area of theory in more
detail in Chapter 9. In this chapter we will concentrate on the simpler forms of repli‐
cation that are most commonly used in databases in practice. 
Setting Up New Followers
From time to time, you need to set up new followers—perhaps to increase the num‐
ber of replicas, or to replace failed nodes. How do you ensure that the new follower
has an accurate copy of the leader’s data?
Simply copying data files from one node to another is typically not sufficient: clients
are constantly writing to the database, and the data is always in flux, so a standard file
copy would see different parts of the database at different points in time. The result
might not make any sense.
You could make the files on disk consistent by locking the database (making it
unavailable for writes), but that would go against our goal of high availability. Fortu‐
nately, setting up a follower can usually be done without downtime. Conceptually,
the process looks like this:
Leaders and Followers 
| 
155
