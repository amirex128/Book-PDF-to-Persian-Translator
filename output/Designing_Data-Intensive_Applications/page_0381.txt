Figure 9-10. The coordinator crashes after participants vote “yes.” Database 1 does not
know whether to commit or abort.
Without hearing from the coordinator, the participant has no way of knowing
whether to commit or abort. In principle, the participants could communicate among
themselves to find out how each participant voted and come to some agreement, but
that is not part of the 2PC protocol.
The only way 2PC can complete is by waiting for the coordinator to recover. This is
why the coordinator must write its commit or abort decision to a transaction log on
disk before sending commit or abort requests to participants: when the coordinator
recovers, it determines the status of all in-doubt transactions by reading its transac‐
tion log. Any transactions that don’t have a commit record in the coordinator’s log
are aborted. Thus, the commit point of 2PC comes down to a regular single-node
atomic commit on the coordinator. 
Three-phase commit
Two-phase commit is called a blocking atomic commit protocol due to the fact that
2PC can become stuck waiting for the coordinator to recover. In theory, it is possible
to make an atomic commit protocol nonblocking, so that it does not get stuck if a
node fails. However, making this work in practice is not so straightforward.
As an alternative to 2PC, an algorithm called three-phase commit (3PC) has been pro‐
posed [13, 80]. However, 3PC assumes a network with bounded delay and nodes with
bounded response times; in most practical systems with unbounded network delay
and process pauses (see Chapter 8), it cannot guarantee atomicity.
In general, nonblocking atomic commit requires a perfect failure detector [67, 71]—
i.e., a reliable mechanism for telling whether a node has crashed or not. In a network
with unbounded delay a timeout is not a reliable failure detector, because a request
may time out due to a network problem even if no node has crashed. For this reason,
2PC continues to be used, despite the known problem with coordinator failure. 
Distributed Transactions and Consensus 
| 
359
