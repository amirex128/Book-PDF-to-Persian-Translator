Figure 11-3. Producers send messages by appending them to a topic-partition file, and
consumers read these files sequentially.
Apache Kafka [17, 18], Amazon Kinesis Streams [19], and Twitter’s DistributedLog
[20, 21] are log-based message brokers that work like this. Google Cloud Pub/Sub is
architecturally similar but exposes a JMS-style API rather than a log abstraction [16].
Even though these message brokers write all messages to disk, they are able to achieve
throughput of millions of messages per second by partitioning across multiple
machines, and fault tolerance by replicating messages [22, 23].
Logs compared to traditional messaging
The log-based approach trivially supports fan-out messaging, because several con‐
sumers can independently read the log without affecting each other—reading a mes‐
sage does not delete it from the log. To achieve load balancing across a group of
consumers, instead of assigning individual messages to consumer clients, the broker
can assign entire partitions to nodes in the consumer group.
Each client then consumes all the messages in the partitions it has been assigned.
Typically, when a consumer has been assigned a log partition, it reads the messages in
the partition sequentially, in a straightforward single-threaded manner. This coarse-
grained load balancing approach has some downsides:
448 
| 
Chapter 11: Stream Processing
