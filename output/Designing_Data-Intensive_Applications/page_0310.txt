v. Although the clock is called real-time, it has nothing to do with real-time operating systems, as discussed
in “Response time guarantees” on page 298.
slower than on other machines. It is possible to synchronize clocks to some degree:
the most commonly used mechanism is the Network Time Protocol (NTP), which
allows the computer clock to be adjusted according to the time reported by a group of
servers [37]. The servers in turn get their time from a more accurate time source,
such as a GPS receiver.
Monotonic Versus Time-of-Day Clocks
Modern computers have at least two different kinds of clocks: a time-of-day clock and
a monotonic clock. Although they both measure time, it is important to distinguish
the two, since they serve different purposes.
Time-of-day clocks
A time-of-day clock does what you intuitively expect of a clock: it returns the current
date and time according to some calendar (also known as wall-clock time). For exam‐
ple, clock_gettime(CLOCK_REALTIME) on Linuxv and System.currentTimeMillis()
in Java return the number of seconds (or milliseconds) since the epoch: midnight
UTC on January 1, 1970, according to the Gregorian calendar, not counting leap sec‐
onds. Some systems use other dates as their reference point.
Time-of-day clocks are usually synchronized with NTP, which means that a time‐
stamp from one machine (ideally) means the same as a timestamp on another
machine. However, time-of-day clocks also have various oddities, as described in the
next section. In particular, if the local clock is too far ahead of the NTP server, it may
be forcibly reset and appear to jump back to a previous point in time. These jumps, as
well as the fact that they often ignore leap seconds, make time-of-day clocks unsuita‐
ble for measuring elapsed time [38].
Time-of-day clocks have also historically had quite a coarse-grained resolution, e.g.,
moving forward in steps of 10 ms on older Windows systems [39]. On recent sys‐
tems, this is less of a problem.
Monotonic clocks
A monotonic clock is suitable for measuring a duration (time interval), such as a
timeout or a service’s response time: clock_gettime(CLOCK_MONOTONIC) on Linux
and System.nanoTime() in Java are monotonic clocks, for example. The name comes
from the fact that they are guaranteed to always move forward (whereas a time-of-
day clock may jump back in time).
288 
| 
Chapter 8: The Trouble with Distributed Systems
