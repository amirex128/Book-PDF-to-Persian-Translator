required for maintaining state in stream processors, and in order to serve queries for
the output of batch and stream processors (see “The Output of Batch Workflows” on
page 411 and “Processing Streams” on page 464). Specialized query engines will con‐
tinue to be important for particular workloads: for example, query engines in MPP
data warehouses are optimized for exploratory analytic queries and handle this kind
of workload very well (see “Comparing Hadoop to Distributed Databases” on page
414).
The complexity of running several different pieces of infrastructure can be a problem:
each piece of software has a learning curve, configuration issues, and operational
quirks, and so it is worth deploying as few moving parts as possible. A single integra‐
ted software product may also be able to achieve better and more predictable perfor‐
mance on the kinds of workloads for which it is designed, compared to a system
consisting of several tools that you have composed with application code [23]. As I
said in the Preface, building for scale that you don’t need is wasted effort and may
lock you into an inflexible design. In effect, it is a form of premature optimization.
The goal of unbundling is not to compete with individual databases on performance
for particular workloads; the goal is to allow you to combine several different data‐
bases in order to achieve good performance for a much wider range of workloads
than is possible with a single piece of software. It’s about breadth, not depth—in the
same vein as the diversity of storage and processing models that we discussed in
“Comparing Hadoop to Distributed Databases” on page 414.
Thus, if there is a single technology that does everything you need, you’re most likely
best off simply using that product rather than trying to reimplement it yourself from
lower-level components. The advantages of unbundling and composition only come
into the picture when there is no single piece of software that satisfies all your
requirements.
What’s missing?
The tools for composing data systems are getting better, but I think one major part is
missing: we don’t yet have the unbundled-database equivalent of the Unix shell (i.e., a
high-level language for composing storage and processing systems in a simple and
declarative way).
For example, I would love it if we could simply declare mysql | elasticsearch, by
analogy to Unix pipes [22], which would be the unbundled equivalent of CREATE
INDEX: it would take all the documents in a MySQL database and index them in an
Elasticsearch cluster. It would then continually capture all the changes made to the
database and automatically apply them to the search index, without us having to
write custom application code. This kind of integration should be possible with
almost any kind of storage or indexing system.
Unbundling Databases 
| 
503
