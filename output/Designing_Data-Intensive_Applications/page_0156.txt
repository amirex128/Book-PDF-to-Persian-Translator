The problems with remote procedure calls (RPCs)
Web services are merely the latest incarnation of a long line of technologies for mak‐
ing API requests over a network, many of which received a lot of hype but have seri‐
ous problems. Enterprise JavaBeans (EJB) and Java’s Remote Method Invocation
(RMI) are limited to Java. The Distributed Component Object Model (DCOM) is
limited to Microsoft platforms. The Common Object Request Broker Architecture
(CORBA) is excessively complex, and does not provide backward or forward compat‐
ibility [41].
All of these are based on the idea of a remote procedure call (RPC), which has been
around since the 1970s [42]. The RPC model tries to make a request to a remote net‐
work service look the same as calling a function or method in your programming lan‐
guage, within the same process (this abstraction is called location transparency).
Although RPC seems convenient at first, the approach is fundamentally flawed [43,
44]. A network request is very different from a local function call: 
• A local function call is predictable and either succeeds or fails, depending only on
parameters that are under your control. A network request is unpredictable: the
request or response may be lost due to a network problem, or the remote
machine may be slow or unavailable, and such problems are entirely outside of
your control. Network problems are common, so you have to anticipate them,
for example by retrying a failed request.
• A local function call either returns a result, or throws an exception, or never
returns (because it goes into an infinite loop or the process crashes). A network
request has another possible outcome: it may return without a result, due to a
timeout. In that case, you simply don’t know what happened: if you don’t get a
response from the remote service, you have no way of knowing whether the
request got through or not. (We discuss this issue in more detail in Chapter 8.)
• If you retry a failed network request, it could happen that the requests are
actually getting through, and only the responses are getting lost. In that case,
retrying will cause the action to be performed multiple times, unless you build a
mechanism for deduplication (idempotence) into the protocol. Local function
calls don’t have this problem. (We discuss idempotence in more detail in Chap‐
ter 11.)
• Every time you call a local function, it normally takes about the same time to exe‐
cute. A network request is much slower than a function call, and its latency is
also wildly variable: at good times it may complete in less than a millisecond, but
when the network is congested or the remote service is overloaded it may take
many seconds to do exactly the same thing.
• When you call a local function, you can efficiently pass it references (pointers) to
objects in local memory. When you make a network request, all those parameters
134 
| 
Chapter 4: Encoding and Evolution
