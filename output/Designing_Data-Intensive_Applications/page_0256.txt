v. Some databases support an even weaker isolation level called read uncommitted. It prevents dirty writes,
but does not prevent dirty reads.
251). Our discussion of isolation levels will be informal, using examples. If you want
rigorous definitions and analyses of their properties, you can find them in the aca‐
demic literature [28, 29, 30].
Read Committed
The most basic level of transaction isolation is read committed.v It makes two guaran‐
tees:
1. When reading from the database, you will only see data that has been committed
(no dirty reads).
2. When writing to the database, you will only overwrite data that has been com‐
mitted (no dirty writes).
Let’s discuss these two guarantees in more detail.
No dirty reads
Imagine a transaction has written some data to the database, but the transaction has
not yet committed or aborted. Can another transaction see that uncommitted data? If
yes, that is called a dirty read [2].
Transactions running at the read committed isolation level must prevent dirty reads.
This means that any writes by a transaction only become visible to others when that
transaction commits (and then all of its writes become visible at once). This is illus‐
trated in Figure 7-4, where user 1 has set x = 3, but user 2’s get x still returns the old
value, 2, while user 1 has not yet committed.
Figure 7-4. No dirty reads: user 2 sees the new value for x only after user 1’s transaction
has committed.
234 
| 
Chapter 7: Transactions
