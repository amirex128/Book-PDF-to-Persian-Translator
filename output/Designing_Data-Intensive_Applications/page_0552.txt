in some way, for example using a weak isolation level unsafely, the integrity of the
database cannot be guaranteed.
Don’t just blindly trust what they promise
With both hardware and software not always living up to the ideal that we would like
them to be, it seems that data corruption is inevitable sooner or later. Thus, we
should at least have a way of finding out if data has been corrupted so that we can fix
it and try to track down the source of the error. Checking the integrity of data is
known as auditing.
As discussed in “Advantages of immutable events” on page 460, auditing is not just
for financial applications. However, auditability is highly important in finance pre‐
cisely because everyone knows that mistakes happen, and we all recognize the need to
be able to detect and fix problems.
Mature systems similarly tend to consider the possibility of unlikely things going
wrong, and manage that risk. For example, large-scale storage systems such as HDFS
and Amazon S3 do not fully trust disks: they run background processes that continu‐
ally read back files, compare them to other replicas, and move files from one disk to
another, in order to mitigate the risk of silent corruption [67].
If you want to be sure that your data is still there, you have to actually read it and
check. Most of the time it will still be there, but if it isn’t, you really want to find out
sooner rather than later. By the same argument, it is important to try restoring from
your backups from time to time—otherwise you may only find out that your backup
is broken when it is too late and you have already lost data. Don’t just blindly trust
that it is all working.
A culture of verification
Systems like HDFS and S3 still have to assume that disks work correctly most of the
time—which is a reasonable assumption, but not the same as assuming that they
always work correctly. However, not many systems currently have this kind of “trust,
but verify” approach of continually auditing themselves. Many assume that correct‐
ness guarantees are absolute and make no provision for the possibility of rare data
corruption. I hope that in the future we will see more self-validating or self-auditing
systems that continually check their own integrity, rather than relying on blind trust
[68].
I fear that the culture of ACID databases has led us toward developing applications
on the basis of blindly trusting technology (such as a transaction mechanism), and
neglecting any sort of auditability in the process. Since the technology we trusted
worked well enough most of the time, auditing mechanisms were not deemed worth
the investment.
530 
| 
Chapter 12: The Future of Data Systems
