x. In a formal sense, a linearizable read-write register is an “easier” problem. Total order broadcast is equiva‐
lent to consensus [67], which has no deterministic solution in the asynchronous crash-stop model [68],
whereas a linearizable read-write register can be implemented in the same system model [23, 24, 25]. How‐
ever, supporting atomic operations such as compare-and-set or increment-and-get in a register makes it
equivalent to consensus [28]. Thus, the problems of consensus and a linearizable register are closely related.
xi. If you don’t wait, but acknowledge the write immediately after it has been enqueued, you get something
similar to the memory consistency model of multi-core x86 processors [43]. That model is neither lineariza‐
ble nor sequentially consistent.
Implementing linearizable storage using total order broadcast
As illustrated in Figure 9-4, in a linearizable system there is a total order of opera‐
tions. Does that mean linearizability is the same as total order broadcast? Not quite,
but there are close links between the two.x 
Total order broadcast is asynchronous: messages are guaranteed to be delivered relia‐
bly in a fixed order, but there is no guarantee about when a message will be delivered
(so one recipient may lag behind the others). By contrast, linearizability is a recency
guarantee: a read is guaranteed to see the latest value written.
However, if you have total order broadcast, you can build linearizable storage on top
of it. For example, you can ensure that usernames uniquely identify user accounts.
Imagine that for every possible username, you can have a linearizable register with an
atomic compare-and-set operation. Every register initially has the value null (indi‐
cating that the username is not taken). When a user wants to create a username, you
execute a compare-and-set operation on the register for that username, setting it to
the user account ID, under the condition that the previous register value is null. If
multiple users try to concurrently grab the same username, only one of the compare-
and-set operations will succeed, because the others will see a value other than null
(due to linearizability).
You can implement such a linearizable compare-and-set operation as follows by
using total order broadcast as an append-only log [62, 63]:
1. Append a message to the log, tentatively indicating the username you want to
claim.
2. Read the log, and wait for the message you appended to be delivered back to
you.xi
3. Check for any messages claiming the username that you want. If the first message
for your desired username is your own message, then you are successful: you can
commit the username claim (perhaps by appending another message to the log)
and acknowledge it to the client. If the first message for your desired username is
from another user, you abort the operation.
350 
| 
Chapter 9: Consistency and Consensus
