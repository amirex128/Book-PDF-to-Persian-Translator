functions must document their worst-case execution times; dynamic memory alloca‐
tion may be restricted or disallowed entirely (real-time garbage collectors exist, but
the application must still ensure that it doesn’t give the GC too much work to do);
and an enormous amount of testing and measurement must be done to ensure that
guarantees are being met.
All of this requires a large amount of additional work and severely restricts the range
of programming languages, libraries, and tools that can be used (since most lan‐
guages and tools do not provide real-time guarantees). For these reasons, developing
real-time systems is very expensive, and they are most commonly used in safety-
critical embedded devices. Moreover, “real-time” is not the same as “high-
performance”—in fact, real-time systems may have lower throughput, since they
have to prioritize timely responses above all else (see also “Latency and Resource Uti‐
lization” on page 286).
For most server-side data processing systems, real-time guarantees are simply not
economical or appropriate. Consequently, these systems must suffer the pauses and
clock instability that come from operating in a non-real-time environment.
Limiting the impact of garbage collection
The negative effects of process pauses can be mitigated without resorting to expen‐
sive real-time scheduling guarantees. Language runtimes have some flexibility
around when they schedule garbage collections, because they can track the rate of
object allocation and the remaining free memory over time.
An emerging idea is to treat GC pauses like brief planned outages of a node, and to
let other nodes handle requests from clients while one node is collecting its garbage.
If the runtime can warn the application that a node soon requires a GC pause, the
application can stop sending new requests to that node, wait for it to finish process‐
ing outstanding requests, and then perform the GC while no requests are in progress.
This trick hides GC pauses from clients and reduces the high percentiles of response
time [70, 71]. Some latency-sensitive financial trading systems [72] use this approach.
A variant of this idea is to use the garbage collector only for short-lived objects
(which are fast to collect) and to restart processes periodically, before they accumu‐
late enough long-lived objects to require a full GC of long-lived objects [65, 73]. One
node can be restarted at a time, and traffic can be shifted away from the node before
the planned restart, like in a rolling upgrade (see Chapter 4).
These measures cannot fully prevent garbage collection pauses, but they can usefully
reduce their impact on the application. 
Unreliable Clocks 
| 
299
