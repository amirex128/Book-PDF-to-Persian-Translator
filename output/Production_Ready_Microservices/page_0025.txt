to first divide the realms of responsibility and then determine which tasks developers
need to be able to accomplish in order to design, build, and maintain their services.
Within a company that has adopted microservice architecture, responsibilities need
to be carefully delegated to different engineering teams. An easy way to do this is to
create an engineering suborganization for each layer of the microservice ecosystem,
along with other teams that bridge each layer. Each of these engineering organiza‐
tions, functioning semi-independently, will be responsible for everything within their
layer: TechOps teams will be responsible for layer 1, infrastructure teams will be
responsible for layer 2, application platform teams will be responsible for layer 3, and
microservice teams will be responsible for layer 4 (this is, of course, a very simplified
view, but you get the general idea).
Within this organizational scheme, any time that an engineer working on one of the
higher layers needs to set up, configure, or utilize something on one of the lower lay‐
ers, there should be a self-service tool in place that the engineer can use. For example,
the team working on messaging for the ecosystem should build a self-service tool so
that if a developer on a microservice team needs to configure messaging for her ser‐
vice, she can easily configure the messaging without having to understand all of the
intricacies of the messaging system.
There are many reasons to have these centralized, self-service tools in place for each
layer. In a diverse microservice ecosystem, the average engineer on any given team
will have no (or very little) knowledge of how the services and systems in other teams
work, and there is simply no way they could become experts in each service and sys‐
tem while working on their own—it simply can’t be done. Each individual developer
will know almost nothing except her own service, but together, all of the developers
working within the ecosystem will collectively know everything. Rather than trying to
educate each developer about the intricacies of each tool and service within the eco‐
system, build sustainable, easy-to-use user interfaces for every part of the ecosystem,
and then educate and train them on how to use those. Turn everything into a black
box, and document exactly how it works and how to use it.
The second reason to build these tools and build them well is that, in all honesty, you
do not want a developer from another team to be able to make significant changes to
your service or system, especially not one that could cause an outage. This is espe‐
cially true and compelling for services and systems belonging to the lower layers
(layer 1, layer 2, and layer 3). Allowing nonexperts to make changes to things within
these layers, or requiring (or worse, expecting) them to become experts in these areas
is a recipe for disaster. An example of where this can go terribly wrong is in configu‐
ration management: allowing developers on microservice teams to make changes to
system configurations without having the expertise to do so can and will lead to
large-scale production outages if a change is made that affects something other than
their service alone.
The Microservice Ecosystem 
| 
17
