requiring developers to individually follow each audit step, make tasks and lists and
roadmaps and check off individual requirement boxes. Manual work like this often
gets put on the back burner to join the rest of the technical debt, even in the most
productive and production-readiness driven teams.
One of the key principles of software engineering in practice is this: if you have to do
something manually more than once, automate it so that you never have to do it
again. This applies to operational work, it applies to any one-off, ad hoc situations
and anything you need to type into a terminal, and not surprisingly, it applies to
enforcing production-readiness standards across an engineering organization. Auto‐
mation is the best onion you can give to your development teams.
It’s easy to make a list of the production-readiness requirements for every microser‐
vice. I’ve done it myself at Uber, I’ve seen other developers implement the very same
production-readiness standards in this book at their own companies, and I’ve created
a template checklist (Appendix A, Production-Readiness Checklist) that you, the
reader, can use. A list like this makes automating the checklist rather easy. For exam‐
ple, to check for fault tolerance and catastrophe-preparedness, you can run automa‐
ted checks to ensure that the proper resiliency tests are in place, are running, and that
each microservice passes the tests with flying colors.
The difficulty in automating each of these production-readiness checks will depend
entirely on the complexity of your internal services within each layer of the microser‐
vice ecosystem. If all microservices and self-service tools have decent APIs, automa‐
tion is a breeze. If your services have trouble communicating, or if any self-service
internal tools are finicky or poorly written, you’re going to have a bad time (and not
just with production-readiness, but with the integrity of your service and the entire
microservice ecosystem).
Automating production-readiness increases organizational understanding in several
extremely important and effective ways. If you automate these checks and run them
constantly, teams in the organization will always know where each microservice
stands. Publicize these results internally, give each microservice a production-
readiness score measuring how production-ready their service is, require business-
critical services to have a high minimum production-readiness score, and gate
deployments. Production-readiness can be made part of the engineering culture, and
this is one surefire way you can accomplish that.
Evaluate Your Microservice
Now that you have a better understanding of documentation, use the following list of
questions to assess the production-readiness of your microservice(s) and microser‐
vice ecosystem. The questions are organized by topic, and correspond to the sections
within this chapter.
Evaluate Your Microservice 
| 
73
