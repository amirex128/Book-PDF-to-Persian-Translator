From Monoliths to Microservices
Almost every software application written today can be broken into three distinct ele‐
ments: a frontend (or client-side) piece, a backend piece, and some type of datastore
(Figure 1-1). Requests are made to the application through the client-side piece, the
backend code does all the heavy lifting, and any relevant data that needs to be stored
or accessed (whether temporarily in memory of permanently in a database) is sent to
or retrieved from wherever the data is stored. We’ll call this the three-tier architecture.
Figure 1-1. Three-tier architecture
There are three different ways these elements can be combined to make an applica‐
tion. Most applications put the first two pieces into one codebase (or repository),
where all client-side and backend code are stored and run as one executable file, with
a separate database. Others separate out all frontend, client-side code from the back‐
end code and store them as separate logical executables, accompanied by an external
database. Applications that don’t require an external database and store all data in
memory tend to combine all three elements into one repository. Regardless of the
way these elements are divided or combined, the application itself is considered to be
the sum of these three distinct elements.
Applications are usually architected, built, and run this way from the beginning of
their lifecycles, and the architecture of the application is typically independent of the
product offered by the company or the purpose of the application itself. These three
architectural elements that comprise the three-tier architecture are present in every
website, every phone application, every backend and frontend and strange enormous
enterprise application, and are found as one of the permutations described.
In the early stages, when a company is young, its application(s) simple, and the num‐
ber of developers contributing to the codebase is small, developers typically share the
burden of contributing to and maintaining the codebase. As the company grows,
more developers are hired, new features are added to the application, and three sig‐
nificant things happen.
First comes an increase in the operational workload. Operational work is, generally
speaking, the work associated with running and maintaining the application. This
usually leads to the hiring of operational engineers (system administrators, TechOps
engineers, and so-called “DevOps” engineers) who take over the majority of the
operational tasks, like those related to hardware, monitoring, and on call.
2 
| 
Chapter 1: Microservices
