software (and/or hardware) will ensure that the traffic is distributed (balanced) across
all of the instances. Load balancing will be needed at every location in the ecosystem
in which a request is being sent to an application, which means that any large micro‐
service ecosystem will contain many, many layers of load balancing. Commonly used
load balancers for this purpose are Amazon Web Services Elastic Load Balancer, Net‐
flix Eureka, HAProxy, and Nginx.
Summary of Layer 2: The Communication Layer
The communication layer (layer 2) of the microservice ecosystem contains:
• Network
• DNS
• Remote procedure calls (RPCs)
• Endpoints
• Messaging
• Service discovery
• Service registry
• Load balancing
Layer 3: The Application Platform
The application platform is the third layer of the microservice ecosystem and contains
all of the internal tooling and services that are independent of the microservices. This
layer is filled with centralized, ecosystem-wide tools and services that must be built in
such a way that microservice development teams do not have to design, build, or
maintain anything except their own microservices.
A good application platform is one with self-service internal tools for developers, a
standardized development process, a centralized and automated build and release sys‐
tem, automated testing, a standardized and centralized deployment solution, and cen‐
tralized logging and microservice-level monitoring. Many of the details of these
elements are covered in later chapters, but we’ll cover several of them briefly here to
provide some introduction to the basic concepts.
Self-service internal development tools
Quite a few things can be categorized as self-service internal development tools, and
which particular things fall into this category depends not only on the needs of the
developers, but the level of abstraction and sophistication of both the infrastructure
and the ecosystem as a whole. The key to determining which tools need to be built is
16 
| 
Chapter 1: Microservices
