In addition to the technical challenges that accompany this potential problem, engi‐
neering organizations are often faced with larger organizational-level and business-
relevant issues that come along for the ride: hardware resources cost quite a bit of
money, businesses and individual development teams within them have budgets to
adhere to, and these budgets (which tend to include hardware) need to be planned for
in advance. To ensure that microservices can scale properly when traffic increases, we
can perform scheduled capacity planning. The principles of capacity planning are
pretty straightforward: determine the hardware needs of each microservice in
advance, build the needs into the budget, and make sure that the required hardware is
reserved.
To determine the hardware needs of each service, we can use the growth scales (both
quantitative and qualitative), key business metrics and traffic predictions, the known
resource bottlenecks and requirements, and historical data about the microservice’s
traffic. This is where qualitative and quantitative growth scales come in especially
handy, because they allow us to figure out precisely how the scalability behavior of
our microservices relate to high-level business predictions. For example, if we know
that (1) our microservice scales with unique visitors to the overall product, (2) each
unique visitor corresponds to a certain number of requests per second made to our
microservice, and (3) that the company predicts that the product will receive 20,000
new unique visitors in the next quarter, then we’ll know exactly what our capacity
needs will be for the next quarter.
This needs to be built into the budget of each development team, each engineering
organization, and each company. Running this exercise on a scheduled basis before
budgeting is determined can help engineering organizations make sure that hardware
resources are never unavailable simply because resource budgeting wasn’t completed
or prepared for. The important thing here (from both the engineering and business
perspectives) is to recognize the cost of inadequate capacity planning: microservices
that can’t scale properly because of hardware shortages lead to decreased availability
within the entire ecosystem, which leads to outages, which costs the company money.
Lead Time for New Hardware Requests
One potential problem that’s commonly overlooked by develop‐
ment teams during the capacity planning phase is that the hard‐
ware that is needed for the microservice might not exist at the time
of planning and may need to be acquired, installed, and configured
before any microservices can run on it. Before scheduling capacity
planning, take care to find out the exact lead time needed for
acquiring new hardware in order to avoid long shortages in critical
times, and allow some room for delays in the process.
50 
| 
Chapter 4: Scalability and Performance
