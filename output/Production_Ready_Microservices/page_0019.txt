Any type of endpoint and any protocol used to communicate with other microservi‐
ces will have benefits and trade-offs. The architectural decisions here shouldn’t be
made by the individual developer who is building a microservice, but should be part
of the architectural design of the microservice ecosystem as a whole (we’ll get to this
in the next section).
Writing a microservice gives the developer a great deal of freedom: aside from any
organizational choices regarding API endpoints and communication protocols,
developers are free to write the internal workings of their microservice however they
wish. It can be written in any language whatsoever—it can be written in Go, in Java,
in Erlang, in Haskell—as long as the endpoints and communication protocols are
taken care of. Developing a microservice is not all that different from developing a
standalone application. There are some caveats to this, as we will see in the final sec‐
tion of this chapter (“Organizational Challenges” on page 20), because developer free‐
dom with regard to language choice comes at a hefty cost to the engineering
organization.
In this way, a microservice can be treated by others as a black box: you put some
information in by sending a request to one of its endpoints, and you get something
out. If you get what you want and need out of the microservice in a reasonable time
and without any crazy errors, it has done its job, and there’s no need to understand
anything further than the endpoints you need to hit and whether or not the service is
working properly.
Our discussion of the specifics of microservice architecture will end here—not
because this is all there is to microservice architecture, but because each of the follow‐
ing chapters within this book is devoted to bringing microservices to this ideal black-
box state.
The Microservice Ecosystem
Microservices do not live in isolation. The environment in which microservices are
built, are run, and interact is where they live. The complexities of the large-scale
microservice environment are on par with the ecological complexities of a rainforest,
a desert, or an ocean, and considering this environment as an ecosystem—a microser‐
vice ecosystem—is beneficial in adopting microservice architecture.
In well-designed, sustainable microservice ecosystems, the microservices are abstrac‐
ted away from all infrastructure. They are abstracted away from the hardware,
abstracted away from the networks, abstracted away from the build and deployment
pipeline, abstracted away from service discovery and load balancing. This is all part
of the infrastructure of the microservice ecosystem, and building, standardizing, and
maintaining this infrastructure in a stable, scalable, fault-tolerant, and reliable way is
essential for successful microservice operation.
The Microservice Ecosystem 
| 
11
