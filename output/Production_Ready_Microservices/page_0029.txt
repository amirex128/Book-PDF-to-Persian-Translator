and poor cross-team communication—a consequence of the inverse of Conway’s Law.
The second is the dramatic increase in technical sprawl, sprawl that is extraordinarily
costly not only to the entire organization but which also presents significant costs to
each engineer. The third trade-off is the increased ability of the system to fail. The
fourth is the competition for engineering and infrastructure resources.
The Inverse Conway’s Law
The idea behind Conway’s Law (named after programmer Melvin Conway in 1968) is
this: that the architecture of a system will be determined by the communication and
organizational structures of the company. The inverse of Conway’s Law (which we’ll
call the Inverse Conway’s Law) is also valid and is especially relevant to the microser‐
vice ecosystem: the organizational structure of a company is determined by the archi‐
tecture of its product. Over 40 years after Conway’s Law was first introduced, both it
and its inverse still appear to hold true. Microsoft’s organizational structure, if
sketched out as if it were the architecture of a system, looks remarkably like the archi‐
tecture of its products—the same goes for Google, for Amazon, and for every other
large technology company. Companies that adopt microservice architecture will
never be an exception to this rule.
Microservice architecture is comprised of a large number of small, isolated, inde‐
pendent microservices. The Inverse Conway’s Law demands that the organizational
structure of any company using microservice architecture will be made up of a large
number of very small, isolated, and independent teams. The team structures that
spring from this inevitably lead to siloing and sprawl, problems that are made worse
every time the microservice ecosystem becomes more sophisticated, more complex,
more concurrent, and more efficient.
Inverse Conway’s Law also means that developers will be, in some ways, just like
microservices: they will be able to do one thing, and (hopefully) do that one thing
very well, but they will be isolated (in responsibility, in domain knowledge, and expe‐
rience) from the rest of the ecosystem. When considered together, all of the develop‐
ers collectively working within a microservice ecosystem will know everything there is
to know about it, but individually they will be extremely specialized, knowing only
the pieces of the ecosystem they are responsible for.
This poses an unavoidable organizational problem: even though microservices must
be developed in isolation (leading to isolated, siloed teams), they don’t live in isola‐
tion and must interact with one another seamlessly if the overall product is to func‐
tion at all. This requires that these isolated, independently functioning teams work
together closely and often—something that is difficult to accomplish, given that most
team’s goals and projects (codified in their team’s objectives and key results, or OKRs)
are specific to a particular microservice they are working on.
Organizational Challenges 
| 
21
