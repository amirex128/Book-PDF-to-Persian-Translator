Once the hardware resources have been secured and dedicated to each microservice,
capacity planning is complete. Determining when and how to allocate the hardware
after the planning phase is, of course, up to each engineering organization and their
development, infrastructure, and operations teams.
Capacity planning can be a really difficult and manual task. Like most manual tasks
within engineering, it introduces new modes of failure: manual calculations can be
off, and even a small shortage can prove disastrous to business-critical services. Auto‐
mating the majority of the capacity planning process away from development and
operations teams cuts down on potential errors and failures, and a great way to
accomplish this is to build and run a capacity planning self-service tool within the
application platform layer of the microservice ecosystem.
Dependency Scaling
The scalability of a microservice’s dependencies can present a scalability problem of
its own. A microservice that is architected, built, and run to be perfectly scalable in
every way still faces scalability challenges if it’s dependencies cannot scale with it. If
even one critical dependency is unable to scale with its clients, then the entire
dependency chain suffers. Ensuring that all dependencies will scale with a microser‐
vice’s expected growth is essential for building production-ready services.
This challenge is relevant to every individual microservice and every part of the
microservice ecosystem stack, which means that microservice teams also need to
make sure that their service isn’t a scalability bottleneck for its clients. In other words,
additional complexity is introduced by the rest of the microservice ecosystem. The
inevitable additional traffic and growth from a microservice’s clients need to be pre‐
pared for.
Qualitative Growth Scales and Dependency Scalability
When dealing with incredibly complex dependency chains, making
sure that all microservice teams tie the scalability of their services
to high-level business metrics (using the qualitative growth scale) 
can make sure that all services are properly prepared for expected
growth, even when cross-team communication becomes difficult.
The problem of dependency scaling is an especially strong argument for the imple‐
mentation of scalability and performance standards across every part of the microser‐
vice ecosystem. Most microservices do not live in isolation. Nearly every single
microservice is a small part of large, intertwined, intricate dependency chains. In
most cases, scaling the entire overall product, the organization, and the ecosystem
effectively requires that each piece of the system scales together with the rest. Having
a small number of super efficient, performant, and scalable microservices in a system
Dependency Scaling 
| 
51
