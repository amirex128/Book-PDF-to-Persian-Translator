Efficient Use of Resources
When considering the scalability of large-scale distributed systems like microservice
ecosystems, one of the most useful abstractions we can make is to treat properties of
our hardware and infrastructure systems as resources. CPU, memory, data storage,
and the network are similar to resources in the natural world: they are finite, they are
physical objects in the real world, and they must be distributed and shared between
various key players in the ecosystem. As we discussed briefly in “Organizational Chal‐
lenges” on page 20, hardware resources are expensive, valuable, and sometimes rare,
which leads to fierce competition for resources within the microservice ecosystem.
The organizational challenge of resource allocation and distribution can be alleviated
by giving business-critical microservices a greater share of the resources. Resource
needs can be prioritized by categorizing various microservices within the ecosystem
according to their importance and value to the overall business: if resources are
scarce across the ecosystem, the most business-critical services can be given higher
priority with regard to resource allocation.
The technical challenge of resource allocation and distribution presents some diffi‐
culty, because many decisions need to be made about the first layer (the hardware
layer) of the microservice ecosystem. Microservices can be given dedicated hardware
so that only one service will run on each host, but this can be rather expensive and an
inefficient use of hardware resources. Many engineering organizations opt to share
hardware among multiple microservices, and each host will run several different
services—a practice that is, in most cases, a more efficient use of hardware resources.
The Dangers of Shared Hardware Resources
While running many different microservices on one machine (that
is, sharing machines between microservices) is usually a more effi‐
cient use of hardware resources, care must be taken to ensure that
the microservices are sufficiently isolated and don’t compromise
the performance, efficiency, or availability of their neighboring
microservices. Containerization (using Docker) along with
resource isolation can help prevent microservices from being
harmed by badly behaved neighbors.
One of the most effective ways to allocate and distribute hardware resources across a
microservice ecosystem is to fully abstract away the notion of a host and replace it
with hardware resources using resource abstraction technologies like Apache Mesos.
Using this level of resource abstraction allows resources to be allocated dynamically,
eliminating many of the pitfalls associated with resource allocation and distribution
in large-scale distributed systems like microservice ecosystems.
Efficient Use of Resources 
| 
47
