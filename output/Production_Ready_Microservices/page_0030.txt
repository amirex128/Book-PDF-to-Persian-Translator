There is also a large communication gap between microservice teams and infrastruc‐
ture teams that needs to be closed. Application platform teams, for example, need to
build platform services and tools that all of the microservice teams will use, but gain‐
ing the requirements and needs from hundreds of microservice teams before building
one small project can take months (even years). Getting developers and infrastruc‐
ture teams to work together is not an easy task.
There’s a related problem that arises thanks to Inverse Conway’s Law, one that is only
rarely found in companies with monolithic architecture: the difficulty of running an
operations organization. With a monolith, an operations organization can easily be
staffed and on call for the application, but this is very difficult to achieve with micro‐
service architecture because it would require every single microservice to be staffed
by both a development team and an operational team. Consequently, microservice
development teams need to be responsible for the operational duties and tasks associ‐
ated with their microservice. There is no separate ops org to take over the on call, no
separate ops org responsible for monitoring: developers will need to be on call for
their services.
Technical Sprawl
The second trade-off, technical sprawl, is related to the first. While Conway’s Law and
its inverse predict organizational sprawl and siloing for microservices, a second type
of sprawl (related to technologies, tools, and the like) is also unavoidable in microser‐
vice architecture. There are many different ways in which technical sprawl can mani‐
fest. We’ll cover a few of the most common ways here.
It’s easy to see why microservice architecture leads to technical sprawl if we consider a
large microservice ecosystem, one containing 1,000 microservices. Suppose each of
these microservices is staffed by a development team of six developers, and each
developer uses their own set of favorite tools, favorite libraries, and works in their
own favorite languages. Each of these development teams has their own way of
deploying, their own specified metrics to monitor and alert on, their own external
libraries and internal dependencies they use, custom scripts to run on production
machines, and so on.
If you have a thousand of these teams, this means that within one system there are a
thousand ways to do one thing. There will be a thousand ways to deploy, a thousand
libraries to maintain, a thousand different ways of alerting and monitoring and test‐
ing and handling outages. The only way to cut down on technical sprawl is through
standardization at every level of the microservice ecosystem.
There’s another kind of technical sprawl associated with language choice. Microservi‐
ces infamously come with the promise of greater developer freedom, freedom to
choose whichever languages and libraries one wants. This is possible in principle, and
can be true in practice, but as a microservice ecosystem grows it often becomes
22 
| 
Chapter 1: Microservices
