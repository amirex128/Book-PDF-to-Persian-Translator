Resource Awareness
Before hardware resources can be efficiently allocated and distributed to microservi‐
ces within the microservice ecosystem, it is important to identify the resource require‐
ments and resource bottlenecks of each microservice. Resource requirements are the
specific resources (CPU, RAM, etc.) that each microservice needs; identifying these is
essential for running a scalable service. Resource bottlenecks are the scalability and
performance limitations of each individual microservice that are dependent on fea‐
tures of its resources.
Resource Requirements
The resource requirements of a microservice are the hardware resources the microser‐
vice needs in order to run properly, to process tasks efficiently, and to be scaled verti‐
cally and/or horizontally. The two most important and relevant hardware resources
tend to be, unsurprisingly, CPU and RAM (in multithreaded environments, threads
become the third important resource). Determining the resource requirements of a
microservice then entails quantifying the CPU and RAM that one instance of the ser‐
vice needs in order to run. This is essential for resource abstraction, for resource allo‐
cation and distribution, and for determining the overall scalability and performance
of the microservice.
Identifying Additional Resource Requirements
While CPU and RAM are the two most common resource require‐
ments, it’s important to keep an eye out for other resources that a
microservice may need within the ecosystem. These can be hard‐
ware resources like database connections or application platform
resources like logging quotas. Being aware of the needs of a specific
microservice can do a lot to improve scalability and performance.
Calculating the specific resource requirements of a microservice can be a tricky,
lengthy process, because there are many relevant factors. The key here, as I men‐
tioned earlier, is to determine what the requirements are for only one instance of the
service. The most effective and efficient way to scale our service is to scale it horizon‐
tally: if our traffic is about to increase, we want to add a few more hosts and deploy
our service to those new hosts. In order for us to know how many hosts we need to
add, we need to know what our service looks like running on only one host: how
much traffic can it handle? how much CPU does it utilize? how much memory?
Those numbers will tell us exactly what the resource requirements of our microser‐
vice are.
48 
| 
Chapter 4: Scalability and Performance
