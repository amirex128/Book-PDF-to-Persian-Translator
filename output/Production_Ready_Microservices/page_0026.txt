The development cycle
When developers are making changes to existing microservices, or creating new ones,
development can be made more effective by streamlining and standardizing the
development process and automating away as much as possible. The details of stand‐
ardizing the process of stable and reliable development itself are covered in Chap‐
ter 4, Scalability and Performance, but there are several things that need to be in place
within the third layer of a microservice ecosystem in order for stable and reliable
development to be possible.
The first requirement is a centralized version control system where all code can be
stored, tracked, versioned, and searched. This is usually accomplished through some‐
thing like GitHub, or a self-hosted git or svn repository linked to some kind of collab‐
oration tool like Phabrictor, and these tools make it easy to maintain and review code.
The second requirement is a stable, efficient development environment. Development
environments are notoriously difficult to implement in microservice ecosystems, due
to the complicated dependencies each microservice will have on other services, but
they are absolutely essential. Some engineering organizations prefer when all devel‐
opment is done locally (on a developer’s laptop), but this can lead to bad deploys
because it doesn’t give the developer an accurate picture of how her code changes will
perform in the production world. The most stable and reliable way to design a devel‐
opment environment is to create a mirror of the production environment (one that is
not staging, nor canary, nor production) containing all of the intricate dependency
chains.
Test, build, package, and release
The test, build, package, and release steps in between development and deployment
should be standardized and centralized as much as possible. After the development
cycle, when any code change has been committed, all the necessary tests should be
run, and new releases should be automatically built and packaged. Continuous inte‐
gration tooling exists for precisely this purpose, and existing solutions (like Jenkins)
are very advanced and easy to configure. These tools make it easy to automate the
entire process, leaving very little room for human error.
Deployment pipeline
The deployment pipeline is the process by which new code makes its way to produc‐
tion servers after the development cycle and following the test, build, package, and
release steps. Deployment can quickly become very complicated in a microservice
ecosystem, where hundreds of deployments per day are not out of the ordinary.
Building tooling around deployment, and standardizing deployment practices for all
development teams is often necessary. The principles of building stable and reliable
18 
| 
Chapter 1: Microservices
