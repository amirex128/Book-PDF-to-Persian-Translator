Figure 1-5. Microservices
There are numerous benefits to adopting microservice architecture—including (but
not limited to) reduced technical debt, improved developer productivity and velocity,
better testing efficiency, increased scalability, and ease of deployment—and compa‐
nies that adopt microservice architecture usually do so after having built one applica‐
tion and hitting scalability and organizational challenges. They begin with a
monolithic application and then split the monolith into microservices.
The difficulties of splitting a monolith into microservices depend entirely on the
complexity of the monolithic application. A monolithic application with many fea‐
tures will take a great deal of architectural effort and careful deliberation to success‐
fully break up into microservices, and additional complexity is introduced by the
need to reorganize and restructure teams. The decision to move to microservices
must always become a company-wide effort.
There are several steps in breaking apart a monolith. The first is to identify the com‐
ponents that should be written as independent services. This is perhaps the most dif‐
ficult step in the entire process, because while there may be a number of right ways to
split the monolith into component services, there are far more wrong ways. The rule
of thumb in identifying components is to pinpoint key overall functionalities of the
monolith, then split those functionalities into small independent components. Micro‐
services must be as simple as possible or else the company will risk the possibility of
replacing one monolith with several smaller monoliths, which will all suffer the same
problems as the company grows.
Once the key functions have been identified and properly componentized into inde‐
pendent microservices, the organizational structure of the company must be restruc‐
From Monoliths to Microservices 
| 
7
