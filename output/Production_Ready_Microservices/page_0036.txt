happen anywhere: locally on a developer’s laptop or on a server in a development
environment. A reliable development environment—one that accurately mirrors the
production world—is key, especially if testing the service in question requires making
requests to other microservices or reading or writing data to a database.
Once the code has been committed to the central repository, the second step consists
in having the change(s) reviewed carefully and thoroughly by other engineers on the
team. If all reviewers have approved the change(s), and all lint, unit, and integration
tests have passed on a new build, the change can be merged into the repository
(see ???, for more on lint, unit, and integration tests). Then, and only then, can the
new change be introduced into the deployment pipeline.
Test Before Code Review
One way to ensure that all bugs are caught before they hit produc‐
tion is to run all lint, unit, integration, and end-to-end tests before
the code review phase. This can be accomplished by having devel‐
opers work on a separate branch, kicking off all tests on that
branch as soon as the developer submits it for code review, and
then only allowing it to reach code review (or only allowing it to be
built) after it successfully passes all tests.
As mentioned in the section on layer 4 of the microservice ecosystem in Chapter 1,
Microservices, a lot happens in between the development cycle and the deployment
pipeline. The new release needs to be packaged, built, and thoroughly tested before
reaching the first stage of the deployment pipeline.
The Deployment Pipeline
There is a great deal of room for human error in microservice ecosystems, especially
where deployment practices are concerned, and (as I mentioned earlier) the majority
of outages in large-scale production systems are caused by bad deployments. Con‐
sider the organizational sprawl that accompanies the adoption of microservice archi‐
tecture and what it entails for the deployment process: you have, at the very least,
dozens (if not hundreds or thousands) of independent, isolated teams who are
deploying changes to their microservices on their own schedules, and often without
cross-team coordination between clients and dependencies. If something goes wrong,
if a bug is introduced into production, or if a service is temporarily unavailable dur‐
ing deployment, then the entire ecosystem can be negatively affected. To ensure that
things go wrong with less frequency, and that any failures can be caught before being
rolled out to all production servers, introducing a standardized deployment pipeline
across the engineering organization can help ensure stability and reliability across the
ecosystem.
28 
| 
Chapter 3: Stability and Reliability
