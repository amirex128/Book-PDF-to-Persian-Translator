rolled out in stages: developers can choose to roll out to production by percentage of
hardware (e.g., first to 25% of all servers, then to 50%, then 75%, and finally 100%),
or by datacenter, or by region, or by country, or any mixture of these.
Enforcing Stable and Reliable Deployment
By the time a new candidate for production has made it through the development
process, has survived the staging environment, and has been deployed to the canary
phase successfully, the chances of it causing a major outage are very slim, because
most bugs in the code will have been caught before the candidate for production is
rolled out to production. This is precisely why having a comprehensive deployment
pipeline is essential for building a stable and reliable microservice.
For some developers, the delay introduced by the deployment pipeline might seem
like an unnecessary burden because it delays their code changes and/or new features
from being deployed straight to production minutes after they have been written. In
reality, the delay introduced by the phases of the deployment pipeline is very short
and easily customizable, but sticking to the standardized deployment process needs
to be enforced to ensure reliability. Deploying to a microservice multiple times per
day can (and does) compromise the stability and reliability of the microservice and
any other services within its complex dependency chain: a microservice that is chang‐
ing every few hours is rarely a stable or reliable microservice.
Developers may be tempted to skip the staging and canary phases of the deployment
process and deploy a fix straight to production if, for example, a serious bug is dis‐
covered in production. While this solves the problem quickly, can possibly save the
company from losing revenue, and can prevent dependencies from experiencing out‐
ages, allowing developers to deploy straight to production should be reserved only for
the most severe outages. Without these restrictions in place, there is always the unfor‐
tunate possibility of abusing the process and deploying straight to production: for
most developers, every code change, every deploy is important and may seem impor‐
tant enough to bypass staging and canary, compromising the stability and reliability
of the entire microservice ecosystem. When failures occur, development teams should
instead be encouraged to always roll back to the latest stable build of the microser‐
vice, which will bring the microservice back to a known (and reliable) state, which
can run in production without any issues while the team works to discover the root
cause of the failure that occurred.
36 
| 
Chapter 3: Stability and Reliability
