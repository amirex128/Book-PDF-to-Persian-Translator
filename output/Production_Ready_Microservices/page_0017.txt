whose cost can typically be sustained only by companies that have reached the scala‐
bility challenges that justify the move to microservice architecture. Small companies
simply will not have enough operational capacity to maintain a microservice ecosys‐
tem. Furthermore, it’s extraordinarily difficult to identify key areas and components
to build into microservices when a company is in the early stages: applications at new
companies will not have many features, nor many separate areas of functionality that
can be split appropriately into microservices.
Microservice Architecture
The architecture of a microservice (Figure 1-6) is not very different from the standard
application architecture covered in the first section of this chapter (Figure 1-1). Each
and every microservice will have three components: a frontend (client-side) piece,
some backend code that does the heavy lifting, and a way to store or retrieve any rele‐
vant data.
The frontend, client-side piece of a microservice is not your typical frontend applica‐
tion, but rather an application programming interface (API) with static endpoints.
Well-designed microservice APIs allow microservices to easily and effectively inter‐
act, sending requests to the relevant API endpoint(s). For example, a microservice
that is responsible for customer data might have a get_customer_information end‐
point that other services could send requests to in order to retrieve information about
customers, an update_customer_information endpoint that other services could send
requests to in order to update the information for a specific customer, and a
delete_customer_information endpoint that services could use to delete a customer’s
information.
Figure 1-6. Elements of microservice architecture
These endpoints are separated out in architecture and theory alone, not in practice,
for they live alongside and as part of all the backend code that processes every
request. For our example microservice that is responsible for customer data, a request
sent to the get_customer_information endpoint would trigger a task that would pro‐
cess the incoming request, determine any specific filters or options that were applied
in the request, retrieve the information from a database, format the information, and
return it to the client (microservice) that requested it.
Microservice Architecture 
| 
9
