When we can predict future traffic growth and understand the current and past traf‐
fic patterns well enough to know how the patterns will change with expected growth,
we can perform load testing on our services to make sure that they behave as we
expect under heavier traffic loads. The details of load testing are covered in ???.
The third aspect of traffic management is where things get especially tricky. The way
a microservice handles traffic should be scalable, which means it should be prepared
for drastic changes in traffic, especially bursts of traffic, handle them carefully, and
prevent them from taking down the service entirely. It’s easier said than done, because
even the most well-monitored, scalable, and performant microservices can experi‐
ence monitoring, logging, and other general issues if traffic suddenly spikes. These
sorts of spikes should be prepared for at the infrastructure level, within all monitor‐
ing and logging systems, and by the development team as part of the service’s resil‐
iency testing suite.
There’s one additional aspect I want to mention that’s related to management of traf‐
fic between and across various locations. Many microservice ecosystems won’t be
deployed only in one location, one datacenter, or one city, but rather across multiple
datacenters across the country (or even the world). It’s not uncommon for datacenters
themselves to experience large-scale outages, and when this happens, the entire
microservice ecosystem can (and usually will) go down with the datacenter. Distrib‐
uting and routing traffic appropriately between datacenters is the responsibility of the
infrastructure level (in particular, the communication layer) of the microservice eco‐
system, but each microservice needs to be prepared to re-route traffic from one data‐
center to another without the service experiencing any decreased availability.
Task Handling and Processing
Every microservice in the microservice ecosystem will need to process tasks of some
sort. That is, every microservice will be receiving requests from upstream client serv‐
ices who either need some sort of information from the microservice or need the
microservice to compute or process something and then return information about
that computation or process, and then the microservice will need to fulfill that
request (usually by communicating with downstream services in addition to doing
some work of its own) and return any requested information or response to the client
that sent the request.
Programming Language Limitations
Microservices can accomplish this and play their required role in a myriad of ways,
and the ways in which they will perform computations, interact with downstream
services, and process various tasks will depend on the language that the service is
written in, and consequently, on the architecture of the service (which is, in many
ways, determined by the language). For example, a microservice written in Python
Task Handling and Processing 
| 
53
