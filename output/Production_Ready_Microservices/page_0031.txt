impractical, costly, and dangerous. To see why this can become a problem, consider
the following scenario. Suppose we have a microservice ecosystem containing 200
services, and imagine that some of these microservices are written in Python, others
in JavaScript, some in Haskell, a few in Go, and a couple more in Ruby, Java, and
C++. For each internal tool, for each system and service within every layer of the eco‐
system, libraries will have to be written for each one of these languages.
Take a moment to contemplate the sheer amount of maintenance and development
that will have to be done in order for each language to receive the support it requires:
it’s extraordinary, and very few engineering organizations could afford to dedicate the
engineering resources necessary to make it happen. It’s more realistic to choose a
small number of supported languages and ensure that all libraries and tools are com‐
patible with and exist for these languages than to attempt to support a large number
of languages.
The last type of technical sprawl we will cover here is technical debt, which usually
refers to work that needs to be done because something was implemented in a way
that got the job done quickly, but not in the best or most optimal way. Given that
microservice development teams can churn out new features at a fast pace, technical
debt often builds up quietly in the background. When outages happen, when things
break, any work that comes out of an incident review will only rarely be the best over‐
all solution: as far as microservice development teams are concerned, whatever fixes
(or fixed) the problem quickly and in the moment was good enough, and any better
solutions are pawned off to the future.
More Ways to Fail
Microservices are large, complex, distributed systems with many small, independent
pieces that are constantly changing. The reality of working with complex systems of
this sort is that individual components will fail, they will fail often, and they will fail
in ways that nobody could have predicted. This is where the third trade-off comes
into play: microservice architecture introduces more ways your system can fail.
There are ways to prepare for failure, to mitigate failures when they occur, and to test
the limits and boundaries of both the individual components and the overall ecosys‐
tem, which I cover in ???. However, it is important to understand that no matter how
many resiliency tests you run, no matter how many failures and catastrophe scenarios
you’ve scoped out, you cannot escape the fact that the system will fail. You can only
do your best to prepare for when it does.
Competition for Resources
Just like any other ecosystem in the natural world, competition for resources in the
microservice ecosystem is fierce. Each engineering organization has finite resources:
it has finite engineering resources (teams, developers) and finite hardware and infra‐
Organizational Challenges 
| 
23
