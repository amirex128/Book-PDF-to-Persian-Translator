same kindness in return. The angel reached out to her with an onion in his hand. The
old woman grabbed the onion, but to her dismay, the other sinners around her
reached for the onion too. Her cold, bitter nature kicked in, and she tried to fight
them off, not wanting any of them to have any piece of the onion, and sadly, as she
tried to claw the onion away from them, the onion split into many layers and she and
the other sinners fell back into hell.
It’s not the most heartwarming tale, but there’s a moral to Grushenka’s story that I
have found remarkably applicable to the practice of microservice documentation:
always give an onion.
The importance of thorough, updated documentation for every microservice cannot
be emphasized enough. Ask developers working in a microservice ecosystem what
their main concerns are, and they’ll rattle off a list of features still to be implemented,
bugs to be fixed, dependencies that are causing trouble, and things that they don’t
understand about their own service and the dependencies they rely on. When asked
to go into greater detail about the latter two things, they tend to give similar answers:
they don’t understand how it works, it’s a black box, and the documentation is com‐
pletely useless.
Poor documentation of dependencies and internal tools slows developers down and
affects their ability to make their own services production-ready. It prevents them
from using dependencies and internal tools correctly and wastes countless engineer‐
ing hours, because sometimes the only way to figure out what a service or tool does
(without proper documentation) is to reverse-engineer it until you understand how it
works.
Poor documentation of a service also hurts the productivity of the developers who are
contributing to it. For example, the lack of runbooks for an on-call shift means who‐
ever is on call will need to figure out each problem from square one every single time.
Without an onboarding guide, each new developer working on the service will need
to start from scratch to understand how the service works. Single points of failure and
problems with the service will go unnoticed until they cause an outage. New features
added to the service will often miss the big picture of how the service actually works.
The goal of good, production-ready documentation is to create and maintain a cen‐
tralized repository of knowledge about the service. Sharing that knowledge has two
components: the bare facts about the service, and organizational understanding of
what the service does and where it fits into the organization as a whole. The problem
of poor documentation can then be divided into two subproblems: lack of documen‐
tation (the facts) and lack of understanding. Solving these two subproblems requires
standardizing documentation for every microservice and putting organizational
structures into place for sharing microservice understanding.
62 
| 
Chapter 7: Documentation and Understanding
