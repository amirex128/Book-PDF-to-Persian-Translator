Contact and On-Call Information
Chances are, anyone looking at a service’s documentation will either be someone on
the service team, or someone on a different team who is experiencing trouble with
the service or wants to know how the service works. For developers in the second
group, having access to information about the team is both useful and necessary, and
so several important facts should be included in a contact and on-call information sec‐
tion within the documentation.
This section should include the names, positions, and contact information of every‐
one on the team (including individual contributors, managers, and program/product
managers). This makes it easy for developers on other teams to quickly determine
who they should contact if they experience a problem with the service or have a ques‐
tion about it. This information is useful, for example, when a developer is experienc‐
ing problems with one of their dependencies: knowing who to contact and what their
role is on the team makes cross-team communication easy and efficient.
Adding information about the on-call rotation (and keeping it updated so that it
reflects who is on call for the service at any given time) will ensure that people will
know exactly who to contact for general problems or emergencies: the engineer who
is on call for the service.
Links
Documentation needs to be a centralized resource for all the information about a
microservice. In order for this to be true, the documentation needs to contain links to
the repository (so that developers can easily check out the code), a link to the dash‐
board, a link to the original RFC for the microservice, and a link to the most recent
architecture review slides. Any extra information about other microservices, technol‐
ogies used by the microservice, etc., that may be useful to the developer should be
included in a links section of the documentation.
Onboarding and Development Guide
The purpose of an onboarding and development section is to make it easy for a new
developer to onboard to the team, begin contributing code, add features to the micro‐
service, and introduce new changes into the deployment pipeline.
The first part of this section should be a step-by-step guide to setting up the service. It
should walk a developer through checking out the code, setting up the environment,
starting the service, and verifying that the service is working correctly (including all
commands or scripts that need to be run in order to accomplish this).
The second part should guide the developer through the development cycle and
deployment pipeline of the service (details of a production-ready development cycle
66 
| 
Chapter 7: Documentation and Understanding
