A stable microservice is one for which development, deployment, the adoption of
new technologies, and the decommissioning or deprecation of other services do not
give rise to instability across the larger microservice ecosystem. This requires putting
measures into place to protect against the negative consequences that may be intro‐
duced by these types of changes. A reliable microservice is one that can be trusted by
other microservices and by the overall ecosystem. Stability goes hand in hand with
reliability because each stability requirement carries with it a reliability requirement
(and vice versa): for example, stable deployment processes are accompanied by a
requirement that each new deployment does not compromise the reliability of the
microservice from the point of view of one of their clients or dependencies.
There are several things that can be done to ensure that a microservice is stable and
reliable. A standardized development cycle can be implemented to protect against
poor development practices. The deployment process can be designed so that changes
to the code are forced to pass through multiple stages before being rolled out to all
production servers. Dependency failures can be protected against. Health checks,
proper routing, and circuit breaking can be built into the routing and discovery chan‐
nels to handle anomalous traffic patterns. Finally, microservices and their endpoints
can be deprecated and/or decommissioned without causing any failures for other
microservices.
A Production-Ready Service Is Stable and Reliable
• It has a standardized development cycle.
• Its code is thoroughly tested through lint, unit, integration, and end-to-end
testing.
• Its test, packaging, build, and release process is completely automated.
• It has a standardized deployment pipeline, containing staging, canary, and pro‐
duction phases.
• Its clients are known.
• Its dependencies are known, and there are backups, alternatives, fallbacks, and
caching in place in case of failures.
• It has stable and reliable routing and discovery in place.
The Development Cycle
The stability and reliability of a microservice begins with the individual developer
who is contributing code to the service. The majority of outages and microservice
failures are caused by bugs introduced into the code that were not caught in the
development phase, in any of the tests, or at any step in the deployment process. Miti‐
26 
| 
Chapter 3: Stability and Reliability
