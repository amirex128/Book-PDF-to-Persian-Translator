and (as I’ve urged the reader earlier in this chapter) can give an onion to the rest of
the organization.
For the individual developer, this translates to being able to answer questions about
her microservice. For example, when asked if her microservice is scalable, she will be
able to look at a list of scalability requirements and confidently answer “Yes,” “No,” or
something in between (e.g., “It meets requirements x and z, but y has not yet been
implemented”). Likewise, when asked if her microservice is fault tolerant, she’ll be
able to rattle off all failure scenarios and possible catastrophes, then explain in detail
how she has prepared for these using various types of resiliency testing.
At the team level, understanding signifies that the team is aware of where their micro‐
service stands with regard to production-readiness and what needs to be accom‐
plished to bring their service to a production-ready state. This has to be a cultural
element of each team in order for it to be successful: production-readiness standards
and requirements need to drive the decisions made by the team and be seen not
merely as boxes to check off on a checklist, but rather as principles that guide the
team toward building the best possible microservice.
Understanding needs to be built into the fabric of the organization itself. This
requires that production-readiness standards and requirements become part of the
organizational process. Before a service is even built, and a request for comments
(RFC) is sent around for review, the service can be evaluated against the production-
readiness standards and requirements. Developers, architects, and operations engi‐
neers can make sure that the service is built for stability, reliability, scalability,
performance, fault tolerance, catastrophe-preparedness, proper monitoring, and
appropriately documented and understood before it even begins running—ensuring
that once the new service begins to host production traffic, it has been architected
and optimized for availability and can be trusted with production traffic.
It’s not enough to only review and architect for production-readiness at the beginning
of a microservice’s lifecycle. Existing services need to be reviewed and audited con‐
stantly so that the quality of each microservice is kept at a sufficiently high level,
ensuring high availability and trust across various microservice teams and the entire
microservice ecosystem. Automating these production-readiness audits of existing
services and internally publicizing the results can help to establish awareness across
the organization about the quality of the overall microservice ecosystem.
Architecture Reviews
One thing I’ve learned after driving these production-readiness standards and their
requirements across over a thousand different microservices and their development
teams is that the most immediately effective way to accomplish microservice under‐
standing is to hold scheduled architecture reviews for each microservice. A good
architecture review is a meeting where any and all developers and site reliability engi‐
70 
| 
Chapter 7: Documentation and Understanding
