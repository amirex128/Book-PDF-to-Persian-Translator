tured so that each microservice is staffed by an engineering team. There are several
ways to do this. The first method of company reorganization around microservice
adoption is to dedicate one team to each microservice. The size of the team will be
determined completely by the complexity and workload of the microservice and
should be staffed by enough developers and site reliability engineers so that both fea‐
ture development and the on-call rotation of the service can be managed without
burdening the team. The second is to assign several services to one team and have
that team develop the services in parallel. This works best when the teams are organ‐
ized around specific products or business domains, and are responsible for develop‐
ing any services related to those products or domains. If a company chooses the
second method of reorganization, it needs to make sure that developers aren’t over‐
worked and don’t face task, outage, or operational fatigue.
Another important part of microservice adoption is the creation of a microservice eco‐
system. Typically (or, at least, hopefully), a company running a large monolithic appli‐
cation will have a dedicated infrastructure organization that is responsible for
designing, building, and maintaining the infrastructure that the application runs on.
When a monolith is split into microservices, the responsibilities of the infrastructure
organization for providing a stable platform for microservices to be developed and
run on grows drastically in importance. The infrastructure teams must provide
microservice teams with stable infrastructure that abstracts away the majority of the
complexity of the interactions between microservices.
Once these three steps have been completed—the componentization of the applica‐
tion, the restructuring of engineering teams to staff each microservice, and the devel‐
opment of the infrastructure organization within the company—the migration can
begin. Some teams choose to pull the relevant code for their microservice directly
from the monolith and into a separate service, and shadow the monolith’s traffic until
they are convinced that the microservice can perform the desired functionality on its
own. Other teams choose to build the service from scratch, starting with a clean slate,
and shadow traffic or redirect after the service has passed appropriate tests. The best
approach to migration depends on the functionality of the microservice, and I have
seen both approaches work equally well in most cases, but the real key to a successful
migration is thorough, careful, painstakingly documented planning and execution,
along with the realization that a complete migration of a large monolith can take sev‐
eral long years.
With all the work involved in splitting a monolith into microservices, it may seem
better to begin with microservice architecture, skip all of the painful scalability chal‐
lenges, and avoid the microservice migration drama. This approach may turn out all
right for some companies, but I want to offer several words of caution. Small compa‐
nies often do not have the necessary infrastructure in place to sustain microservices,
even at a very small scale: good microservice architecture requires stable, often very
complex, infrastructure. Such stable infrastructure requires a large, dedicated team
8 
| 
Chapter 1: Microservices
