Deprecation and Decommissioning
One often-forgotten, often-ignored cause of instability and unreliability in microser‐
vice ecosystems is the deprecation or decommissioning of a microservice or one of its
API endpoints. When a microservice is no longer in use or is no longer supported by
a development team, its decommissioning should be undertaken carefully to ensure
that no clients will be compromised. The deprecation of one or more of a microservi‐
ce’s API endpoints is even more common: when new features are added or old ones
removed, the endpoints often change, requiring that client teams are updated and any
requests made to the old endpoints are switched to new endpoints (or removed
entirely).
In most microservice ecosystems, deprecation and decommissioning is more of a
sociological problem within the engineering organization than a technical one, mak‐
ing it all the more difficult to address. When a microservice is about to be decommis‐
sioned, its development team needs to take care to alert all client services and advise
them on how to accommodate the loss of their dependency. If the microservice being
decommissioned is being replaced by another new microservice, or if the functional‐
ity of the microservice is being built into another existing microservice, then the team
should help all clients update their microservices to send requests to the new end‐
points. Deprecation of an endpoint follows a similar process: the clients must be aler‐
ted, and either given the new endpoint or advised on how to account for the loss of
the endpoint entirely. In both deprecation and decommissioning, monitoring plays a
critical role: endpoints will need to be monitored closely before the service or end‐
point is completely decommissioned and/or deprecated to check for any requests that
might still be sent to the outdated service or endpoint.
Conversely, failing to properly deprecate an endpoint or decommission a microser‐
vice can also have disastrous effects on the microservice ecosystem. This happens
more often than developers would care to admit. In an ecosystem containing hun‐
dreds or thousands of microservices, developers are often shifted between teams, pri‐
orities change, and both microservices and technologies are swapped out for newer,
better ones all of the time. When these old microservices or technologies are left to
run, without any (or much) involvement, oversight, or monitoring, any failures will
go unnoticed, and any failure that is noticed may not be resolved for a long period of
time. If a microservice is going to be left to fend for itself, it risks compromising its
clients in case of an outage—such microservices should be decommissioned rather
than abandoned.
Nothing is more disruptive to a microservice than the complete loss of one of its
dependencies. Nothing causes more instability and unreliability than the sudden,
unexpected failure of one of its dependencies, even if the failure was planned for by
another team. The importance of stable and reliable decommissioning and depreca‐
tion can honestly not be emphasized enough.
40 
| 
Chapter 3: Stability and Reliability
