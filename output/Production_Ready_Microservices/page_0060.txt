where the rest of the services aren’t held to (and don’t meet) the same standards ren‐
ders the efficiency of the standardized services completely moot.
Aside from standardization across the ecosystem, and holding each microservice
development team to high scalability standards, it’s important that development
teams work together across microservice boundaries to ensure that each dependency
chain will scale together. The development teams responsible for any dependencies of
a microservice need to be alerted when increases in traffic are expected. Cross-team
communication and collaboration are essential here: regularly communicating with
clients and dependencies about a service’s scalability requirements, status, and any
bottlenecks can help to guarantee that any services that rely on each other are pre‐
pared for growth and aware of any potential scalability bottlenecks. A strategy that
I’ve used to help teams accomplish this is by holding architecture and scalability
overview meetings with teams whose services rely on one another. In these meetings,
we cover the architecture of each service and its scalability limitations, then discuss
together what needs to be done to scale the entire set of services.
Traffic Management
As services scale, and the number of requests each service must handle grows, a scala‐
ble, performant service must also handle traffic intelligently. There are several aspects
to managing traffic in a scalable, performant way: first of all, the growth scale (quan‐
titative and qualitative) needs to be used to predict future increases (or decreases) in
traffic; second, the traffic patterns must be well understood and prepared for; and
third, microservices need to be able to intelligently handle increases in traffic, as well
as surges or bursts of traffic.
We’ve already covered the first aspect earlier in this chapter: understanding the 
growth scales (both quantitative and qualitative) of a microservice allows us to under‐
stand current traffic loads on the service as well as prepare for future traffic growth.
Understanding current traffic patterns helps when interacting with the service on the
ground floor in a lot of really interesting ways. When traffic patterns are clearly iden‐
tified, both in terms of the requests per second sent to the service over time and all 
key metrics (see ???, for more about key metrics), changes to the service, operational
downtimes, and deployments can be scheduled to avoid peak traffic times, cutting
down on possible future outages if a bug is deployed and on potential downtime if the
microservice is restarted while experiencing peak traffic load. Closely monitoring the
traffic in light of the traffic patterns and tuning the monitoring thresholds carefully
with the traffic patterns of the microservice in mind can help catch any issues and
incidents quickly before they cause an outage or lead to decreased availability (the
principles of production-ready monitoring are covered in greater detail in ???).
52 
| 
Chapter 4: Scalability and Performance
