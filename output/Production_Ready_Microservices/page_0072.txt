tion as well. If a new alert is added, then step-by-step instructions on how to triage,
mitigate, and resolve the alert should also be added to the service’s on-call runbook. If
a new dependency is added, then information about that dependency should be
added to the documentation. Always give an onion.
The best way to accomplish this is to make the process of updating documentation
part of the development workflow. If updating documentation is seen as a separate
task aside from (and secondary to) development, then it will never get done and will
become part of the technical debt of the service. To reduce technical debt, developers
should be encouraged (or, if need be, required) to accompany every significant code
change with an update to the documentation.
Make Updating Documentation Part of the Development Cycle
If updating and improving documentation is viewed as secondary
to writing code, it will often be pushed off and become part of the
technical debt of the service. To avoid this, make documentation
updates and improvements a required part of the development
cycle of the service.
Documentation should be both comprehensive and useful. It should contain all of the
relevant and important facts about the service. After reading through the documenta‐
tion, a developer should know how to develop and contribute to the service; the
architecture of the service; the contact and on-call information for the service; how
the service works (request flows, endpoints, dependencies, etc.); how to triage, miti‐
gate, and fix incidents and outages as well as resolve alerts generated by the service;
and answers to frequently asked questions about the service.
Most importantly, documentation should be written clearly and should be easy to
understand. Jargon-heavy documentation is useless, documentation that is overly
technical and doesn’t explain things that may be unique to the service is also useless,
as is documentation that doesn’t go into any significant detail at all. The goal in writ‐
ing good, clean, and clear documentation is to write it so that it can be understood by
any developer, manager, product manager, or executive within the company.
Let’s dive a little bit deeper into each of the elements of production-ready microser‐
vice documentation.
Description
Each microservice’s documentation should begin with a description of the service. It
should be short, sweet, and to the point. For example, if there is a microservice called
receipt-sender whose purpose is to send a receipt after a customer completes an order,
the description should read:
64 
| 
Chapter 7: Documentation and Understanding
