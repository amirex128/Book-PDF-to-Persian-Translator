and deployment pipeline can be found in “The Development Cycle” on page 26 and
“The Deployment Pipeline” on page 28). This should include the technical details
(e.g., commands that must be run, along with several examples) of each of the steps:
how to check out the code, how to make a change to the code, how to write a unit test
for the change (if necessary), how to run the required tests, how to commit their
changes, how to send changes for code review, how to make sure that the service is
built and released correctly, and then how to deploy (as well as how the deployment
pipeline is set up for the service).
Request Flows, Endpoints, and Dependencies
The documentation should also contain critical information about request flows, end‐
points, and dependencies of the microservice.
Request flow documentation can consist of a diagram of the request flows of the
application. This can be the architecture diagram, if the request flow is detailed
appropriately within the architecture diagram. Any diagram should be accompanied
by a qualitative description of the types of requests that are made to the microservice
and how they are handled.
This is also the place to document all API endpoints of the service. A bulleted list of
the endpoints with their names and a qualitative description of each along with their
responses is usually sufficient. It must be clear and understandable enough that
another developer working on a different team could read the descriptions of your
service’s API endpoints and treat your microservice as a black box, hitting the end‐
points successfully and receiving the expected responses.
The third element of this section is information about the service’s dependencies. List
the dependencies, the relevant endpoints of these dependencies, and any requests the
service makes to them, along with information about their SLAs, any alternatives/
caching/backups in place in case of failure, and links to their documentation and
dashboards.
On-Call Runbooks
As covered in ???, every single alert should be included in an on-call runbook and
accompanied by step-by-step instructions describing how it should be triaged, miti‐
gated, and resolved. The on-call runbook should be kept in the centralized documen‐
tation of the service, in an on-call runbook section, along with both general and
detailed guidance on troubleshooting and debugging new errors.
A good runbook will begin with any general on-call requirements and procedures,
and then contain a complete list of the service’s alerts. For each alert, the on-call run‐
book should include the alert name, a description of the alert, a description of the
problem, and a step-by-step guide on how to triage the alert, mitigate it, and then
Microservice Documentation 
| 
67
