Write Microservices in Programming Languages That Are Optimized for
Concurrency and Partitioning
Some languages are better suited for efficient (concurrent and par‐
titioned) task handling and processing than others. When writing a
new microservice, make sure that the language the service is being
written in won’t introduce scalability and performance constraints
on the microservices. Microservices that are already written in lan‐
guages with efficiency limitations can (and should) be rewritten in
more appropriate languages, a time consuming but incredibly
rewarding task that can drastically improve scalability and perfor‐
mance. For example, if you are optimizing for concurrency and
partitioning, and want to use an asynchronous framework to help
you accomplish that, writing your service in Python (rather than
C++, Java, or Go—three languages built for concurrency and parti‐
tioning) is going to introduce a lot of scalability and performance
bottlenecks that will be difficult to mitigate.
Taking the smaller pieces of these tasks, we can process them more efficiently using
partitioning, where each task is not only broken up into small pieces but can be pro‐
cessed in parallel. If we have a large number of small tasks, we can process then all at
the same time by sending them to a set of workers that can process them in parallel. If
we need to process more tasks, we can easily scale with the increased demand by
adding additional workers to process the new tasks without affecting the efficiency of
our system. Together, concurrency and partitioning help ensure that our microservice
is optimized for both scalability and partitioning.
Scalable Data Storage
Microservices need to handle data in a scalable and performant way. The way in
which a microservice stores and handles data can easily become the most significant
limitation or constraint that keeps it from becoming scalable and performant: choos‐
ing the wrong database, the wrong schema, or a database that doesn’t support test
tenancy can end up compromising the overall availability of a microservice. Choos‐
ing the right database for a microservice is a topic that, like all the other topics cov‐
ered in this book, is incredibly complex, and we will only scratch the surface in this
chapter. In the following sections, we’ll take a look at several things to consider when
choosing databases in microservice ecosystems, and then at some database challenges
that are specific to microservice architecture.
Database Choice in Microservice Ecosystems
Building, running, and maintaining databases in large microservice ecosystems is not
an easy task. Some companies adopting microservice architecture opt to allow devel‐
Scalable Data Storage 
| 
55
