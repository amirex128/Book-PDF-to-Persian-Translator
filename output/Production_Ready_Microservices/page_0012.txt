Figure 1-3. Scaling an application vertically
As the company grows, and the number of engineers is no longer in the single, dou‐
ble, or even triple digits, things start to get a little more complicated. Thanks to all the
features, patches, and fixes added to the codebase by the developers, the application is
now thousands upon thousands of lines long. The complexity of the application is
growing steadily, and hundreds (if not thousands) of tests must be written in order to
ensure that any change made (even a change of one or two lines) doesn’t compromise
the integrity of the existing thousands upon thousands of lines of code. Development
and deployment become a nightmare, testing becomes a burden and a blocker to the
deployment of even the most crucial fixes, and technical debt piles up quickly. Appli‐
cations whose lifecycles fit into this pattern (for better or for worse) are fondly (and
appropriately) referred to in the software community as monoliths.
Of course, not all monolithic applications are bad, and not every monolithic applica‐
tion suffers from the problems listed, but monoliths that don’t hit these issues at some
point in their lifecycle are (in my experience) pretty rare. The reason most monoliths
are susceptible to these problems is because the nature of a monolith is directly
opposed to scalability in the most general possible sense. Scalability requires concur‐
rency and partitioning: the two things that are difficult to accomplish with a monolith.
4 
| 
Chapter 1: Microservices
