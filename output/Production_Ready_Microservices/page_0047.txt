microservice gets from its dependencies, and if the dependencies go down, the availa‐
bility of your microservice will be unaffected. Implementing defensive caching isn’t
necessary for every single dependency, but if a specific dependency or set of depen‐
dencies is or are unreliable, defensive caching will prevent your microservice from
being harmed.
Routing and Discovery
Another aspect of building stable and reliable microservices is to ensure that commu‐
nication and interaction between microservices is itself stable and reliable, which
means that layer 2 (the communication layer) of the microservice ecosystem (see
Chapter 1, Microservices) must be built to perform in a way that protects against
harmful traffic patterns and maintains trust across the ecosystem. The relevant parts
of the communication layer for stability and reliability (aside from the network itself)
are service discovery, service registry, and load balancing.
The health of a microservice at both the host level and the service level as a whole
should always be known. This means that health checks should be running constantly
so that a request is never sent to an unhealthy host or service. Running health checks
on a separate channel (not used for general microservice communication) is the easi‐
est way to ensure that health checks aren’t ever compromised by something like a
clogged network. Hardcoding “200 OK” responses on a /health endpoint for health
checks isn’t ideal for every microservice either, though it may be sufficient for most.
Hardcoded responses don’t tell you much except that the microservice was started on
the host semi-successfully: any /health endpoint of a microservice should give a use‐
ful, accurate response.
If an instance of a service on a host is unhealthy, the load balancers should no longer
route traffic to it. If a microservice as a whole is unhealthy (with all health checks fail‐
ing on either a certain percentage of hosts or all hosts in production), then traffic
should no longer be routed to that particular microservice until the problems causing
the health checks to fail are resolved.
However, health checks shouldn’t be the only determining factor in whether or not a
service is healthy. A large number of unhandled exceptions should also lead to a ser‐
vice being marked unhealthy, and circuit breakers should be put into place for these
failures so that if a service experiences an abnormal amount of errors, no more
requests will be sent to the service until the problem is resolved. The key in stable and
reliable routing and discovery is this: preserve the microservice ecosystem by pre‐
venting bad actors from serving production traffic and accepting requests from other
microservices.
Routing and Discovery 
| 
39
