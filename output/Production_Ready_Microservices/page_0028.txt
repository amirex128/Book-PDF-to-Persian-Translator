practice works well for monolithic architecture, and even for small microservice eco‐
systems, but in very large microservice ecosystems containing hundreds of microser‐
vices and dozens of internal tools (each with their own custom configurations), this
practice becomes rather messy: developers on microservice teams are required to
make changes to codebases of tools in the layers below, and oftentimes will forget
where certain configurations live (or that they exist at all). To mitigate this problem,
all microservice-specific configurations can live in the repository of the microservice
and should be accessed there by the tools and systems of the layers below.
Summary of Layer 4: The Microservice Layer
The microservice layer (layer 4) of the microservice ecosystem contains:
• The microservices
• All microservice-specific configurations
Organizational Challenges
The adoption of microservice architecture resolves the most pressing challenges pre‐
sented by monolithic application architecture. Microservices aren’t plagued by the
same scalability challenges, the lack of efficiency, or the difficulties in adopting new
technologies: they are optimized for scalability, optimized for efficiency, optimized
for developer velocity. In an industry where new technologies rapidly gain market
traction, the pure organizational cost of maintaining and attempting to improve a
cumbersome monolithic application is simply not practical. With these things in
mind, it’s hard to imagine why anyone would be reluctant to split a monolith into
microservices, why anyone would be wary about building a microservice ecosystem
from the ground up.
Microservices seem like a magical (and somewhat obvious) solution, but we know
better than that. In The Mythical Man-Month, Frederick Brooks explained why there
are no silver bullets in software engineering, an idea he summarized as follows:
“There is no single development, in either technology or management technique,
which by itself promises even one order-of-magnitude improvement within a decade
in productivity, in reliability, in simplicity.”
When we find ourselves presented with technology that promises to offer us drastic
improvements, we need to look for the trade-offs. Microservices promise greater scal‐
ability and greater efficiency, but we know that those will come at a cost to some part
of the overall system.
There are four especially significant trade-offs that come with microservice architec‐
ture. The first is the change in organizational structure that tends toward isolation
20 
| 
Chapter 1: Microservices
