has a number of ways that it can process various tasks, some of which require the use
of asynchronous frameworks (like Tornado) and others which can utilize messaging
technologies like RabbitMQ and Celery to efficiently process tasks. For these reasons,
a microservice’s ability to handle and process tasks in a scalable and performant man‐
ner is dictated in part by choice of language.
Beware of Scalability and Performance Limitations of Programming
Languages
Many programming languages are not optimized for the perfor‐
mance and scalability requirements of microservice architecture, or
do not have scalable or performant frameworks that allow micro‐
services to process tasks efficiently.
Because of the limitations introduced by language choice when it comes to a micro‐
service’s ability to process tasks efficiently, language choice becomes extremely impor‐
tant in microservice architecture. To many developers, one of the selling points of the
adoption of microservice architecture is the ability to write a microservice in any lan‐
guage, and this is usually true, but with a caveat: programming language constraints
need to be taken into account, and language choice should be determined not by
whether a language is fashionable or fun (or even whether it is the most common lan‐
guage that the development team is familiar with), but with the performance and
scalability limitations of each potential language held as the deciding factors. There is
no one “best” language to write a microservice in, but there are languages that are
better suited than others to certain types of microservices.
Handling Requests and Processing Tasks Efficiently
Language choice aside, production-readiness standardization requires each microser‐
vice to be both scalable and performant, which means that microservices need to be
able to handle and process a large number of tasks at the same time, handle and pro‐
cess those tasks efficiently, and be prepared for tasks and requests to increase in the
future. With this in mind, development teams should be able to answer three basic
questions about their microservices: how their microservice processes tasks, how effi‐
ciently their microservice processes those tasks, and how their microservice will per‐
form as the number of requests scales.
To ensure scalability and performance, microservices need to process tasks efficiently.
In order to do this, they need to have both concurrency and partitioning. Concur‐
rency requires that the service can’t have one single process that does all of the work:
that process will pick up one task at a time, complete the steps in a specific order, and
then move on to the next, which is a relatively inefficient way to process tasks. Instead
of architecting our service to use a single process, we can introduce concurrency so
that each task is broken up into smaller pieces.
54 
| 
Chapter 4: Scalability and Performance
