11. Key design patterns
This chapter covers:
•A catalog of design patterns
•Implementation suggestions
•A high-level design process based on these design
patterns
11.1. Framework-inspired structural elements
Every framework comes with its own set of recognized element types. For in-
stance, Symfony developers learn to create controllers, entities, form types,
Twig templates, Yaml configuration files, and so on. Laravel developers also
create controllers, but they need among other things: models, Blade tem-
plates, and PHP configuration files. When you take a look at the directory
structure of most web application projects, you’ll immediately notice the frame-
work that’s been used. Frameworks dictate your project structure. And frame-
works also invade your code. This all sounds like frameworks are an enemy,
instead of the helpful friend they presume to be, but this is a false contradic-
tion. In infrastructure code, frameworks are your friend. In core code, they
are not.
If frameworks determine the structure of your core code, you’ll end up with:
1.Implicit use cases inside controllers,
2.A domain model that’s coupled to its underlying infrastructure, and in
general
245