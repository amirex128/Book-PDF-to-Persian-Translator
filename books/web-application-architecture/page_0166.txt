6. External services
By imagining the object and the exact behavior we want from it, we’ve reached
the right level of abstraction for the EbookOrderService . It shows what this
service needs, in its own terms, nothing more, and nothing less. Now that we
have defined the intended usage of this vatRateProvider object, we can de-
fine an interface for it. And since we already have an implementation which
uses the vatapi.com service, we can also provide a standard implementation
for the interface (see Listing 6.9). That implementation will use the already
existing VatApi façade, which it receives as a constructor argument (see also
Figure 6.2).
Listing 6.9. The VatRateProvider interface and its standard implementa-
tion.
interface VatRateProvider
{
public function vatRateForSellingEbooksInCountry (
string $countryCode
):VatRate;
}
final class VatRateProviderUsingVatApiDotCom
implements VatRateProvider
{
private VatApi $vatApi ;
public function __construct (VatApi $vatApi )
{
$this ->vatApi =$vatApi ;
}
public function vatRateForSellingEbooksInCountry (
string $countryCode
):VatRate {
$rateCheckResult =$this ->vatApi ->vatRateCheck (
RateType ::tbe(),
$countryCode ,
'ebooks'
);
return VatRate ::fromInt (
146