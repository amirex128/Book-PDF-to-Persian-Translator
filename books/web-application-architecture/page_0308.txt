12. Architectural layers
the direction of dependencies in the code. For instance, the repository imple-
mentation is from the Infrastructure layer. So when an application service
saves an entity, the data flows from the Application layer to the Infrastructure
layer. But the application service class doesn’t depend on an infrastructure
class, it depends on an abstraction: the repository interface that lives in the
Domain layer/ Figure 12.5 shows the resulting dependency diagram.
Figure 12.5. A dependency diagram showing dependencies between layers.
12.3. The Dependency rule
For class-level dependencies we have the Dependency inversion principle1,
which tells us to depend on abstractions instead of concretions. In previ-
ous chapters we saw how applying this principle helps us separate core from
infrastructure code. For layer-level dependencies, we have the Dependency
rule2. This rule says that “source code dependencies [between layers] should
only point inwards”. The word “inwards” hints at drawing layers as concen-
1Robert C. Martin, “Agile Software Development, Principles, Patterns, and Practices”, Pren-
tice Hall (2003).
2Robert C. Martin, “The Clean Architecture”, https://advwebapparch.com/
clean-architecture
288