7. Time and randomness
dency, instead of using it ad hoc whenever we need the current time or a
unique ID.
For the creation of a UUID, an abstraction could be an interface named UuidFactory ,
like the one in Listing 7.5.
Listing 7.5. The abstract UuidFactory and a standard implementation.
use Ramsey\Uuid;
interface UuidFactory
{
public function create ():Uuid;
}
final class UuidFactoryUsingRamseyUuid
implements UuidFactory
{
public function create ():Uuid
{
return Uuid ::uuid4 ();
}
}
For the creation of a DateTimeImmutable instance we might consider intro-
ducing a TimeFactory , but this is commonly known as a Clock anyway. List-
ing7.6shows an example of such an abstraction.
Listing 7.6. The abstract Clock and a standard implementation.
interface Clock
{
public function currentTime ():DateTimeImmutable;
}
final class ClockUsingSystemClock
implements Clock
{
public function currentTime ():DateTimeImmutable
{
return new DateTimeImmutable( 'now' );
168