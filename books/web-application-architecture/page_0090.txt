3. Read models and view models
3.5. A specific type of read model: the view model
In the previous section we introduced a dedicated read model and read model
repository because the OrderController needed the price of an e-book. You
could classify the resulting model as an internal read model, since the data it
provides is only used internally, by the application itself. The information is
never directly shared with or displayed to the user.
On the other hand, there are places in our application where we fetch data
from the database in order to show it to the user. One such place is the page
where the user can browse through the list of e-books that are available for
purchase. Listing 3.12 shows how that’s currently done. The controller action
uses the database connection directly to find e-books that are not “hidden”,
and while it’s in the database it also collects some sales statistics.
Listing 3.12. Fetching a list of available e-books from the database.
final class EbookController
{
// ...
public function listEbooksAction ():Response
{
$connection =$this ->container ->get(Connection ::class );
$query =<<<EOD
SELECT
e.*,
(
SELECT COUNT(*)
FROM orders o
WHERE o.ebook_id = e.ebook_id
) AS number_of_times_sold
FROM ebooks e
WHERE e.is_hidden = 0
ORDER BY number_of_times_sold DESC
EOD;
$records =$connection ->executeQuery ($query )->fetchAllAssoc ();
return new Response(
70