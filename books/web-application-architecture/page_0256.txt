9. Conclusion
I think the rule should be: “if testing isn’t easy, make it easy”.
So focusing on testability is bound to increase the quality of your application
code, as well as improving its life expectancy. Combined with a domain-first
approach, the architectural techniques put forward in this book should help
you build long-lasting applications.
9.5. Pure object-oriented code
In the previous chapters I’ve used the word “pure” several times as a qualifier
for certain types of objects. I think it’ll be useful to describe in more detail
what I mean by pure objects. Knowing when code is pure or not will make a
difference, because pure code can be unit-tested, and most of it can end up
in the core of your application.
“Pure” as a qualifier for code originates from functional programming. A
pure function is a function with a return value that completely depends on
the arguments provided to it. Listing 9.1shows an example of such a pure
function. There’s nothing that could influence the outcome of calling sum()
other than the provided arguments, and the code of the function itself.
Listing 9.1. sum() is a pure function.
function sum(int $a, int $b):int
{
return $a+$b;
}
Listing 9.2on the other hand shows a function whose outcome is dependent
on something other than the arguments and the code.
Listing 9.2. secondsPassed() is an impure function.
function secondsPassed (int $previousTimestamp ):int
{
return time ()-$previousTimestamp ;
}
236