14. A testing strategy for decoupled applications
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
final class OrderControllerTest extends WebTestCase
{
public function it_correctly_invokes_createOrder ():void
{
$application =$this ->createMock (ApplicationInterface ::class );
$application ->expects ($this ->once ())
->method ('createOrder' )
->with (new CreateOrder( 2,1,'matthiasnoback@gmail.com' ))
->will ($this ->returnValue (new OrderId( 1001 )));
$client =self ::createClient ();
$client ->getContainer ()->set(
ApplicationInterface ::class ,
$application
);
$client ->request ('POST' ,'/create-order' , [
'ebook_id' =>'2',
'quantity' =>'1',
'email_address' =>'matthiasnoback@gmail.com'
]);
self ::assertTrue (
$this ->client ->getResponse ()->isRedirect ('/order-details/1001' )
);
}
}
This test verifies that the framework will instantiate the OrderController
and call the createOrderAction() method based on the '/create-order' URI.
It verifies that createOrderAction() is able to extract the submitted data
from the request body and copy it into the CreateOrder DTO, which is then
passed as an argument to ApplicationInterface::createOrder() . And as a
bonus, this test also verifies that we’re being redirected to the correct order
details page.
None of this code actually creates an Order entity, because we’ve replaced the
ApplicationInterface with a mock. Because of this, none of this code needs
332