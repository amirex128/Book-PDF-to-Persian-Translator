8. Validation
never show up on the user’s screen. The exception message and the ac-
companying stack trace should only be visible to developers. They should
know when a validation exception happens, because it’s often an opportu-
nity for improving the user experience. We’ll talk about this in Section 8.4
when we discuss how to use exceptions to talk back to the user after all.
When it comes to user-friendliness, we may provide an additional kind of
validation. One that doesn’t throw exceptions but produces a nice list of
friendly form errors in the user’s language. We’ll cover this approach in
Section 8.3.
8.2. Using value objects to validate separate values
When talking about objects that protect themselves against bad data, the con-
cept of a Value object may come to mind. A value object is an object that
wraps one or more other values. These values could be primitive-type val-
ues like strings, integers, booleans or floats, or they could be value objects
themselves. There are multiple benefits to wrapping a value inside a value
object. In the context of validation, value objects are useful because they’ll
never need to be validated. The constructor of a value object will analyze the
raw value provided to it, and throw an exception if it’s invalid.
Rewriting the previous example using value objects, we could delegate the
validation of the provided email address and order line quantity to the spe-
cialized value objects EmailAddress and Quantity . Listing 8.4shows what
the classes of these value objects might look like. We can basically move the
existing ifand throw statements from the Order entity to these new classes.
Listing 8.4. Value objects wrapping and validating primitive-type values.
final class EmailAddress
{
private string $emailAddress ;
public function __construct (string $emailAddress )
{
if(!filter_var ($emailAddress , FILTER_VALIDATE_EMAIL)) {
// We don't return an error, but throw an exception
throw new InvalidArgumentException(
198