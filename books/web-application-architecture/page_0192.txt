7. Time and randomness
havior now becomes part of your domain. In some cases the behavior might
actually get you in trouble, because the ideas of the author don’t match with
your ideas or expectations about the same concept. So a good rule of thumb
is that the classes you use as dependencies (constructor arguments, method
arguments and return types) in your domain model should also be designed
by you. It’s a good thing to make every aspect of your domain model’s design
explicit, and suitable for your particular use case.
In the case of our use of Uuid and DateTimeImmutable , the solution will be to
define our own value objects. This solves two issues at the same time:
1.We’ll have complete control over the API of our domain objects.
2.We won’t accidentally use IO in our domain objects, nor in the unit tests
we create for them.
The two value objects we need should represent “the ID of an order” and
“the creation date of an order”. Let’s start with the order ID and introduce
anOrderId value object that can represent this ID. Behind the scenes we’ll
still use a UUID. We’ll create an OrderId instance from a string that contains
a UUID, instead of from an already instantiated Ramsey
Uuid object. Listing 7.9shows a simple OrderId value object that should re-
place existing usages of Uuid is a parameter type.
Listing 7.9. The OrderId value object class.
final class OrderId
{
private string $id;
private function __construct (string $id)
{
Assertion ::uuid ($id);
$this ->id=$id;
}
public static function fromString (string $id):self
{
return new self( $id);
}
}
172