4. Application services
$ebook ->id(),
$request ->get('email_address' ),
(int) $request ->get('quantity' ),
$ebook ->price (),
$orderAmount
);
$orderRepository ->save ($order );
$this ->container ->get('session' )->set(
'currentOrderId' ,
$orderId ->asString ()
);
// ...
return new Response( /* ... */ );
}
We’ve pushed domain logic into an Order entity and introduced an abstrac-
tion for saving orders, which we called OrderRepository . We’ve also created
anEbook read model, which answers the question: what’s the price of this
e-book? The e-book price is represented as a Price value object. It has a con-
venient multipliedBy() method to calculate the total order amount. We’ve
spent a lot of effort on making the domain concepts and behaviors more
clear, and this has paid off. The story of ordering an e-book is getting easier to
follow with every refactoring step. There’s still one problem: the controller
action requires the context of a web application to run in. So everything in-
side orderEbookAction() should still be considered infrastructure code.
4.1. Considering other infrastructures
The code for the use case of “ordering an e-book” reveals that it’s supposed
to be called over HTTP. There is a web page with a form that makes this
use case available to its users. There is no other way to order an e-book. Let’s
repeat the thought experiment that we did in Chapter 3. What if our business
would make a major infrastructure switch: from the web to the command
85