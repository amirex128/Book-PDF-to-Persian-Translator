3. Read models and view models
public function save (Ebook $ebook ):void;
}
Now let’s find out if we can use this Ebook entity during the order process
when we need to know the price of an e-book. The simplest thing we could
do is add a getPrice() method to the entity. This makes it immediately usable
inside orderEbookAction() . Listing 3.3shows how the controller fetches the
right Ebook entity from the EbookRepository based on the ID that the user
provided by submitting the HTML form.
Listing 3.3. Using the Ebook entity inside the OrderController .
public function orderEbookAction (Request $request ):Response
{
$ebook =$this ->ebookRepository ->getById (
EbookId ::fromString ($request ->request ->get('ebook_id' ))
);
$ebookPrice =$ebook ->getPrice ();
$orderAmount =(int) $request ->get('quantity' )
*(int) $ebookPrice ;
// Save the order (Chapter 1)
// ...
return new Response( /* ... */ );
}
This solution looks good. The existing Ebook entity is a convenient object to
quickly get the information from, since it already carries that information
inside its $price field. However, there are a couple of issues with reusing an
existing entity in a different context.
First, the existing object is not designed to retrieve information from. We
use it to add new e-books to our catalog. When we want to temporarily re-
move it from the catalog, but don’t want to actually delete it, we call its hide()
method and save it again. Anything else we do with this Ebook entity is re-
lated to state changes, and anywhere we load the entity we do so with the
55