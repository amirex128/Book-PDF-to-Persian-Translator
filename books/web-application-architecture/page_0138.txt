5. Service locators
longer call that method without any argument, but have to provide the logged-
inUser and the client IP address from the current HTTP request.
Listing 5.6shows one of the clients of the SendIpConfirmationEmail service: a
web controller action. A controller naturally has access to the authenticated
user and the current Request object, so it’s easy to update the code to call
send() with the right arguments.
Listing 5.6. UserController has access to the required contextual informa-
tion and passes it to the SendIpConfirmationEmail service.
final class UserController
{
private SendIpConfirmationEmail $confirmationEmail ;
public function __construct (
SendIpConfirmationEmail $confirmationEmail
) {
$this ->confirmationEmail =$confirmationEmail ;
}
public function sendIpConfirmationEmail (
Request $request
):Response {
$this ->confirmationEmail ->send (
Auth ::user (),
$request ->ip()
);
// ...
}
}
Since the SendIpConfirmationEmail service itself no longer takes the IP ad-
dress from the current Request object, and it no longer relies on an active
session with an authenticated user, we have successfully decoupled this code
from its surrounding infrastructure. It doesn’t rely on a special context to
have been prepared for it. And it doesn’t rely on external systems to be avail-
able.
We’ve already done something similar in the previous chapter, where we ex-
118