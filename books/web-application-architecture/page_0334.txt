13. Ports and adapters
return new Response( /* ... */ );
}
}
We don’t have to limit ourselves to handling commands. The “command” bus
could also handle queries like listAvailableEbooks() . Maybe it should just
be called “bus” then, or “message bus”.
The downside of using a generic interface like CommandBus is that we loose the
parameter and return types that we have in the more specific Application -
Interface . But when it comes to testing, the CommandBus has the same benefit
as the ApplicationInterface . It’s also a single thing that you can replace
when you want to test incoming port adapters without also invoking code
inside the hexagon.
Now that we have interfaces for both incoming ports and outgoing ports, and
we’ve seen some examples of both incoming and outgoing port adapters, it’s
clear that the relation between port and adapter in both cases isn’t symmet-
rical. For outgoing ports, the application (or hexagon) contains an interface
(OrderRepository ,VatRateProvider ) for which the adapter has to provide an
implementation by implementing the interface. For incoming ports the appli-
cation also contains an interface (e.g. ApplicationInterface | orCommandBus )
but the adapters don’t implement this interface, they useit.
13.6. Combining ports and adapters with layers
In Chapter 12we introduced a layering system for applications, consisting
of a Domain ,Application , and Infrastructure layer. Hexagonal architecture
isorthogonal to a layered architecture. This means you can apply hexag-
onal architecture, a layered architecture, or both. Neither one implies the
other. However, they share the same origin: the desire to separate pure use
cases from infrastructural concerns. This is why I think they fit well together.
An application can have layers and at the same time explicitly define ports
and adapters. Figure 13.4 visualizes how layers, ports and adapters could be
combined. The inner hexagon contains the application’s use cases, divided
314