3. Read models and view models
private EbookId $ebookId ;
private int $price ;
/**
* @internal Only to be used by implementations
* of `EbookRepository`
*/
public function __construct (
EbookId $ebookId ,
int $price
) {
$this ->ebookId =$ebookId ;
$this ->price =$price ;
}
public function price ():int
{
return $this ->price ;
}
}
// usage in the controller:
$ebook =$this ->ebookRepository ->getById (
EbookId ::fromString ($request ->request ->get('ebook_id' ))
);
$ebookPrice =$ebook ->price ();
This approach is useful if you want to retrieve more than one piece of infor-
mation, or you’re pretty sure that you’ll want to do that in the near future.
For instance, let’s say you also need the title of the e-book to save it on the
Order itself. Then it makes sense to reuse that same Ebook read model and
add a title() method to it, so we can get both the title and the price from the
same object.
If on the other hand you only need one piece of information, you could let
go of the pseudo-entity. The interface could have a method that directly re-
turns the data you need. Listing 3.5shows how this could result in a read
model class ( Price ) and an interface with a method for retrieving a single
price (currently represented as an integer) based on an EbookId .
59