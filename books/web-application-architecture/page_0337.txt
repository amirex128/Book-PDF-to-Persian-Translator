13. Ports and adapters
accumulation of shared code. If, for instance, you have some mapping util-
ity that is used by all the SQL repositories, feel free to add it in the Sqlsub-
namespace. If it’s more like a generic utility that could be used by any class in
Infrastructure , you might as well make a generic sub-namespace for it too
(e.g. Shared orCommon ). The advice about shared code is always to keep it to a
minimum. If you don’t keep an eye on it, it will grow quickly until everything
ends up being “shared code”.
13.8. Summary
In this chapter we discussed Hexagonal architecture . This approach to appli-
cation architecture makes a clear distinction between pure application use
cases, and how they are connected to the actors that invoke them or are in-
voked by them. We start with recognizing the ports of an application, which
are intentions of communication between actors and our application. Ports
are interfaces, and are represented as such in code. For each port, we need
at least one adapter, which facilitates the actual communication, taking care
of its implementation details.
Hexagonal architecture fits well with the layering system we explored in the
previous chapter. In terms of layers, the inner hexagon consists of the Do-
main and Application layer combined. These layers contain the interfaces
and application services which represent the ports of the application. The
outer hexagon consists of the Infrastructure layer. This layer contains the
port adapters.
Knowing about ports and adapters we can reorganize the classes in the In-
frastructure layer. For instance, we can group classes by the type of the actor
or the technology used.
Exercises
1. In hexagonal architecture a Port is:a
317