12. Architectural layers
// ...
}
namespace Domain\Service;
/*
* A Domain class should not depend on a class from the
* Infrastructure layer
*/
use Infrastructure\ExchangeRateProvider;
final class CurrencyConverter
{
/**
* @var ExchangeRateProvider
*/
private $exchangeRateProvider ;
public function __construct (
ExchangeRateProvider $exchangeRateProvider
) {
$this ->exchangeRateProvider =$exchangeRateProvider ;
}
}
To manually check all of this, and to keep checking it for every future change
to our code base, would be a lot of work. However, this work could in theory
be automated. We can tell a tool that a class in the Domain ,Application , or
Infrastructure namespace should be considered to be inside the layer cor-
responding to that name. The tool could then scan each class in the project
and analyze its ‘namespace‘ and ‘use‘ statements. Based on this information
the tool could trigger a warning if a dependency between layers goes in the
wrong direction (e.g. from Domain toInfrastructure ). If the tool would also
look inside the code, it could warn us about the use of infrastructure code
inside a layer that’s supposed to contain only core code (i.e. the Domain or
Application layer).
As far as I know, there is no tool that can perform an “is this core or infras-
tructure code” check, meaning there is no tool to verify that code is in the
294