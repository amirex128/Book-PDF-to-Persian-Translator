2. The domain model
// ...
return new Response( /* ... */ );
}
The method is now a lot shorter. We no longer have SQL statements in our
regular code. When reading it, we don’t have to switch contexts as often, so
it’s definitely easier to understand what’s going on. Still, we only managed
to fix half of the original problem. We could hide only some implementation
details (the table names, the SQL queries), but left other implementation de-
tails inside the controller action (column names and types). This leaves us
still very much coupled to the technological decisions we made for this piece
of code: the code remains very table-oriented code, so we’re stuck using a
relational database.
Offering generic table-oriented manipulations like a table gateway does, ex-
poses another problem that we didn’t notice yet, but has been there from the
start. There’s nothing preventing us from inserting a string into the email
column that doesn’t even look like an email address. The table gateway also
doesn’t prevent us from incorrectly calculating an order amount and insert-
ing it directly into the database. In other words: we aren’t able to protect the
internal consistency of an e-book order.
2.3. Designing an entity
We want to take a customer’s order of an e-book, and remember it, so we
can later process it. So before saving an order, we should make sure that it’s
complete and correct. If we don’t, we may even have to contact our customers
afterwards and ask them to correct the data we received from them. We also
want to make sure that what ends up in the database, can safely be used by
other parts of the application, for instance by the payment module, or the
fulfillment module, which will send the e-book to the customer.
We’re lucky to be doing object-oriented programming, because with objects
we can achieve all of our goals. When an object gets created, it can accept
19