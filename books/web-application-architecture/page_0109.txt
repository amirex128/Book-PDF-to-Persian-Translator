4. Application services
tomers who visited our booth at a conference.
3.Some use cases need to be invoked on a regular basis, and now we have
to set up a cron job that can do this (well, maybe not ordering an e-book,
but synchronizing our local e-books catalog with some remote service).
In each example, the client is of a different type. In the first case we’ll need
another controller that parses the JSON we get from the external system and
somehow converts it into an actual order. In the second case we have to parse
a CSV file and loop over its lines, creating a new order for every line. The
third example is more like the command-line example we discussed before:
a cron job also needs a command-line entry point to particular use cases of
our application.
How can you make a use case usable by all these different clients?
4.2. Designing a use case to be reusable
To make a use case reusable we should find a common ground that allows
different types of clients to invoke the same use case. If you start with an
existing controller like the one we are working on right now, you should look
for the things that tie the code to specific infrastructure and then decouple
it from these elements. For instance, the code currently relies on a Request
object, which makes it only useful in a web context, and the same goes for
passing data to the next request by storing something in a Session object.
An API controller should not keep state between requests, and a CLI client
wouldn’t even know about sessions. So to make the use case code reusable
we should remove its dependencies on Request and Session .
We should also analyze the input and output of the use case. In our example,
the input is the information needed to create the order: the e-book ID, the
order quantity, and the buyer’s email address. What goes out is the ID of the
order that was created. Currently the input data is taken from the Request
object. In order to decouple from it and make this code reusable, we have to
redefine the input without mentioning any infrastructure-specific concept
like “request”. The output is just an ID, which isn’t tied to a particular infras-
tructure, so we won’t have additional work there.
89