1. Introduction
TheregisterUser() method doesn’t use PDO1directly to connect to a database
and start running queries against it. Instead, it uses an abstraction for database
connections (the Connection interface). This means that the Connection ob-
ject that gets injected as a constructor argument could be replaced by a sim-
pler implementation of that same interface which doesn’t actually need a
database (see Listing 1.3).
Listing 1.3. An implementation of Connection that doesn’t need a database.
final class ConnectionDummy implements Connection
{
/**
* @var array<array<string,mixed>>
*/
private array $records ;
/**
* @param array<string,mixed> $data
*/
public function insert (string $table ,array $data ):void
{
$this ->records [$table ][] =$data ;
}
}
This makes it possible to run the code in that registerUser() method, with-
out the need for the actual database to be up and running. Does that make
this code core code? No, because the Connection interface is specifically de-
signed to communicate with relational databases, as the insert() method
signature itself reveals. So although the registerUser() method doesn’t di-
rectly depend on an external system, it does depend on code written for in-
teracting with a specific type of external system. This means that the code in
Listing 1.2is not core code, but infrastructure code.
In general though, abstraction is the go-to solution to get rid of dependencies
on external systems. We’ll discuss several examples of abstraction in the next
chapters, but it might be useful to give you the summary here. Creating a
1PDO is a PHP extension that provides an API for accessing relational databases. See https:
//advwebapparch.com/pdo .
6