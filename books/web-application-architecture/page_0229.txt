8. Validation
how to do that, supported by a repository that can tell us how many books
are available.
Listing 8.12. Validating the ordered quantity by checking stock levels.
public function orderPhysicalBookAction (Request $request ):Response
{
$formErrors =[];
$quantityAvailable =$this ->stockRepository
->numberOfAvailableBooks ($request ->get('book_id' ));
if($quantityAvailable <$request ->get('quantity' )) {
$formErrors ['quantity' ][] =
'create_order.insufficient_quantity_in_stock' ;
}
// ...
}
Imagine once more that this application is no longer a web application. It’s
now a CLI application that system administrators can use to buy their books
from. This means we would no longer use the existing web controller, so this
validation code would not be called either. People could now order books
that aren’t even available. So again, we should conclude it’s the application
core that has to prevent this from happening. That way, our business rules
will always be enforced, regardless of the surrounding infrastructure.
Given that an entity can only validate input data based on its current state,
we can’t expect it to validate the given quantity. So the only logical place
to validate the order quantity is inside an application service. Listing 8.13
shows what it looks like if we move the validation logic to the application
service that processes physical book orders.
Listing 8.13. Checking availability in the application service.
final class OrderPhysicalBookService
{
private StockRepository $stockRepository ;
// ...
209