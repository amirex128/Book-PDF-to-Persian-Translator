12. Architectural layers
fast and predictable test doubles.
12.4. Making layers tangible
We’ve been putting things into layers, we’ve defined a dependency rule for
layers, but we never really talked about what a layer is. In fact, you could say
a layer is nothing. You won’t find a layer in your code, nor in your running
application. It’s just a way of grouping things. We say: these things belong to
this layer, those things belong to the other layer. But once we’ve made this
grouping, we can state the desired properties of these layers. For instance:
“this layer will contain no infrastructure code”, or “code dependencies be-
tween layers should only point inwards”. That’s why layering is an architec-
tural activity. Layers are a high-level way of organizing our code, and it’s one
that influences the way we write our code.
12.4.1. Documenting the architecture
Layers are esoteric by nature: we can’t see them in our code. We do work
with them, base decisions on them (what to put where, which things can de-
pend on other things), but we can’t point them out in our code base. This
makes it hard for people joining the project to find out what’s going on. The
high-level design choices we make about our application’s architecture are
choices we need to communicate. They need to be guarded and reinforced
as well. If someone doesn’t follow the dependency rule, or puts a class in
the wrong layer, a code reviewer should be able to spot the issue without
too much effort. Better yet, all team members should know about the layer-
ing system or they should be given the opportunity to find out about it. This
means we have to make our layers visible, tangible. Of course, we can write
a documentation page about it, and point team members to it. But this is
not a feasible solution because we don’t have satisfactory answers to these
questions:
•Does everybody really read the documentation?
290