2. The domain model
}
}
When calling mappedData() , external systems like the database, don’t have
to be available. In fact, the code in this method has no dependencies at
all. The mappedData() method can run in any context, without any special
setup. It doesn’t need any special setup: you can instantiate an Order ob-
ject in the normal way and call this mappedData() method. This code has
no dependencies that are designed to run in a specific context either. So
mappedData() complies with both rules for core code. How could it not be
core code; it only does some simple transformations on values in memory.
How about adding Doctrine mapping annotations to your entity, like @Entity ,
@Table , and @Column ? Does that result in mixed code? Well, instantiating
an entity with mapping annotations doesn’t require any special setup. And
calling any method on it doesn’t require external dependencies to be avail-
able. So if your entity is ready to be persisted using Doctrine, it should still
be considered core code, not infrastructure code.
However, an entity with Doctrine annotations or a mappedData() method
does contain technical implementation details (like table and column names
and column types). So when you get to the point where you want to switch
databases after all, you will still have to modify this code. For me this is
no reason to move the mapping code outside of the entity. In particular
because it’s so convenient to keep the entity’s properties and the mapping
code closely together.
2.6. Generating the identifier earlier
Let’s take another look at the controller code as it was after we started using
theOrder entity and the OrderRepository (see Listing 2.16).
Listing 2.16. The current state of the orderEbookAction() .
public function orderEbookAction (Request $request ):Response
{
// ...
$order =new Order( /* ... */ );
34