14. A testing strategy for decoupled applications
need to implement the port adapters for outgoing communication. There
may be some repository implementations to build, some database migrations
to generate, and maybe some API clients to develop. When it comes to testing
these port adapters you can use the suggestions provided in Section 14.2.
Finally you can set up some end-to-end tests. An interesting option is to reuse
the scenarios you wrote for the use case tests. Behat allows you to run the
same scenario against a different Context . During the first run you would test
only core code by making calls to the ApplicationInterface directly. During
the second run you would start the web server and any other required service
and test the entire application by making actual HTTP requests.
For me this top-down approach to application development is great because:
•It starts with collaboration: developers and other stakeholders work to-
gether to establish a shared understanding of what needs to be created.
•When developers start out to build a feature, they focus on the struc-
tural elements first, without building them yet.
•The scenarios that were written to establish that shared understanding
can now be used to verify step by step that the implemented solution is
the one that was asked for; you won’t end up building the wrong thing.
You’ll know automatically when the work is done so you won’t build
more than needed.
•Using different types of tests you can zoom in on specific parts, e.g.
smaller objects like entities, or specific port adapters. You don’t have
to test domain logic through slow and unstable end-to-end tests.
•Confidence in the solution is very high. Running the test suite for a given
feature proves that everything works, and keeps working.
14.8. Summary
Testing a decoupled application requires several different types of tests. In
the first place there will be Use case tests that describe the behavior of the
application core. Running these tests involves only core code. You can spec-
355