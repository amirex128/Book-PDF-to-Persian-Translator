13. Ports and adapters
hexagon. This means we are trying to define an abstraction for the hexagon
itself, which is in fact a collection of all the use cases of our application. This
collection of use cases can be defined as a single API, which is both an ab-
straction (port adapters don’t have to nor do they want to deal with what’s
going on behind the scenes) and a contract (port adapters rely on certain
behaviors to be provided by the hexagon). We could define this API as a sin-
gle interface and I think we may even be granted the Interface suffix here
(See also Mathias Verraes, “Sensible Interfaces”, https://advwebapparch.
com/sensible-interfaces .). Listing 13.9 shows what I mean.
Listing 13.9. TheApplicationInterface defining the API of the application.
interface ApplicationInterface
{
public function createOrder (CreateOrder $command ):OrderId;
/**
* @return array<Ebook>
*/
public function listAvailableEbooks ():array ;
// ...
}
This ApplicationInterface defines all the use cases that incoming port adapters
may invoke. A big advantage is that the ApplicationInterface can be used
in any controller that wants to invoke a use case (see Listing 13.10 ).
Listing 13.10. Using the ApplicationInterface in a controller.
final class EbookController
{
private ApplicationInterface $application ;
public function __construct (
ApplicationInterface $application
) {
$this ->application =$application ;
}
310