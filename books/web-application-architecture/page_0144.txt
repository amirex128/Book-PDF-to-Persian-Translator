5. Service locators
That’s not true either. A large part of the behavior of this service is defined
by the dependencies that are retrieved using the static helper functions, and
the service also relies on the correct behavior of those helper functions them-
selves. This is very inconvenient when you’re testing code. You’d want to be
able to treat the unit as a black box, call methods on it, and assert that it has
the desired behavior. What goes on inside, should not be a concern of the
unit test. However, when testing the initial version, the resulting test code
is very much concerned with the internals of the subject under test. It has
to ensure that everything is ready to call the send() method. Of course, for
the rewritten service we also need to set up a few things. But this can be
a “compiler-assisted” process, and when the compiler says you’re done, you
will actually be done. See Listing 5.10 and Figure 5.1for a demonstration of
such a process.
Listing 5.10. The compiler assists us when instantiating and using the ser-
vice.
new SendIpConfirmationEmail();
// Error: Missing constructor argument of type `Mailer`
$mailer =$this ->createMock (Mailer ::class );
new SendIpConfirmationEmail( $mailer );
// Error: Missing constructor argument of type `string`
$sender ='a string' ;
new SendIpConfirmationEmail( $mailer ,$sender );
// Error: Missing constructor argument of type `Translator`
$translator =$this ->createMock (Translator ::class );
$service =new SendIpConfirmationEmail(
$mailer ,
$sender ,
$translator
);
// Error: Value "a string" was expected to be a valid e-mail address.
$sender ='info@matthiasnoback.nl' ;
$service =new SendIpConfirmationEmail(
$mailer ,
124