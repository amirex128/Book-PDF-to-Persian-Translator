8. Validation
thrown. Depending on how many concurrent users the application has,
the chance that this happens should be really small. If it turns out that
an exception is no longer exceptional, that is, it gets thrown a lot, this is a
strong sign that we need to improve the user experience somehow.
Another definition of “exceptional” would be: “when things are really wrong”.
For instance, the network is down, we couldn’t write to a file, etc. Of course,
these are situations where we should feel free to throw an exception. But
I don’t think it’s the only case in which we should be allowed to use them.
Exceptions are a way to stop the execution of a function, and we want to
do that when we know we shouldn’t continue. Preventing bad things from
happening to our domain objects is a great reason for throwing exceptions.
8.5. When validation is not the answer
Let’s stay with the insufficient-stock-level situation a little longer. The title
above this section spoils the surprise: maybe validation is not the answer in
this case. Of course, a rudimentary check that we’re not selling something
we don’t have is a nice idea. But the answer we get from StockRepository ’s
numberOfAvailableBooks() may not be as accurate as we like it to be. We call
this method at the last possible moment, but theoretically we may still get the
wrong answer from it. Maybe between calling numberOfAvailableBooks()
and saving the order the system also saves another order for the same book
but from a different customer. If there was only one remaining book from
stock, the customer will never get the book they ordered, since the other cus-
tomer gets it (they were first, after all!). Did StockRepository give us a wrong
answer then? No, the answer it gave is always the correct answer at the mo-
ment it calculates the answer . It’s just that the answer changes all the time.
In functional programming terms, numberOfAvailableBooks() is an impure
function. Such a function is not referentially transparent, meaning that it can
give different answers if you call the function again. But while the answer
is continuously shifting, we still want to rely on it while validating the form
data submitted to the application. Well, it’s unfortunate, but we can’t rely on
an impure query function.
This may not be a problem for your system and their users. Maybe
214