11. Key design patterns
which then carries it to the application service. Use the class name of the
DTO to communicate intent. If the data is going to be used to change the de-
livery address of an order, the name should be ChangeDeliveryAddress . This
makes it a Command object2and the application service becomes a Command
handler .
When copying data from the request into the command object, don’t throw
exceptions when you encounter bad input (as discussed in Section 8.6). The
only thing you have to do is ensure that the request data is cast to the correct
types, that all the fields have a value assigned to them or are null if that’s an
allowed value (see Listing 11.12 ).
Listing 11.12. Using a DTO to define a shape for input data.
final class CreateOrder
{
use Mapping;
// ...
public static function fromRequestData (array $data ):self
{
return new self(
self ::getString ($data ,'email' ),
self ::getInt ($data ,'ebook_id' ),
self ::getInt ($data ,'quantity' ),
self ::getNonEmptyStringOrNull ($data ,'buyer_name' )
);
}
}
11.4.4. Translate primitive input to domain objects
An application service has to translate the primitive-type values from the
DTO to the value objects that the entity can work with. Listing 11.13 shows
how the application service takes the input and creates a value object which
can be passed to the Order::changeDeliveryAddress() method.
2Not to be confused with the Command design pattern.
260