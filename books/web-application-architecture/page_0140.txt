5. Service locators
}
5.7. Testing
I already mentioned testability as an important reason to reduce framework
coupling. In theory, you should be able to write a unit test for every class.
In practice, you may not want to do this, since different areas of a code base
require different types of tests (we’ll cover this topic in Chapter 14). For now,
let’s say we want to write a unit test for SendIpConfirmationEmail . A unit test
is a test that doesn’t use any IO (it doesn’t use the file system, a database, an
external service, etc.) and usually but not necessarily covers a smaller unit
of code, like a single class.
Let’s write a unit test for the initial version of the SendIpConfirmationEmail .
Listing 5.8shows what this test would look like.
Listing 5.8. A test for the initial version of the SendIpConfirmationEmail ser-
vice.
public function it_sends_an_ip_confirmation_email ():void
{
$user =new User( /* ... */ );
$ip ='123.234.123.234' ;
// Fake the currently logged in user
Auth ::shouldReceive ('user' )
->once ()
->andReturn ($user );
// Set the user's locale for `trans()`
App::setLocale ($user ->locale ());
// Configure the default sender email address
$sender ='info@mycompany.com' ;
Config ::set('mail.default_sender' ,$sender );
// Fake the current request
Request ::shouldReceive ('ip' )
120