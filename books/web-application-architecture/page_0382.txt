15. Conclusion
and making everybody angry. Improve your project just a little bit every day.
Your legacy application will never be fully decoupled, but it doesn’t have to
be either. Many areas of an application remain untouched most of the time,
so improving those parts and risking everything isn’t even worth your time.
15.5. I can never make my entire application decoupled
Not being able to make your entire application great is another objection to
getting started with the decoupled architecture approach in the first place.
I think this sentiment can be found in other areas of software development
too, not just architecture. Setting a coding standard, installing static analysis
tools, these things get postponed forever because you fear that you’ll never
be able to apply them everywhere. The urge for consistency is something that
gets in the way a lot in software development teams. Why not start today?
Every improvement you can make, even if it’s just in one module, can be the
starting point of a better life for everyone on the team, and for the application
itself too. Trying to apply a good design idea everywhere is a waste of time,
but not applying it anywhere is a wasted opportunity.
15.6. Isn’t this over-engineering?
When you’re the only one on the team trying to apply these design ideas any-
where at all, you might run into some resistance. All those extra classes, and
the extra tests! Why not just do it the way the frameworks tells us to do it?
Why not just write functional tests and be done with it? I hope this book has
already provided most of the answers. But to address the “over-engineering
objection”: I hope I’ve also been able to show you that the extra classes, inter-
faces, and tests deserve to be there. They are the result of making a distinc-
tion between core and infrastructure code. Keeping these separated requires
extra elements in your software. If you feel like core and infrastructure de-
serve to be apart, doing that extra work can’t be considered over-engineering.
It’s rather just-right-engineering . And since I believe that most web applica-
tions aren’t short-lived projects, nor are they CRUD-only, I believe that we’ve
362