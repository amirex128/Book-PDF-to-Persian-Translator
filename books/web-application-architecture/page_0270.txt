11. Key design patterns
$this ->wasCancelled =true ;
}
}
Methods that change the state of the entity, or perform an action on it, should
both be Command methods, that is, they should have a void return type.
While changing the delivery address of an order would be a simple update,
cancelling an order has an impact on what you can do with the order. As we
just saw, the same is true for delivering it. Once an order is in the ”cancelled”
state, it can no longer be delivered. Once an order is in the ”delivered” state,
it can no longer be cancelled. When you design an entity, it’ll be helpful to
create a state machine diagram for it, which documents the possible states of
an entity and what actions (state transitions) are available for any given state
(see Figure 11.1). Create unit tests for your entity to prove that it correctly
implements the state machine you had in mind.
Figure 11.1. Entity states and state transitions
11.2.4. Don’t think too much about tables
Design your object, its methods, and its properties without worrying about
persistence. Mapping the data to any kind of database should be a separate
task. Your entity should in the first place be a well-designed object regardless
of the database that will eventually support storing it. You should always be
able to define a mapping from your object to the database you want to use.
In fact, you can let the design of your object determine what storage model
would work best.
250