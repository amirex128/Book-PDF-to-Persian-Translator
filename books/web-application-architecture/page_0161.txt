6. External services
}
return (int) $this ->responseData ['rates' ]
[$fallbackType ]['rate' ];
}
}
final class VatApi
{
// ...
public function vatRateCheck (
string $rateType ,
string $countryCode ,
?string $filter
):VatRateCheckResult {
// ...
return new VatRateCheckResult( $responseData );
}
}
I still wouldn’t consider this excellent code. The issue is that it makes abun-
dant use of primitive types (you could say this code has Primitive obsession3).
This makes it really hard to use. Clients of VatApi::vatRateCheck() would
have to guess what a valid value for $fallbackType ,$rateType ,$countryCode ,
and$filter could be. This is a classic scenario where introducing some value
objects would be very helpful. They will assist the client while discovering
the possible values that they could provide. For instance, $rateType could be
promoted to a RateType value object, with two named constructors, which
make it an enum -like data type (Listing 6.5).
Listing 6.5. A value object for representing “rate types”.
final class RateType
{
private const GOODS ='GOODS' ;
3Martin Fowler, “Refactoring: Improving the Design of Existing Code”, Addison-Wesley Pro-
fessional (2018)
141