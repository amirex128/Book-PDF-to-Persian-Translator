3. Read models and view models
1.Only introduce an interface for objects that actually communicate
with something outside your application. This might save you a cou-
ple of interfaces.
2.Combine multiple interface methods in a single interface. This might
also save you a couple of interfaces.
3.Let a single class implement multiple interfaces. This certainly saves
you some classes.
4.Reuse the “answer” class for different queries. This also saves you
some classes.
However, always keep an eye on tension in the design. The downsides of
reducing the number of elements in your system are, respectively:
1.With fewer interfaces, it can be harder to replace an actual service
implementation with a test double. In my experience this is rarely a
problem though. When this happens, it should be easy to re-introduce
the interface after all.
2.An interface with multiple methods may give clients access to many
unrelated methods, which might confuse their own purpose, make
them dependent on too many things, and make it harder to change
the interface.
3.A class that implements too many interfaces will become hard to main-
tain when each method may have its own set of dependencies and
imports knowledge inside that class that gets entangled with other
similar knowledge. One way to fix this is to have a class implement
only interfaces with methods that are truly related.
4.If a class is used in one place, it will be easy to change it, because there
is only one client that may need to be updated. If it’s used in many
places it will be harder to change it, since there are many clients that
need to be updated and may potentially break.
A great example of a single class that could implement multiple related
interfaces is the SQL repository class which could implement the write
model’s EbookRepository , the read model’s EbookRepository interface, and
the view model’s Ebooks interface. Each method has a common set of de-
pendencies anyway (the database Connection object), and performs simi-
lar work. However, in practice I usually separate at least the write model
78