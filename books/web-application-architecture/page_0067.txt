2. The domain model
A problem that doesn’t go away with this approach is that there will be code
inside your AR entity that is framework or ORM-specific. This isn’t neces-
sarily a problem. You will always need some code to satisfy a framework or
ORM, whether it’s based on the Active Record or Data Mapper pattern. Just
keep as many of these details inside the object. And design your entities in
such a way that you can instantiate them and call methods on them without
the need for any special setup. This will allow you to write actual unit tests
for your entities, instead of the more expensive (harder to write, harder to
maintain) integration tests which need an actual database to run.
Is all this extra work really necessary? It seems like this would create extra
layers around out-of-the-box framework functionality that was supposed to
give you the highest development speed possible. Well, the extra work is
needed if you want to separate core from infrastructure code, which I assume
you do since it’s the premise of this book. On the other hand, if your expert
intuition tells you that this may indeed be too much work for not enough
gains, you should not ignore that feeling. In Chapter 15we’ll take a closer look
at the risk of over-engineering and how to decide if the approach described
in this book is a good choice for your particular situation.
2.9. Summary
In this chapter, we started with a controller action with mixed domain logic
and SQL statements. Trying to separate core code from infrastructure code,
we took an intermediate refactoring step, introducing a table gateway. This
left us with code that was still tied to a specific technology – a relational
database. Finally we refactored the code using two known design patterns:
Entity andRepository . The initial implementation could be improved by pro-
viding the entity with an ID upfront. The repository turned out to be a good
place for generating that ID. By introducing a value object for the entity’s ID
we were able to encapsulate the underlying data type of the ID, leaving that
implementation to the repository.
Now that we have an entity class, a repository class, and a repository inter-
face, we can tick all the boxes and mark this code as core code:
47