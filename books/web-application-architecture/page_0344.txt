14. A testing strategy for decoupled applications
just “adapters”. That’s why it makes sense for me to call these tests Adapter
tests . They prove that an adapter works correctly. Since there are two types
of ports, incoming and outgoing, it’s no surprise that there are two types of
adapter tests too.
14.3. Contract tests for outgoing port adapters
Outgoing ports are the ports where the application needs to communicate
with some external system, like a database, or a remote webservice. Outgo-
ing ports are defined by separate interfaces, like the OrderRepository that
can save an entity, and the VatRateProvider that we’ve used earlier to de-
termine the VatRate of a product. These interfaces were introduced as an
abstraction that allowed us to decouple core code from infrastructure code.
The interface makes it easy to replace the communication with the external
system with a fake implementation that we can use in our use case tests (see
Section 14.5). But the interface also defines a contract describing everything
we want from an implementation. The contract for the OrderRepository is
that it can save an Order entity and that you can get an equivalent object
back from it if you call its getById() method. It is helpful to clearly specify
and document the contract since the interface itself can’t communicate these
things. All it can describe about itself is the methods it has, their return types,
and their parameter types. One option is to document the behavior using in-
line documentation, but it’s actually more powerful to use a contract test to
describe the contract. Listing 14.3 shows what this looks like.
Listing 14.3. Part of the contract test for the OrderRepository .
use PHPUnit\Framework\TestCase;
final class OrderRepositoryContractTest extends TestCase
{
/**
* @test
* @dataProvider orders
*/
public function it_can_save_and_load_order_entities (Order $order ):void
{
324