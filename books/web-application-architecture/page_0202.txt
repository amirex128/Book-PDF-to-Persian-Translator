7. Time and randomness
Figure 7.4is a diagram of the current situation. We have several “domain-
specific” abstractions that we can now use. All the important concepts are
represented as core code, and infrastructure code is really only there to sup-
port them.
Even though our intentions were good, we now have a rather large number
of additional elements. We started with three classes, now we have 9 extra
classes and interfaces. As you know, introducing abstractions usually results
in two extra elements (an interface and a standard implementation), or three
when you introduce a new return type too. So abstractions have a cost, but as
we discussed before: they have many benefits. Both for the long-term main-
tainability of your application as for today’s testability of the code. However,
it’s important that you keep trying to limit the number of elements or parts
in your application.
Looking at Figure 7.4an important clue that we can remove a part is that
OrderRepositoryUsingSql uses the UuidFactory interface to get a Uuid in-
stance. We introduced this interface because creating a UUID is a service
responsibility that requires external dependencies to work. We didn’t want
to create a UUID in core code. But since OrderRepositoryUsingSql is already
infrastructure code it doesn’t have to jump back to core code by depending
onUuidFactory . It can just use the Uuid::uuid4() method directly (see List-
ing7.19).
Listing 7.19. Skipping the UuidFactory .
final class OrderRepositoryUsingSql
implements OrderRepository
{
public function nextIdentity ():OrderId
{
return OrderId ::fromString (
Uuid ::uuid4 ()->toString ()
);
}
}
This allows us to remove both the UuidFactory interface and the
UuidFactoryUsingRamseyUuid class.
182