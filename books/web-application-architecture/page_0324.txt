13. Ports and adapters
our controllers. All of the code involved in processing the incoming request
should be considered part of the adapter. In fact, the controller itself is also
part of the adapter, since the controller is specifically designed for HTTP com-
munication. It uses web-specific objects and services like the current request
or the userâ€™s session. As soon as the controller calls an application service,
we step out of the adapter and into the hexagon (see Listing 13.4).
Listing 13.4. The controller is part of the adapter, the application service
lives inside the hexagon.
final class OrderController
{
private EbookOrderService $ebookOrderService ;
public function __construct (EbookOrderService $ebookOrderService )
{
$this ->ebookOrderService =$ebookOrderService ;
}
public function orderEbookAction (Request $request ):Response
{
$orderId =$this ->ebookOrderService ->createOrder (
CreateOrder ::fromRequestData ($request ->request ->all())
);
return new Response( /* ... */ );
}
}
This is only true for as long as the application service itself is indeed fully de-
coupled from its delivery mechanism and the framework. It should be pos-
sible to call it not only from a web controller, but also from a CLI command
handler as is shown in Listing 13.5.
Listing 13.5. A CLI adapter of the port for creating an order .
final class CreateOrderCommand extends Command
{
private EbookOrderService $ebookOrderService ;
304