2. The domain model
$orderRepository =$this ->container ->get('order_repository' );
$lastInsertedId =$orderRepository ->save ($order );
// ...
}
By introducing the OrderRepository interface we managed to hide most of
the implementation details related to saving orders. There is only one left.
The ID of the Order that we create is an integer. Its value will only be known to
us when the OrderRepository has saved the order, which is why that integer
is the return value of its save() method. This still reveals to the reader of the
code that the mechanism used to persist an Order uses an auto-incrementing
integer column for the primary ID of an order.
It’s not necessarily bad if an object reveals part of its inner workings, al-
though we generally tend to avoid it. The real issue here is that we’re still
not in the position of completely replacing the underlying storage technol-
ogy. Not every database will support auto-incrementing ID columns or fields.
Not every database will be able to generate an ID and return it. And in the
most extreme case: some persistence mechanisms might not even be able to
synchronously return an identifier to the client.
Another problem is that the Order entity is supposed to be complete from
its beginning. It should hold the minimum set of data, in order to be useful,
and consistent in its behavior. Given that an Order doesn’t have an ID until
it has been saved, we should come to the opposite conclusion: Order isn’t
consistent, until the database has finished saving it.
What we’d like instead is a way to provide an Order with an ID the moment
we instantiate it. Adding it as a required constructor argument would accom-
plish this. By doing so, we can make sure that an Order object always has an
identifier (see Listing 2.25).
Listing 2.17. Order now has an identity from the start.
final class Order
{
private int $id;
// ...
35