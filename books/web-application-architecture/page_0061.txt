2. The domain model
lems like ID generation.
2.Technical decisions have an influence on more than just the design
qualities of our code.
As developer-architects we should be aware of the consequences of picking
a technology, like UUID version 4, or ULID. We need to answer the question
how our choice influences database performance, how it influences usabil-
ity, and so on. At the same time, we should keep an eye on technological
developments. In order to keep making the best decisions, we should know
what’s going on, and be ready to make a better decision tomorrow. At the
same time, and this is the entire point of this book, we shouldn’t be forced
to update our entire code base when some external technology changes.
2.7. Using a value object for the identifier
Now that we’re changing the type of an Order ’s identifier, let’s wrap the iden-
tifier inside a Value object13. That way, we can fully encapsulate the actual
data type of the identifier, allowing it to be an internal implementation detail
of the entity. Listing 2.26 shows the new OrderId value object class, and the
changes we have to make to the Order entity and the OrderRepository to use
this new type instead of intorUuidInterface .
Listing 2.26. OrderId hides the underlying ID type.
final class OrderId
{
private UuidInterface $id;
private function __construct (UuidInterface $id)
{
$this ->id=$id;
}
public static function fromUuid (UuidInterface $id):self
{
return new self( $id);
13Eric Evans, “Domain-Driven Design”, Addison-Wesley Professional (2003).
41