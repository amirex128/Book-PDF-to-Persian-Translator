4. Application services
$this ->eventDispatcher =$eventDispatcher ;
}
public function create (CreateOrder $command ):OrderId
{
// ...
$order =new Order( /* ... */ );
// First, save the Order
// Then dispatch the events that were recorded inside the event:
$this ->eventDispatcher ->dispatchAll ($order ->releaseEvents ());
return $orderId ;
}
}
/*
* This is an event subscriber, which should be registered as a
* subscriber for the `OrderWasCreated` event:
*/
final class SendEmail
{
private SendOrderConfirmationEmail $sendConfirmationEmail ;
public function __construct (
SendOrderConfirmationEmail $sendOrderConfirmationEmail
) {
$this ->sendConfirmationEmail =$sendConfirmationEmail ;
}
/*
* When the event dispatcher receives an `OrderWasCreated` event
* it will call this method:
*/
public function whenOrderWasCreated (OrderWasCreated $event ):void
{
$this ->sendConfirmationEmail
105