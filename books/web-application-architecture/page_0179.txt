6. External services
self ::assertEquals (
6.0,
$result ->rate ('telecom' )
);
}
}
This, again, introduces a more fine-grained test that allows you to test many
variations of constructor and method arguments. The more course-grained
tests like the test for VatApi itself will only have to test one or two of the most
common execution paths. The details will be verified in a unit test. Make
sure to always look for opportunities like this, where you can extract part of
the infrastructural code and write unit tests for it.
“What if VatApi were indeed part of the official API SDK,
or some other library?”
Do you still need to write your own integration tests for it? To find the
answer, you need to look at their code. Is it well written? Is it well tested?
Then, of course, you don’t need to write your own tests for their classes.
If you rely on certain special cases that are not covered by their tests, or
if they don’t have any tests, write them yourself. That way, you can verify
your assumptions about their code. And whenever they change their code,
you will know if they didn’t break things for you .
So you may or may not have to write your own integration tests for API
client code like VatApi . But for classes that are implementations of your
own abstractions, you should always provide integration tests. Whether
or not such an implementation uses a third-party dependency, you should
always demonstrate that your implementation is a proper implementation
for the interface you defined.
6.5. Summary
In this chapter we looked at integrating our use case with an external ser-
vice for determining VAT rates. Pasting the integration code directly into the
159