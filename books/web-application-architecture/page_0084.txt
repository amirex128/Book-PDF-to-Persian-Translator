3. Read models and view models
tracted using the entity’s recordedEvents() method. We then need to notify
any interested service of these events, so they can take further action. We’ll
look at the details of event dispatching and event subscribing in Section 11.5,
so here we only look at the big picture. Listing 3.8shows how a service makes
a change to an Ebook entity, saves it using its repository, and then dispatches
the internally recorded events using an event dispatcher service. Eventually
this will trigger a call to the UpdateEbookReadModel event subscriber, which
fetches the corresponding read model from the repository and updates its
price field using the data from the PriceChanged domain event.
Listing 3.8. Using domain events to update a read model.
/*
* Whenever a service changes the price of an e-book, it will
* internally record a `PriceChanged` event. We broadcast this
* event by sending it (and other recorded events) to the
* event dispatcher.
*/
$ebook ->changePrice (150);
$this ->ebookRepository ->save ($ebook );
$this ->eventDispatcher ->dispatchAll ($ebook ->recordedEvents ());
/*
* If we register `UpdateEbookReadModel` as an event subscriber
* for `PriceChanged` events, the event dispatcher will
* call it whenever such an event occurs.
*
* The listener then updates the read model using the data from
* the event object.
*/
final class UpdateEbookReadModel
{
// ...
public function whenPriceChanged (PriceChanged $event ):void
{
$readModel =$this ->readModelRepository ->getById (
$event ->ebookId ()
);
64