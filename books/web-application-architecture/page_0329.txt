13. Ports and adapters
also invoke the actual EbookOrderService , even though we’re only interested
in testing the behavior of the port adapter itself. To prevent this we should
try to replace the EbookOrderService with a test double. This is currently
impossible because EbookOrderService is afinal class which doesn’t allow
subclassing; a necessity when creating test doubles. A quick solution would
be to make the class non- final so you can create a test-double for it, but that
doesn’t make sense to me; the class is not supposed to be extended so it should
remain final2. A better solution is to define an interface for the incoming
port as well. You can always create a test-double for an interface because it’s
designed to be extended (in fact: implemented). The question is: what should
the interface look like? Well, at least it should contain an abstract version of
theEbookOrderService::create() method (see Listing 13.8).
Listing 13.8. An attempt at defining an interface for an application service
interface EbookOrderServiceInterface
{
public function create (CreateOrder $command ):OrderId;
}
final class EbookOrderService implements EbookOrderServiceInterface
{
// ...
public function create (CreateOrder $command ):OrderId
{
// ...
}
}
I think it’ll be quite annoying when you have to always create an application
service class and a separate interface that looks just like the class. So let’s not
go this way.
We can find a more generalized solution by taking the bigger picture into
account. We are trying to define the incoming ports of our hexagon so we
can invoke only the port adapters without also invoking the code inside the
2Read more about marking classes as final in “Final classes by default, why?”: https:
//advwebapparch.com/final-classes .
309