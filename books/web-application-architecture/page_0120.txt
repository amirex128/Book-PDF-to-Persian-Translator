4. Application services
$this ->twig ->render ('email/order_confirmation.html.twig' )
);
$this ->mailer ->send ($message );
// ...
}
}
One advantage of moving the code to a service is that the dependencies are
more clear now because the service uses constructor injection (more on this
in Chapter 5). But at the same time seeing all these dependencies worries
me. I wouldn’t want my application service to depend on all this specific
technology. The Twig Environment class and template, the Swift_Mailer and
Swift_Message classes, the system’s email address. These things don’t belong
inside the more domain-oriented code of the application service.
But we still want to send that email. What can we do to reduce the number of
dependencies, and also reduce their specificness? We should use the power
of abstraction once more. Instead of using Twig and the SwiftMailer directly
inside the application service we should let the service talk to an interface,
like the SendOrderConfirmationEmail interface in Listing 4.13.
Listing 4.13. An abstraction for sending order confirmation emails.
interface SendOrderConfirmationEmail
{
public function send (OrderId $orderId , string $emailAddress ):void;
}
The interface is like a guarantee that at runtime, it will be possible to send
an actual email. And if any service wants to do that, it should depend on this
interface, so it doesn’t have to worry about the details of sending that email.
Now let’s modify the application service to use this new interface instead of
the concrete dependencies it used before. Listing 4.14 shows how this sim-
plifies the code in the application service a lot. An added benefit is that it’s
now easy to recognize that sending the confirmation email is the second step
in the process of creating an order. You no longer have to read all the lines
of code dealing with Twig and SwiftMailer to figure out what’s happening.
100