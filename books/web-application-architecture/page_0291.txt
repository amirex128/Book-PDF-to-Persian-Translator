11. Key design patterns
them in a database, or something like that. Infrastructure-specific event sub-
scribers don’t need to delegate their job to an application service. In fact,
they can’t, because an application service can’t do any infrastructure work;
it’s supposed to be core code. So with infrastructure-level event subscribers
you just do whatever you need to do inside the event subscriber itself. Of
course, you can always delegate some of the work to other (infrastructure)
services that you inject as constructor arguments of the event subscriber.
11.6. Read models
While application services deal with entities, which are write models, a client
that needs information from an entity shouldn’t use the entity itself but a
dedicated Read model instead. There are internal and external read mod-
els (which are often called view models, see Section 11.6.3 ). Let’s start with
internal read models.
11.6.1. Use internal read models when you need information
Given a client and its need for information, start by defining a new type
of object that would be able to provide this information. For example, the
InvoicingService is going to create an invoice for an order so it needs to
know a few things about the order. In InvoicingService act as if it already
existed (see Listing 11.20 ).
Listing 11.20. InvoicingService acts as if an Order read model already ex-
ists.
final class InvoicingService
{
// ...
public function createInvoiceForOrder (OrderId $orderId )
{
// ...
$invoice =Invoice ::create (
271