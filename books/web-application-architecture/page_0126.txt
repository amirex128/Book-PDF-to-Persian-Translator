4. Application services
->send ($event ->orderId (), $event ->emailAddress ());
}
}
Figure 4.2. The resulting set of objects and their interactions.
4.6. Summary
We started this chapter with a controller that represented the use case of or-
dering an e-book. The only way this use case could be invoked was through
a web form request. To make the use case reusable, we first removed web-
specific dependencies like Request ,Response and the Session object. After
that, the code only relied on primitive-type input data and a few service de-
pendencies. We moved the infrastructure-independent code to its own class,
making the use case effectively reusable. By introducing this class, which
is called an Application service , we made it possible for any type of client to
provide the necessary input data and exercise this use case. Finally, we used
theIntroduce Parameter Object refactoring to combine all the primitive-type
106