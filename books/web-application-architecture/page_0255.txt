9. Conclusion
To me, legacy code is simply code without tests.2
You’ll need special techniques to handle this kind of code. You’ll feel the need
to rewrite parts of it sooner than with tested code. However, changing any-
thing about it will be a very scary thing to do, because it’s very likely that
you’ll break things. As Martin Fowler puts it:
Whenever I do refactoring, the first step is always the same. I need
to ensure I have a solid set of tests for that section of code. The
tests are essential because even though I will follow refactorings
structured to avoid most of the opportunities for introducing bugs,
I’m still human and still make mistakes.3
There’s this interesting asymmetry about tests, as Robert Martin points out:
I know this sounds ridiculous; but consider. If somehow all your
production code got deleted, but you had a backup of your tests,
then you’d be able to recreate the production system with a little
work.4
If you only have production code, then it will be really hard to write tests for
it. If you only have tests, then it will be much easier to write the production
code that will make them pass. This shows the value of the tests: they spec-
ify what the production code is supposed to do, and, if you write good tests,
they’ll also explain why.
Of course, I know that testing can be hard sometimes. It will be annoying,
it will sometimes feel like extra work. But all of this can in my experience
be solved by simply investing more time in it. Make sure you get better at
testing, every day. There’s a rule that people use for this kind of problem: “if
it hurts, do it more often”. Fowler calls this “frequency reduces difficulty”5.
It’s not just the repetition that makes it easier. The real trick is that repetition
will automatically make you look for better ways of doing it. In other words,
2Michael Feathers, “Working Effectively with Legacy Code”, First Edition, Prentice Hall
(2004)
3Martin Fowler, “Refactoring: Improving the Design of Existing Code”, Addison-Wesley Pro-
fessional (2018)
4Robert C. Martin, “Test First”, https://advwebapparch.com/test-first
5Martin Fowler, https://advwebapparch.com/frequency-reduces-difficulty
235