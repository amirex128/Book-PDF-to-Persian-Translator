8. Validation
validation error.
So for the e-book ID validation I’d suggest the same strategy: don’t even val-
idate. Simply assume that the user has used the user interface in the correct
way, and didn’t tamper with the request data. If they did, everything should
go fine once the data is being used to instantiate and manipulate domain ob-
jects. If they didn’t, we still have our entity-level protection in place, and we
simply show the generic error page.
Since throwing an entity-level exception is a just-in-case protection mecha-
nism, you should keep track of them. If you find these exceptions in your
server logs, it usually means that:
1.Somebody is abusing your application, or
2.You should improve the user interface so users can’t make the same
mistake again.
Looking at the data that was submitted, it should be easy to choose between
these two options. Also, most users are good people, so we can assume most
of the times it’s just an issue with the user interface that enables users to
submit bad data. Take action to make sure the exception never shows up
again.
8.4. Using exceptions to talk to users
To be fair, not all entity-level exceptions fall in the previously mentioned cat-
egories. There’s a third category. Some things can’t be validated in the user
interface, or at least, it would be very inefficient to do so. And in some situa-
tions you only know late in the process if the request could be fully processed.
For instance, what if besides e-books, we’d also sell physical books. We only
have a limited supply of each title, and we keep track of how many books we
still have in stock. Since we only sell what we have and can’t re-stock, the
number of books still available is the number of books we can offer to our
customers.
Should we do validation the moment the request comes in? Listing 8.12 shows
208