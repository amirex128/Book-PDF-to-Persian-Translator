9. Conclusion
Figure 9.9. Because the use case is now represented by core code, it’s easy
to invoke it in other situations. It’s also easy to run it in a testing
environment.
Of course, your domain model will have to evolve itself. You want to incor-
porate new pieces of knowledge that you have gained along the way. But
infrastructure shouldn’t get in the way of doing so. Testing the behavior of
a domain model should happen in a really fast loop, giving you feedback on
the design while you’re still working on that design. You shouldn’t be forced
to test core behavior with a functional test , which invokes the application in-
cluding all layers of the stack.
9.4. Focus on testability
Production code needs tests which describe the developer’s knowledge in
terms of expectations about the code’s runtime behavior. Code alone, with-
out any tests, won’t be able to preserve the relevant knowledge. When you
encounter code without tests, you’ll have to read the code to find out why it’s
there. And even then, it’ll be very hard to find out why something is done the
way it’s done. Which is why Michael Feathers says:
234